!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
.DEFAULT_GOAL	cola2_lib/doc/Makefile	/^.DEFAULT_GOAL := default$/;"	m
.DEFAULT_GOAL	cola2_lib_ros/doc/Makefile	/^.DEFAULT_GOAL := default$/;"	m
A	cola2_lib/include/cola2_lib/utils/ned.h	/^const double A = 6378137.0;$/;"	m	namespace:cola2::utils
ABORT	cola2_core/cola2_safety/include/cola2_safety/safety_rules/common.h	/^  static const std::size_t ABORT = 2;$/;"	m	struct:SafetyRules::SafetyLevel
ABORT_AND_SURFACE	cola2_core/cola2_safety/include/cola2_safety/safety_rules/common.h	/^  static const std::size_t ABORT_AND_SURFACE = 3;$/;"	m	struct:SafetyRules::SafetyLevel
ALL	cola2_lib/include/cola2_lib/wmmc/GeomagnetismHeader.h	/^    ALL$/;"	e	enum:__anon12
ALTITUDE	cola2_core/cola2_control/include/cola2_control/controllers/types.h	/^  static const std::uint64_t ALTITUDE = 1;$/;"	m	class:control::Request
ALTITUDE	cola2_lib/include/cola2_lib/mission/mission_goto.h	/^    ALTITUDE,  \/\/!< Control the vehicle in altitude.$/;"	m	class:MissionGoto::HeaveMode
ALTITUDE	cola2_lib/include/cola2_lib/mission/mission_park.h	/^    ALTITUDE,  \/\/!< Control the vehicle in altitude.$/;"	m	class:MissionPark::HeaveMode
ALTITUDE	cola2_lib/include/cola2_lib/mission/mission_section.h	/^    ALTITUDE,  \/\/!< Control the vehicle in altitude.$/;"	m	class:MissionSection::HeaveMode
ALTITUDE_ENCODING_ERROR	cola2_lib/include/cola2_lib/comms/altitude.h	/^    ALTITUDE_ENCODING_ERROR = 255,  \/\/!< value for encoding errors, should not appear$/;"	e	enum:__anon10
ALTITUDE_INVALID	cola2_lib/include/cola2_lib/comms/altitude.h	/^    ALTITUDE_INVALID = 254,         \/\/!< value when no altitude data is available$/;"	e	enum:__anon10
ALTITUDE_LOOKUP_SIZE	cola2_lib/include/cola2_lib/comms/altitude.h	/^    ALTITUDE_LOOKUP_SIZE = 208,     \/\/!< size of the lookup table$/;"	e	enum:__anon10
ALTITUDE_MAXIMUM	cola2_lib/include/cola2_lib/comms/altitude.h	/^    ALTITUDE_MAXIMUM = 253,         \/\/!< value when altitude is bigger than the biggest value in lookup table$/;"	e	enum:__anon10
ALTITUDE_WINDOW_SIZE	cola2_core/cola2_nav/include/cola2_nav/ekf_base_ros.h	/^constexpr size_t ALTITUDE_WINDOW_SIZE = 4;              \/\/!< altitude window to check for valid measurements$/;"	m	namespace:__anon1
ALT_BOUND_MIN	cola2_lib/include/cola2_lib/wmmc/GeomagnetismHeader.h	90;"	d
ANCHOR	cola2_core/cola2_control/include/cola2_control/controllers/types.h	/^  static const std::uint64_t ANCHOR = 1;$/;"	m	class:control::Request
ATanH	cola2_lib/include/cola2_lib/wmmc/GeomagnetismHeader.h	66;"	d
AXIS_POSE_PITCH	cola2_core/cola2_control/src/cola2_control/joystickbase.py	/^    AXIS_POSE_PITCH = 4$/;"	v	class:JoystickBase
AXIS_POSE_ROLL	cola2_core/cola2_control/src/cola2_control/joystickbase.py	/^    AXIS_POSE_ROLL = 3$/;"	v	class:JoystickBase
AXIS_POSE_X	cola2_core/cola2_control/src/cola2_control/joystickbase.py	/^    AXIS_POSE_X = 0$/;"	v	class:JoystickBase
AXIS_POSE_Y	cola2_core/cola2_control/src/cola2_control/joystickbase.py	/^    AXIS_POSE_Y = 1$/;"	v	class:JoystickBase
AXIS_POSE_YAW	cola2_core/cola2_control/src/cola2_control/joystickbase.py	/^    AXIS_POSE_YAW = 5$/;"	v	class:JoystickBase
AXIS_POSE_Z	cola2_core/cola2_control/src/cola2_control/joystickbase.py	/^    AXIS_POSE_Z = 2$/;"	v	class:JoystickBase
AXIS_TWIST_P	cola2_core/cola2_control/src/cola2_control/joystickbase.py	/^    AXIS_TWIST_P = 9$/;"	v	class:JoystickBase
AXIS_TWIST_Q	cola2_core/cola2_control/src/cola2_control/joystickbase.py	/^    AXIS_TWIST_Q = 10$/;"	v	class:JoystickBase
AXIS_TWIST_R	cola2_core/cola2_control/src/cola2_control/joystickbase.py	/^    AXIS_TWIST_R = 11$/;"	v	class:JoystickBase
AXIS_TWIST_U	cola2_core/cola2_control/src/cola2_control/joystickbase.py	/^    AXIS_TWIST_U = 6$/;"	v	class:JoystickBase
AXIS_TWIST_V	cola2_core/cola2_control/src/cola2_control/joystickbase.py	/^    AXIS_TWIST_V = 7$/;"	v	class:JoystickBase
AXIS_TWIST_W	cola2_core/cola2_control/src/cola2_control/joystickbase.py	/^    AXIS_TWIST_W = 8$/;"	v	class:JoystickBase
A_	cola2_core/cola2_nav/include/cola2_nav/ekf_base.h	/^  Eigen::MatrixXd A_;   \/\/!< Linearizartion of f(x) w.r.t. filter state (df(x) \/ dx) (computed in$/;"	m	class:EKFBase
ActuatorOriginCallback	stonefish_ros/include/stonefish_ros/ROSSimulationManager.h	/^	class ActuatorOriginCallback$/;"	c	namespace:sf
ActuatorOriginCallback	stonefish_ros/src/ROSSimulationManager.cpp	/^ActuatorOriginCallback::ActuatorOriginCallback(Actuator* act) : act(act)$/;"	f	class:sf::ActuatorOriginCallback
AddROSRobot	stonefish_ros/src/ROSSimulationManager.cpp	/^void ROSSimulationManager::AddROSRobot(ROSRobot* robot)$/;"	f	class:sf::ROSSimulationManager
AlreadyOpen	cola2_lib/include/cola2_lib/io/serial_port.h	/^    AlreadyOpen() : logic_error("Serial port was already open")$/;"	f	class:cola2::io::SerialPort::AlreadyOpen
AlreadyOpen	cola2_lib/include/cola2_lib/io/serial_port.h	/^    AlreadyOpen(const std::string& whatArg) : logic_error(whatArg)$/;"	f	class:cola2::io::SerialPort::AlreadyOpen
AlreadyOpen	cola2_lib/include/cola2_lib/io/serial_port.h	/^  class AlreadyOpen : public std::logic_error$/;"	c	class:cola2::io::SerialPort
AnchorController	cola2_core/cola2_control/include/cola2_control/controllers/anchor.h	/^class AnchorController$/;"	c
AnchorController	cola2_core/cola2_control/src/cola2_control/controllers/anchor.cpp	/^AnchorController::AnchorController(AnchorControllerConfig config) : config_(config)$/;"	f	class:AnchorController
AnchorControllerConfig	cola2_core/cola2_control/include/cola2_control/controllers/anchor.h	/^} AnchorControllerConfig;$/;"	t	typeref:struct:__anon5
B	cola2_lib/include/cola2_lib/utils/ned.h	/^const double B = 6356752.3142;$/;"	m	namespace:cola2::utils
BAUD_110	cola2_lib/include/cola2_lib/io/serial_port.h	/^  BAUD_110,     \/\/!< Baud rate 110.$/;"	e	enum:cola2::io::EBaudRate
BAUD_115200	cola2_lib/include/cola2_lib/io/serial_port.h	/^  BAUD_115200,  \/\/!< Baud rate 115200.$/;"	e	enum:cola2::io::EBaudRate
BAUD_1200	cola2_lib/include/cola2_lib/io/serial_port.h	/^  BAUD_1200,    \/\/!< Baud rate 1200.$/;"	e	enum:cola2::io::EBaudRate
BAUD_134	cola2_lib/include/cola2_lib/io/serial_port.h	/^  BAUD_134,     \/\/!< Baud rate 134.$/;"	e	enum:cola2::io::EBaudRate
BAUD_150	cola2_lib/include/cola2_lib/io/serial_port.h	/^  BAUD_150,     \/\/!< Baud rate 150.$/;"	e	enum:cola2::io::EBaudRate
BAUD_1800	cola2_lib/include/cola2_lib/io/serial_port.h	/^  BAUD_1800,    \/\/!< Baud rate 1800.$/;"	e	enum:cola2::io::EBaudRate
BAUD_19200	cola2_lib/include/cola2_lib/io/serial_port.h	/^  BAUD_19200,   \/\/!< Baud rate 19200.$/;"	e	enum:cola2::io::EBaudRate
BAUD_200	cola2_lib/include/cola2_lib/io/serial_port.h	/^  BAUD_200,     \/\/!< Baud rate 200.$/;"	e	enum:cola2::io::EBaudRate
BAUD_230400	cola2_lib/include/cola2_lib/io/serial_port.h	/^  BAUD_230400,  \/\/!< Baud rate 230400.$/;"	e	enum:cola2::io::EBaudRate
BAUD_2400	cola2_lib/include/cola2_lib/io/serial_port.h	/^  BAUD_2400,    \/\/!< Baud rate 2400.$/;"	e	enum:cola2::io::EBaudRate
BAUD_300	cola2_lib/include/cola2_lib/io/serial_port.h	/^  BAUD_300,     \/\/!< Baud rate 300.$/;"	e	enum:cola2::io::EBaudRate
BAUD_38400	cola2_lib/include/cola2_lib/io/serial_port.h	/^  BAUD_38400,   \/\/!< Baud rate 38400.$/;"	e	enum:cola2::io::EBaudRate
BAUD_460800	cola2_lib/include/cola2_lib/io/serial_port.h	/^  BAUD_460800,  \/\/!< Baud rate 460800.$/;"	e	enum:cola2::io::EBaudRate
BAUD_4800	cola2_lib/include/cola2_lib/io/serial_port.h	/^  BAUD_4800,    \/\/!< Baud rate 4800.$/;"	e	enum:cola2::io::EBaudRate
BAUD_50	cola2_lib/include/cola2_lib/io/serial_port.h	/^  BAUD_50,      \/\/!< Baud rate 50.$/;"	e	enum:cola2::io::EBaudRate
BAUD_57600	cola2_lib/include/cola2_lib/io/serial_port.h	/^  BAUD_57600,   \/\/!< Baud rate 57600.$/;"	e	enum:cola2::io::EBaudRate
BAUD_600	cola2_lib/include/cola2_lib/io/serial_port.h	/^  BAUD_600,     \/\/!< Baud rate 600.$/;"	e	enum:cola2::io::EBaudRate
BAUD_75	cola2_lib/include/cola2_lib/io/serial_port.h	/^  BAUD_75,      \/\/!< Baud rate 75.$/;"	e	enum:cola2::io::EBaudRate
BAUD_9600	cola2_lib/include/cola2_lib/io/serial_port.h	/^  BAUD_9600,    \/\/!< Baud rate 9600.$/;"	e	enum:cola2::io::EBaudRate
BAUD_DEFAULT	cola2_lib/include/cola2_lib/io/serial_port.h	/^  BAUD_DEFAULT = BAUD_57600  \/\/!< Default baud rate 57600.$/;"	e	enum:cola2::io::EBaudRate
BAUD_INVALID	cola2_lib/include/cola2_lib/io/serial_port.h	/^  BAUD_INVALID,              \/\/!< Invalid baud rate.$/;"	e	enum:cola2::io::EBaudRate
BCB_STATUS_INDICATOR_1	cola2_core/cola2_safety/include/cola2_safety/safety_rules/common.h	/^const std::size_t BCB_STATUS_INDICATOR_1 = 19;$/;"	m	namespace:SafetyRules::StatusCodeBits
BCB_STATUS_INDICATOR_2	cola2_core/cola2_safety/include/cola2_safety/safety_rules/common.h	/^const std::size_t BCB_STATUS_INDICATOR_2 = 20;$/;"	m	namespace:SafetyRules::StatusCodeBits
BOTH	cola2_core/cola2_control/include/cola2_control/controllers/types.h	/^  static const std::uint64_t BOTH = 2;$/;"	m	class:control::Request
BUILDDIR	stonefish_ros/docs/Makefile	/^BUILDDIR      = _build$/;"	m
BUTTON_A	cola2_core/cola2_control/src/logitech_fx10_to_teleoperation_node.py	/^    BUTTON_A = 0$/;"	v	class:LogitechFX10
BUTTON_B	cola2_core/cola2_control/src/logitech_fx10_to_teleoperation_node.py	/^    BUTTON_B = 1$/;"	v	class:LogitechFX10
BUTTON_BACK	cola2_core/cola2_control/src/logitech_fx10_to_teleoperation_node.py	/^    BUTTON_BACK = 6$/;"	v	class:LogitechFX10
BUTTON_LEFT	cola2_core/cola2_control/src/logitech_fx10_to_teleoperation_node.py	/^    BUTTON_LEFT = 4$/;"	v	class:LogitechFX10
BUTTON_LEFT_JOY	cola2_core/cola2_control/src/logitech_fx10_to_teleoperation_node.py	/^    BUTTON_LEFT_JOY = 9$/;"	v	class:LogitechFX10
BUTTON_LOGITECH	cola2_core/cola2_control/src/logitech_fx10_to_teleoperation_node.py	/^    BUTTON_LOGITECH = 8$/;"	v	class:LogitechFX10
BUTTON_POSE_PITCH	cola2_core/cola2_control/src/cola2_control/joystickbase.py	/^    BUTTON_POSE_PITCH = 4$/;"	v	class:JoystickBase
BUTTON_POSE_ROLL	cola2_core/cola2_control/src/cola2_control/joystickbase.py	/^    BUTTON_POSE_ROLL = 3$/;"	v	class:JoystickBase
BUTTON_POSE_X	cola2_core/cola2_control/src/cola2_control/joystickbase.py	/^    BUTTON_POSE_X = 0$/;"	v	class:JoystickBase
BUTTON_POSE_Y	cola2_core/cola2_control/src/cola2_control/joystickbase.py	/^    BUTTON_POSE_Y = 1$/;"	v	class:JoystickBase
BUTTON_POSE_YAW	cola2_core/cola2_control/src/cola2_control/joystickbase.py	/^    BUTTON_POSE_YAW = 5$/;"	v	class:JoystickBase
BUTTON_POSE_Z	cola2_core/cola2_control/src/cola2_control/joystickbase.py	/^    BUTTON_POSE_Z = 2$/;"	v	class:JoystickBase
BUTTON_RIGHT	cola2_core/cola2_control/src/logitech_fx10_to_teleoperation_node.py	/^    BUTTON_RIGHT = 5$/;"	v	class:LogitechFX10
BUTTON_RIGHT_JOY	cola2_core/cola2_control/src/logitech_fx10_to_teleoperation_node.py	/^    BUTTON_RIGHT_JOY = 10$/;"	v	class:LogitechFX10
BUTTON_START	cola2_core/cola2_control/src/logitech_fx10_to_teleoperation_node.py	/^    BUTTON_START = 7$/;"	v	class:LogitechFX10
BUTTON_TWIST_P	cola2_core/cola2_control/src/cola2_control/joystickbase.py	/^    BUTTON_TWIST_P = 9$/;"	v	class:JoystickBase
BUTTON_TWIST_Q	cola2_core/cola2_control/src/cola2_control/joystickbase.py	/^    BUTTON_TWIST_Q = 10$/;"	v	class:JoystickBase
BUTTON_TWIST_R	cola2_core/cola2_control/src/cola2_control/joystickbase.py	/^    BUTTON_TWIST_R = 11$/;"	v	class:JoystickBase
BUTTON_TWIST_U	cola2_core/cola2_control/src/cola2_control/joystickbase.py	/^    BUTTON_TWIST_U = 6$/;"	v	class:JoystickBase
BUTTON_TWIST_V	cola2_core/cola2_control/src/cola2_control/joystickbase.py	/^    BUTTON_TWIST_V = 7$/;"	v	class:JoystickBase
BUTTON_TWIST_W	cola2_core/cola2_control/src/cola2_control/joystickbase.py	/^    BUTTON_TWIST_W = 8$/;"	v	class:JoystickBase
BUTTON_X	cola2_core/cola2_control/src/logitech_fx10_to_teleoperation_node.py	/^    BUTTON_X = 2$/;"	v	class:LogitechFX10
BUTTON_Y	cola2_core/cola2_control/src/logitech_fx10_to_teleoperation_node.py	/^    BUTTON_Y = 3$/;"	v	class:LogitechFX10
BatteryControlBoard	cola2_core/cola2_safety/include/cola2_safety/safety_rules/battery_control_board.h	/^class BatteryControlBoard : public SafetyRuleBaseClass$/;"	c	namespace:SafetyRules
BatteryControlBoard	cola2_core/cola2_safety/src/cola2_safety/safety_rules/battery_control_board.cpp	/^BatteryControlBoard::BatteryControlBoard(const std::string& rule_name)$/;"	f	class:SafetyRules::BatteryControlBoard
BatteryLevel	cola2_core/cola2_safety/include/cola2_safety/safety_rules/battery_level.h	/^class BatteryLevel : public SafetyRuleBaseClass$/;"	c	namespace:SafetyRules
BatteryLevel	cola2_core/cola2_safety/src/cola2_safety/safety_rules/battery_level.cpp	/^BatteryLevel::BatteryLevel(const std::string& rule_name)$/;"	f	class:SafetyRules::BatteryLevel
BigEndianFormat	cola2_core/cola2_comms/include/cppystruct/format.h	/^struct BigEndianFormat$/;"	s	namespace:pystruct
BigEndianFormat	cola2_core/cola2_comms/include/cppystruct/format.h	/^struct BigEndianFormat<'s'>$/;"	s	namespace:pystruct
Bool	cola2_core/cola2_safety/include/cola2_safety/safety_rules/common.h	/^    Bool,$/;"	m	class:SafetyRules::SafetyRuleBaseClass::DataType
BuildScenario	stonefish_ros/src/ROSSimulationManager.cpp	/^void ROSSimulationManager::BuildScenario()$/;"	f	class:sf::ROSSimulationManager
Bx	cola2_lib/include/cola2_lib/wmmc/GeomagnetismHeader.h	/^    double Bx; \/* North *\/$/;"	m	struct:__anon19
By	cola2_lib/include/cola2_lib/wmmc/GeomagnetismHeader.h	/^    double By; \/* East *\/$/;"	m	struct:__anon19
Bz	cola2_lib/include/cola2_lib/wmmc/GeomagnetismHeader.h	/^    double Bz; \/* Down *\/$/;"	m	struct:__anon19
CALCULATE_NUMTERMS	cola2_lib/include/cola2_lib/wmmc/GeomagnetismHeader.h	35;"	d
CHAR_SIZE_5	cola2_lib/include/cola2_lib/io/serial_port.h	/^  CHAR_SIZE_5,                     \/\/!< 5 bit characters.$/;"	e	enum:cola2::io::ECharacterSize
CHAR_SIZE_6	cola2_lib/include/cola2_lib/io/serial_port.h	/^  CHAR_SIZE_6,                     \/\/!< 6 bit characters.$/;"	e	enum:cola2::io::ECharacterSize
CHAR_SIZE_7	cola2_lib/include/cola2_lib/io/serial_port.h	/^  CHAR_SIZE_7,                     \/\/!< 7 bit characters.$/;"	e	enum:cola2::io::ECharacterSize
CHAR_SIZE_8	cola2_lib/include/cola2_lib/io/serial_port.h	/^  CHAR_SIZE_8,                     \/\/!< 8 bit characters.$/;"	e	enum:cola2::io::ECharacterSize
CHAR_SIZE_DEFAULT	cola2_lib/include/cola2_lib/io/serial_port.h	/^  CHAR_SIZE_DEFAULT = CHAR_SIZE_8  \/\/!< Default char size 8 bit.$/;"	e	enum:cola2::io::ECharacterSize
CHAR_SIZE_INVALID	cola2_lib/include/cola2_lib/io/serial_port.h	/^  CHAR_SIZE_INVALID,               \/\/!< Invalid character size.$/;"	e	enum:cola2::io::ECharacterSize
COEFFICIENTS	cola2_lib/include/cola2_lib/wmmc/GeomagnetismHeader.h	/^enum COEFFICIENTS {$/;"	g
COLA2_COMMS_ALTITUDE_H	cola2_lib/include/cola2_lib/comms/altitude.h	16;"	d
COLA2_COMMS_ELAPSED_TIME_H	cola2_lib/include/cola2_lib/comms/elapsed_time.h	16;"	d
COLA2_CONTROL_INCLUDE_COLA2_CONTROL_CONTROLLERS_ANCHOR_H_	cola2_core/cola2_control/include/cola2_control/controllers/anchor.h	9;"	d
COLA2_CONTROL_INCLUDE_COLA2_CONTROL_CONTROLLERS_HOLONOMIC_KEEP_POSITION_H_	cola2_core/cola2_control/include/cola2_control/controllers/holonomic_keep_position.h	9;"	d
COLA2_CONTROL_INCLUDE_COLA2_CONTROL_CONTROLLERS_SECTION_H_	cola2_core/cola2_control/include/cola2_control/controllers/section.h	9;"	d
COLA2_CONTROL_INCLUDE_COLA2_CONTROL_CONTROLLERS_TYPES_H_	cola2_core/cola2_control/include/cola2_control/controllers/types.h	10;"	d
COLA2_LIB_INCLUDE_COLA2_LIB_COLA2_CONTROL_IAUVCONTROLLER_H_	cola2_core/cola2_control/include/cola2_control/low_level_controllers/auv_controller_base.h	10;"	d
COLA2_LIB_INCLUDE_COLA2_LIB_COLA2_CONTROL_IAUVROSCONTROLLER_H_	cola2_core/cola2_control/include/cola2_control/ros_controller/auv_ros_controller_base.h	10;"	d
COLA2_LIB_INCLUDE_COLA2_LIB_COLA2_CONTROL_ICONTROLLER_H_	cola2_core/cola2_control/include/cola2_control/low_level_controllers/controller_base.h	10;"	d
COLA2_LIB_INCLUDE_COLA2_LIB_COLA2_CONTROL_MERGE_H_	cola2_core/cola2_control/include/cola2_control/low_level_controllers/merge.h	10;"	d
COLA2_LIB_INCLUDE_COLA2_LIB_COLA2_CONTROL_NDOFCONTROLLER_H_	cola2_core/cola2_control/include/cola2_control/low_level_controllers/ndof_controller.h	10;"	d
COLA2_LIB_INCLUDE_COLA2_LIB_COLA2_CONTROL_PID_H_	cola2_core/cola2_control/include/cola2_control/low_level_controllers/pid.h	10;"	d
COLA2_LIB_INCLUDE_COLA2_LIB_COLA2_CONTROL_POLY_H_	cola2_core/cola2_control/include/cola2_control/low_level_controllers/poly.h	10;"	d
COLA2_LIB_INCLUDE_COLA2_LIB_COLA2_CONTROL_REQUEST_H_	cola2_core/cola2_control/include/cola2_control/low_level_controllers/request.h	10;"	d
COLA2_LIB_INCLUDE_COLA2_LIB_ROSUTILS_CAPTAIN_HELPER_H_	cola2_lib_ros/include/cola2_lib_ros/captain_helper.h	15;"	d
COLA2_LIB_INCLUDE_COLA2_LIB_ROS_DIAGNOSTIC_HELPER_H_	cola2_lib_ros/include/cola2_lib_ros/diagnostic_helper.h	14;"	d
COLA2_LIB_INCLUDE_COLA2_LIB_ROS_PARAMLOADER_H_	cola2_lib_ros/include/cola2_lib_ros/param_loader.h	15;"	d
COLA2_LIB_INCLUDE_COLA2_LIB_ROS_SETPOINTS_SELECTOR_H_	cola2_lib_ros/include/cola2_lib_ros/setpoints_selector.h	14;"	d
COLA2_LIB_INCLUDE_COLA2_LIB_UTILS_SERVICECLIENT_HELPER_H_	cola2_lib_ros/include/cola2_lib_ros/serviceclient_helper.h	14;"	d
COLA2_NAV_EKF_BASE_H	cola2_core/cola2_nav/include/cola2_nav/ekf_base.h	10;"	d
COLA2_NAV_EKF_BASE_ROS_H_	cola2_core/cola2_nav/include/cola2_nav/ekf_base_ros.h	9;"	d
COLA2_NAV_EKF_POSITION_VELOCITY_H	cola2_core/cola2_nav/include/cola2_nav/ekf_position_velocity.h	9;"	d
COLA2_NAV_EKF_SURFACE_2D_H	cola2_core/cola2_nav/include/cola2_nav/ekf_surface_2d.h	9;"	d
COLA2_NAV_TRANSFORMATIONS_H	cola2_core/cola2_nav/include/cola2_nav/transformations.h	9;"	d
COLA2_NAV_TRANSFORM_HANDLER_H_	cola2_lib_ros/include/cola2_lib_ros/transform_handler.h	14;"	d
COLA2_SAFETY_INCLUDE_COLA2_SAFETY_SAFETY_RULES_BATTERY_CONTROL_BOARD_H_	cola2_core/cola2_safety/include/cola2_safety/safety_rules/battery_control_board.h	9;"	d
COLA2_SAFETY_INCLUDE_COLA2_SAFETY_SAFETY_RULES_BATTERY_LEVEL_H_	cola2_core/cola2_safety/include/cola2_safety/safety_rules/battery_level.h	9;"	d
COLA2_SAFETY_INCLUDE_COLA2_SAFETY_SAFETY_RULES_CAPTAIN_H_	cola2_core/cola2_safety/include/cola2_safety/safety_rules/captain.h	9;"	d
COLA2_SAFETY_INCLUDE_COLA2_SAFETY_SAFETY_RULES_CHECK_ENABLED_H_	cola2_core/cola2_safety/include/cola2_safety/safety_rules/check_enabled.h	9;"	d
COLA2_SAFETY_INCLUDE_COLA2_SAFETY_SAFETY_RULES_COMBINED_WATER_INSIDE_H_	cola2_core/cola2_safety/include/cola2_safety/safety_rules/combined_water_inside.h	9;"	d
COLA2_SAFETY_INCLUDE_COLA2_SAFETY_SAFETY_RULES_COMMON_H_	cola2_core/cola2_safety/include/cola2_safety/safety_rules/common.h	9;"	d
COLA2_SAFETY_INCLUDE_COLA2_SAFETY_SAFETY_RULES_COMMS_H_	cola2_core/cola2_safety/include/cola2_safety/safety_rules/comms.h	9;"	d
COLA2_SAFETY_INCLUDE_COLA2_SAFETY_SAFETY_RULES_MANUAL_H_	cola2_core/cola2_safety/include/cola2_safety/safety_rules/manual.h	9;"	d
COLA2_SAFETY_INCLUDE_COLA2_SAFETY_SAFETY_RULES_NAVIGATOR_H_	cola2_core/cola2_safety/include/cola2_safety/safety_rules/navigator.h	9;"	d
COLA2_SAFETY_INCLUDE_COLA2_SAFETY_SAFETY_RULES_TELEOPERATION_H_	cola2_core/cola2_safety/include/cola2_safety/safety_rules/teleoperation.h	9;"	d
COLA2_SAFETY_INCLUDE_COLA2_SAFETY_SAFETY_RULES_TEMPERATURE_H_	cola2_core/cola2_safety/include/cola2_safety/safety_rules/temperature.h	9;"	d
COLA2_SAFETY_INCLUDE_COLA2_SAFETY_SAFETY_RULES_VIRTUAL_CAGE_H_	cola2_core/cola2_safety/include/cola2_safety/safety_rules/virtual_cage.h	9;"	d
COLA2_SAFETY_INCLUDE_COLA2_SAFETY_SAFETY_RULES_WATCHDOG_TIMER_H_	cola2_core/cola2_safety/include/cola2_safety/safety_rules/watchdog_timer.h	9;"	d
COLA2_SAFETY_INCLUDE_COLA2_SAFETY_SAFETY_RULES_WATER_INSIDE_H_	cola2_core/cola2_safety/include/cola2_safety/safety_rules/water_inside.h	9;"	d
CROSS_HORIZONTAL	cola2_core/cola2_control/src/logitech_fx10_to_teleoperation_node.py	/^    CROSS_HORIZONTAL = 6  # LEFT+, RIGHT-$/;"	v	class:LogitechFX10
CROSS_VERTICAL	cola2_core/cola2_control/src/logitech_fx10_to_teleoperation_node.py	/^    CROSS_VERTICAL = 7  # UP+, DOWN-$/;"	v	class:LogitechFX10
CURRENT_MISSION_STEPS_BASE	cola2_core/cola2_safety/include/cola2_safety/safety_rules/common.h	/^const std::size_t CURRENT_MISSION_STEPS_BASE = 7;  \/\/ From 0 to 7$/;"	m	namespace:SafetyRules::StatusCodeBits
Captain	cola2_core/cola2_control/src/captain_node.cpp	/^Captain::Captain()$/;"	f	class:Captain
Captain	cola2_core/cola2_control/src/captain_node.cpp	/^class Captain$/;"	c	file:
Captain	cola2_core/cola2_safety/include/cola2_safety/safety_rules/captain.h	/^class Captain : public SafetyRuleBaseClass$/;"	c	namespace:SafetyRules
Captain	cola2_core/cola2_safety/src/cola2_safety/safety_rules/captain.cpp	/^  Captain::Captain(const std::string& rule_name, ros::NodeHandle* nh_ptr)$/;"	f	class:SafetyRules::Captain
CaptainStates	cola2_core/cola2_control/src/captain_node.cpp	/^  enum class CaptainStates$/;"	c	class:Captain	file:
CentralMeridian	cola2_lib/include/cola2_lib/wmmc/GeomagnetismHeader.h	/^    double CentralMeridian;$/;"	m	struct:__anon25
CheckEnabled	cola2_core/cola2_safety/include/cola2_safety/safety_rules/check_enabled.h	/^class CheckEnabled : public SafetyRuleBaseClass$/;"	c	namespace:SafetyRules
CheckEnabled	cola2_core/cola2_safety/src/cola2_safety/safety_rules/check_enabled.cpp	/^  CheckEnabled::CheckEnabled(const std::string& rule_name)$/;"	f	class:SafetyRules::CheckEnabled
Client	cola2_lib/include/cola2_lib/io/udp_socket.h	/^class Client$/;"	c	namespace:cola2::io::udp_socket
Client	cola2_lib/src/cola2_lib/io/udp_socket.cpp	/^Client::Client()$/;"	f	class:cola2::io::udp_socket::Client
CoefficientFileEndDate	cola2_lib/include/cola2_lib/wmmc/GeomagnetismHeader.h	/^    double CoefficientFileEndDate;$/;"	m	struct:__anon13
ColorCameraImageReady	stonefish_ros/src/ROSSimulationManager.cpp	/^void ROSSimulationManager::ColorCameraImageReady(ColorCamera* cam)$/;"	f	class:sf::ROSSimulationManager
CombinedWaterInside	cola2_core/cola2_safety/include/cola2_safety/safety_rules/combined_water_inside.h	/^class CombinedWaterInside : public SafetyRuleBaseClass$/;"	c	namespace:SafetyRules
CombinedWaterInside	cola2_core/cola2_safety/src/cola2_safety/safety_rules/combined_water_inside.cpp	/^  CombinedWaterInside::CombinedWaterInside(const std::string& rule_name)$/;"	f	class:SafetyRules::CombinedWaterInside
Common	cola2_core/cola2_safety/test/test_common.cpp	/^Common::Common()$/;"	f	class:Common
Common	cola2_core/cola2_safety/test/test_common.cpp	/^class Common : public SafetyRules::SafetyRuleBaseClass$/;"	c	file:
Comms	cola2_core/cola2_safety/include/cola2_safety/safety_rules/comms.h	/^class Comms : public SafetyRuleBaseClass$/;"	c	namespace:SafetyRules
Comms	cola2_core/cola2_safety/src/cola2_safety/safety_rules/comms.cpp	/^  Comms::Comms(const std::string& rule_name)$/;"	f	class:SafetyRules::Comms
CommsNode	cola2_core/cola2_comms/src/comms_node.cpp	/^CommsNode::CommsNode() : nh_("~"), diag_help_(nh_, "comms", cola2::ros::getUnresolvedNodeName())$/;"	f	class:CommsNode
CommsNode	cola2_core/cola2_comms/src/comms_node.cpp	/^class CommsNode$/;"	c	file:
ComputerLogger	cola2_core/cola2_log/src/computer_logger_node.py	/^class ComputerLogger(object):$/;"	c
Config	cola2_core/cola2_comms/src/comms_node.cpp	/^  struct Config$/;"	s	class:CommsNode	file:
Config	cola2_core/cola2_nav/include/cola2_nav/ekf_base_ros.h	/^  struct Config$/;"	s	class:EKFBaseROS
Config	cola2_core/cola2_sim/src/dynamics_node.cpp	/^  struct Config$/;"	s	class:Dynamics	file:
ConvergenceOfMeridians	cola2_lib/include/cola2_lib/wmmc/GeomagnetismHeader.h	/^    double ConvergenceOfMeridians;$/;"	m	struct:__anon25
CustomCommands	cola2_core/cola2_comms/src/comms_node.cpp	/^enum CustomCommands$/;"	g	file:
DATACUTOFF	cola2_lib/include/cola2_lib/wmmc/GeomagnetismHeader.h	/^    DATACUTOFF,$/;"	e	enum:PARAMS
DAY	cola2_lib/include/cola2_lib/wmmc/GeomagnetismHeader.h	/^    DAY$/;"	e	enum:YYYYMMDD
DECLINATION	cola2_lib/include/cola2_lib/wmmc/GeomagnetismHeader.h	/^    DECLINATION,$/;"	e	enum:__anon12
DECL_ERROR_OFFSET_BASE	cola2_lib/include/cola2_lib/wmmc/GeomagnetismHeader.h	41;"	d
DECL_ERROR_SLOPE_BASE	cola2_lib/include/cola2_lib/wmmc/GeomagnetismHeader.h	43;"	d
DEG2RAD	cola2_lib/include/cola2_lib/wmmc/GeomagnetismHeader.h	65;"	d
DEPTH	cola2_core/cola2_control/include/cola2_control/controllers/types.h	/^  static const std::uint64_t DEPTH = 0;$/;"	m	class:control::Request
DEPTH	cola2_lib/include/cola2_lib/mission/mission_goto.h	/^    DEPTH,     \/\/!< Control the vehile in depth.$/;"	m	class:MissionGoto::HeaveMode
DEPTH	cola2_lib/include/cola2_lib/mission/mission_park.h	/^    DEPTH,     \/\/!< Control the vehile in depth.$/;"	m	class:MissionPark::HeaveMode
DEPTH	cola2_lib/include/cola2_lib/mission/mission_section.h	/^    DEPTH,     \/\/!< Control the vehile in depth.$/;"	m	class:MissionSection::HeaveMode
DGNM	cola2_lib/include/cola2_lib/wmmc/GeomagnetismHeader.h	/^    DGNM,$/;"	e	enum:COEFFICIENTS
DHNM	cola2_lib/include/cola2_lib/wmmc/GeomagnetismHeader.h	/^    DHNM$/;"	e	enum:COEFFICIENTS
DROP_WEIGHT	cola2_core/cola2_safety/include/cola2_safety/safety_rules/common.h	/^  static const std::size_t DROP_WEIGHT = 5;$/;"	m	struct:SafetyRules::SafetyLevel
DataBuffer	cola2_lib/include/cola2_lib/io/io_base.h	/^typedef std::vector<unsigned char> DataBuffer;  \/\/!< Buffer for reading\/writing in the io module of Cola2 Lib$/;"	t	namespace:cola2::io
DataType	cola2_core/cola2_safety/include/cola2_safety/safety_rules/common.h	/^  enum class DataType$/;"	c	class:SafetyRules::SafetyRuleBaseClass
Day	cola2_lib/include/cola2_lib/wmmc/GeomagnetismHeader.h	/^    int Day;$/;"	m	struct:__anon17
DecimalYear	cola2_lib/include/cola2_lib/wmmc/GeomagnetismHeader.h	/^    double DecimalYear; \/* decimal years *\/$/;"	m	struct:__anon17
Decl	cola2_lib/include/cola2_lib/wmmc/GeomagnetismHeader.h	/^    double Decl; \/* 1. Angle between the magnetic field vector and true north, positive east*\/$/;"	m	struct:__anon21
Decldot	cola2_lib/include/cola2_lib/wmmc/GeomagnetismHeader.h	/^    double Decldot; \/*9. Yearly Rate of change in declination*\/$/;"	m	struct:__anon21
DefaultParamHandler	cola2_core/cola2_log/src/default_param_handler_node.py	/^class DefaultParamHandler(object):$/;"	c
DepthCameraImageReady	stonefish_ros/src/ROSSimulationManager.cpp	/^void ROSSimulationManager::DepthCameraImageReady(DepthCamera* cam)$/;"	f	class:sf::ROSSimulationManager
DiagnosticHelper	cola2_lib_ros/include/cola2_lib_ros/diagnostic_helper.h	/^class DiagnosticHelper$/;"	c	namespace:cola2::ros
DiagnosticHelper	cola2_lib_ros/python/cola2_ros/diagnostic_helper.py	/^class DiagnosticHelper(object):$/;"	c
DiagnosticHelper	cola2_lib_ros/src/cola2_lib_ros/diagnostic_helper.cpp	/^DiagnosticHelper::DiagnosticHelper(::ros::NodeHandle& nh, const std::string& name, const std::string& hardware_id)$/;"	f	class:cola2::ros::DiagnosticHelper
DisableCurrents	stonefish_ros/src/ROSSimulationManager.cpp	/^bool ROSSimulationManager::DisableCurrents(std_srvs::Trigger::Request &req, std_srvs::Trigger::Response &res)$/;"	f	class:sf::ROSSimulationManager
Double	cola2_core/cola2_safety/include/cola2_safety/safety_rules/common.h	/^    Double,$/;"	m	class:SafetyRules::SafetyRuleBaseClass::DataType
Dynamics	cola2_core/cola2_sim/src/dynamics_node.cpp	/^Dynamics::Dynamics() : nh_("~"), thrusters_diag_(nh_, "thrusters", cola2::ros::getUnresolvedNodeName()), setpoints_selector_(nh_)$/;"	f	class:Dynamics
Dynamics	cola2_core/cola2_sim/src/dynamics_node.cpp	/^class Dynamics$/;"	c	file:
EBaudRate	cola2_lib/include/cola2_lib/io/serial_port.h	/^enum EBaudRate$/;"	g	namespace:cola2::io
ECharacterSize	cola2_lib/include/cola2_lib/io/serial_port.h	/^enum ECharacterSize$/;"	g	namespace:cola2::io
EFlowControl	cola2_lib/include/cola2_lib/io/serial_port.h	/^enum EFlowControl$/;"	g	namespace:cola2::io
EKFBase	cola2_core/cola2_nav/include/cola2_nav/ekf_base.h	/^class EKFBase$/;"	c
EKFBase	cola2_core/cola2_nav/src/cola2_nav/ekf_base.cpp	/^EKFBase::EKFBase(const unsigned int initial_state_vector_size) : initial_state_vector_size_(initial_state_vector_size)$/;"	f	class:EKFBase
EKFBaseROS	cola2_core/cola2_nav/include/cola2_nav/ekf_base_ros.h	/^class EKFBaseROS : public EKFBase$/;"	c
EKFBaseROS	cola2_core/cola2_nav/src/cola2_nav/ekf_base_ros.cpp	/^EKFBaseROS::EKFBaseROS(const unsigned int initial_state_vector_size, const bool online)$/;"	f	class:EKFBaseROS
EKFPositionVelocity	cola2_core/cola2_nav/include/cola2_nav/ekf_position_velocity.h	/^class EKFPositionVelocity : public EKFBaseROS$/;"	c
EKFPositionVelocity	cola2_core/cola2_nav/src/cola2_nav/ekf_position_velocity.cpp	/^EKFPositionVelocity::EKFPositionVelocity(const bool online) : EKFBaseROS(6, online)$/;"	f	class:EKFPositionVelocity
EKFSurface2D	cola2_core/cola2_nav/include/cola2_nav/ekf_surface_2d.h	/^class EKFSurface2D : public EKFBaseROS$/;"	c
EKFSurface2D	cola2_core/cola2_nav/src/cola2_nav/ekf_surface_2d.cpp	/^EKFSurface2D::EKFSurface2D() : EKFBaseROS(6)$/;"	f	class:EKFSurface2D
ELAPSED_TIME_ENCODING_ERROR	cola2_lib/include/cola2_lib/comms/elapsed_time.h	/^    ELAPSED_TIME_ENCODING_ERROR = 255,  \/\/!< value for encoding errors, should not appear$/;"	e	enum:__anon9
ELAPSED_TIME_INVALID	cola2_lib/include/cola2_lib/comms/elapsed_time.h	/^    ELAPSED_TIME_INVALID = 254,         \/\/!< value when no elapsed_time data is available$/;"	e	enum:__anon9
ELAPSED_TIME_LOOKUP_SIZE	cola2_lib/include/cola2_lib/comms/elapsed_time.h	/^    ELAPSED_TIME_LOOKUP_SIZE = 176,     \/\/!< size of the lookup table$/;"	e	enum:__anon9
ELAPSED_TIME_MAXIMUM	cola2_lib/include/cola2_lib/comms/elapsed_time.h	/^    ELAPSED_TIME_MAXIMUM = 253,         \/\/!< value when elapsed_time is bigger than the biggest value in lookup table$/;"	e	enum:__anon9
ELSQ	cola2_lib/include/cola2_lib/utils/ned.h	/^const double ELSQ = 6.73949674228 * 0.001;$/;"	m	namespace:cola2::utils
EMERGENCY_SURFACE	cola2_core/cola2_safety/include/cola2_safety/safety_rules/common.h	/^  static const std::size_t EMERGENCY_SURFACE = 4;$/;"	m	struct:SafetyRules::SafetyLevel
EPOCH	cola2_lib/include/cola2_lib/wmmc/GeomagnetismHeader.h	/^    EPOCH,$/;"	e	enum:PARAMS
EParity	cola2_lib/include/cola2_lib/io/serial_port.h	/^enum EParity$/;"	g	namespace:cola2::io
ESQ	cola2_lib/include/cola2_lib/utils/ned.h	/^const double ESQ = 6.69437999014 * 0.001;$/;"	m	namespace:cola2::utils
EStopBits	cola2_lib/include/cola2_lib/io/serial_port.h	/^enum EStopBits$/;"	g	namespace:cola2::io
EXPIRY_TIME	cola2_lib_ros/include/cola2_lib_ros/setpoints_selector.h	/^  static constexpr double EXPIRY_TIME = 1.0;                    \/\/<! Expiry time.$/;"	m	class:cola2::ros::SetpointsSelector
EXTSECVARDEG	cola2_lib/include/cola2_lib/wmmc/GeomagnetismHeader.h	/^    EXTSECVARDEG,$/;"	e	enum:PARAMS
EXTSTATICDEG	cola2_lib/include/cola2_lib/wmmc/GeomagnetismHeader.h	/^    EXTSTATICDEG,$/;"	e	enum:PARAMS
Easting	cola2_lib/include/cola2_lib/wmmc/GeomagnetismHeader.h	/^    double Easting; \/* (X) in meters*\/$/;"	m	struct:__anon25
EditionDate	cola2_lib/include/cola2_lib/wmmc/GeomagnetismHeader.h	/^    double EditionDate;$/;"	m	struct:__anon13
Eigen	cola2_core/cola2_nav/include/cola2_nav/ekf_base.h	/^namespace Eigen$/;"	n
Eigen	cola2_core/cola2_sim/src/dynamics_node.cpp	/^namespace Eigen$/;"	n	file:
EnableCurrents	stonefish_ros/src/ROSSimulationManager.cpp	/^bool ROSSimulationManager::EnableCurrents(std_srvs::Trigger::Request &req, std_srvs::Trigger::Response &res)$/;"	f	class:sf::ROSSimulationManager
F	cola2_lib/include/cola2_lib/utils/ned.h	/^const double F = 1.0 \/ 298.257223563;$/;"	m	namespace:cola2::utils
F	cola2_lib/include/cola2_lib/wmmc/GeomagnetismHeader.h	/^    double F; \/*3. Magnetic Field Strength*\/$/;"	m	struct:__anon21
FALSE	cola2_lib/include/cola2_lib/wmmc/GeomagnetismHeader.h	72;"	d
FLOW_CONTROL_DEFAULT	cola2_lib/include/cola2_lib/io/serial_port.h	/^  FLOW_CONTROL_DEFAULT = FLOW_CONTROL_NONE  \/\/!< Default flow control: none.$/;"	e	enum:cola2::io::EFlowControl
FLOW_CONTROL_HARD	cola2_lib/include/cola2_lib/io/serial_port.h	/^  FLOW_CONTROL_HARD,                        \/\/!< Flow control: hardware.$/;"	e	enum:cola2::io::EFlowControl
FLOW_CONTROL_INVALID	cola2_lib/include/cola2_lib/io/serial_port.h	/^  FLOW_CONTROL_INVALID,                     \/\/!< Invalid flow control.$/;"	e	enum:cola2::io::EFlowControl
FLOW_CONTROL_NONE	cola2_lib/include/cola2_lib/io/serial_port.h	/^  FLOW_CONTROL_NONE,                        \/\/!< Flow control: none.$/;"	e	enum:cola2::io::EFlowControl
FLOW_CONTROL_SOFT	cola2_lib/include/cola2_lib/io/serial_port.h	/^  FLOW_CONTROL_SOFT,                        \/\/!< Flow control: software.$/;"	e	enum:cola2::io::EFlowControl
FLSScanReady	stonefish_ros/src/ROSSimulationManager.cpp	/^void ROSSimulationManager::FLSScanReady(FLS* fls)$/;"	f	class:sf::ROSSimulationManager
FLSService	stonefish_ros/include/stonefish_ros/ROSSimulationManager.h	/^	class FLSService$/;"	c	namespace:sf
FLSService	stonefish_ros/src/ROSSimulationManager.cpp	/^FLSService::FLSService(FLS* fls) : fls(fls)$/;"	f	class:sf::FLSService
FMT	cola2_core/cola2_comms/src/comms_node.cpp	/^const auto FMT =$/;"	m	namespace:__anon8	file:
F_ERROR_BASE	cola2_lib/include/cola2_lib/wmmc/GeomagnetismHeader.h	42;"	d
Fdot	cola2_lib/include/cola2_lib/wmmc/GeomagnetismHeader.h	/^    double Fdot; \/*11. Yearly rate of change in Magnetic field strength*\/$/;"	m	struct:__anon21
Feedback	cola2_core/cola2_control/include/cola2_control/controllers/types.h	/^  Feedback()$/;"	f	class:control::Feedback
Feedback	cola2_core/cola2_control/include/cola2_control/controllers/types.h	/^class Feedback$/;"	c	namespace:control
FormatMode	cola2_core/cola2_comms/include/cppystruct/format.h	/^struct FormatMode$/;"	s	namespace:pystruct
FormatType	cola2_core/cola2_comms/include/cppystruct/format.h	/^struct FormatType$/;"	s	namespace:pystruct
GEOMAGHEADER_H	cola2_lib/include/cola2_lib/wmmc/GeomagnetismHeader.h	27;"	d
GEOMAGREFRAD	cola2_lib/include/cola2_lib/wmmc/GeomagnetismHeader.h	/^    GEOMAGREFRAD,$/;"	e	enum:PARAMS
GNM	cola2_lib/include/cola2_lib/wmmc/GeomagnetismHeader.h	/^    GNM,$/;"	e	enum:COEFFICIENTS
GOTO_MANEUVER	cola2_lib/include/cola2_lib/mission/mission_maneuver.h	/^  static const unsigned int GOTO_MANEUVER = 0;     \/\/!< Goto maneuver type.$/;"	m	class:MissionManeuver
GOTO_MANEUVER	cola2_lib/python/cola2/mission/mission_types.py	/^GOTO_MANEUVER = 0  # Goto maneuver type.$/;"	v
GPS_SURFACE_TIME	cola2_core/cola2_safety/include/cola2_safety/safety_rules/navigator.h	/^  static constexpr double GPS_SURFACE_TIME = 60.0;$/;"	m	class:SafetyRules::Navigator
GV	cola2_lib/include/cola2_lib/wmmc/GeomagnetismHeader.h	/^    double GV; \/*8. The Grid Variation*\/$/;"	m	struct:__anon21
GVdot	cola2_lib/include/cola2_lib/wmmc/GeomagnetismHeader.h	/^    double GVdot; \/*16. Yearly rate of change in grid variation*\/$/;"	m	struct:__anon21
GenerateCameraMsgPrototypes	stonefish_ros/src/ROSInterface.cpp	/^std::pair<sensor_msgs::ImagePtr, sensor_msgs::CameraInfoPtr> ROSInterface::GenerateCameraMsgPrototypes(Camera* cam, bool depth)$/;"	f	class:sf::ROSInterface
GenerateFLSMsgPrototypes	stonefish_ros/src/ROSInterface.cpp	/^std::pair<sensor_msgs::ImagePtr, sensor_msgs::ImagePtr> ROSInterface::GenerateFLSMsgPrototypes(FLS* fls)$/;"	f	class:sf::ROSInterface
GenerateMSISMsgPrototypes	stonefish_ros/src/ROSInterface.cpp	/^std::pair<sensor_msgs::ImagePtr, sensor_msgs::ImagePtr> ROSInterface::GenerateMSISMsgPrototypes(MSIS* msis)$/;"	f	class:sf::ROSInterface
GenerateSSSMsgPrototypes	stonefish_ros/src/ROSInterface.cpp	/^std::pair<sensor_msgs::ImagePtr, sensor_msgs::ImagePtr> ROSInterface::GenerateSSSMsgPrototypes(SSS* sss)$/;"	f	class:sf::ROSInterface
GeoidHeightBuffer	cola2_lib/include/cola2_lib/wmmc/GeomagnetismHeader.h	/^    float *GeoidHeightBuffer;$/;"	m	struct:__anon22
Geoid_Initialized	cola2_lib/include/cola2_lib/wmmc/GeomagnetismHeader.h	/^    int Geoid_Initialized; \/* indicates successful initialization *\/$/;"	m	struct:__anon22
Goto	cola2_core/cola2_control/src/captain_node.cpp	/^    Goto,$/;"	m	class:Captain::CaptainStates	file:
GradLambda	cola2_lib/include/cola2_lib/wmmc/GeomagnetismHeader.h	/^    MAGtype_GeoMagneticElements GradLambda; \/* lambda *\/$/;"	m	struct:__anon23
GradPhi	cola2_lib/include/cola2_lib/wmmc/GeomagnetismHeader.h	/^    MAGtype_GeoMagneticElements GradPhi; \/* phi *\/$/;"	m	struct:__anon23
GradZ	cola2_lib/include/cola2_lib/wmmc/GeomagnetismHeader.h	/^    MAGtype_GeoMagneticElements GradZ;$/;"	m	struct:__anon23
H	cola2_lib/include/cola2_lib/wmmc/GeomagnetismHeader.h	/^    double H; \/*4. Horizontal Magnetic Field Strength*\/$/;"	m	struct:__anon21
HEAVE_MODE_ALTITUDE	cola2_lib/python/cola2/mission/mission_types.py	/^HEAVE_MODE_ALTITUDE = 1  # Control the vehicle in altitude.$/;"	v
HEAVE_MODE_BOTH	cola2_lib/python/cola2/mission/mission_types.py	/^HEAVE_MODE_BOTH = 2  # Controls the vehicle in altitude if available. Otherwise, it controls the vehicle in depth.$/;"	v
HEAVE_MODE_DEPTH	cola2_lib/python/cola2/mission/mission_types.py	/^HEAVE_MODE_DEPTH = 0  # Control the vehile in depth.$/;"	v
HIGH_TEMPERATURE	cola2_core/cola2_safety/include/cola2_safety/safety_rules/common.h	/^const std::size_t HIGH_TEMPERATURE = 8;$/;"	m	namespace:SafetyRules::StatusCodeBits
HNM	cola2_lib/include/cola2_lib/wmmc/GeomagnetismHeader.h	/^    HNM,$/;"	e	enum:COEFFICIENTS
HOLONOMIC_KEEP_POSITION	cola2_core/cola2_control/include/cola2_control/controllers/types.h	/^  static const std::uint64_t HOLONOMIC_KEEP_POSITION = 2;$/;"	m	class:control::Request
HOR_INTENSITY	cola2_lib/include/cola2_lib/wmmc/GeomagnetismHeader.h	/^    HOR_INTENSITY,$/;"	e	enum:__anon12
Hdot	cola2_lib/include/cola2_lib/wmmc/GeomagnetismHeader.h	/^    double Hdot; \/*12. Yearly rate of change in horizontal field strength*\/$/;"	m	struct:__anon21
HeaveMode	cola2_lib/include/cola2_lib/mission/mission_goto.h	/^  enum class HeaveMode$/;"	c	class:MissionGoto
HeaveMode	cola2_lib/include/cola2_lib/mission/mission_park.h	/^  enum class HeaveMode$/;"	c	class:MissionPark
HeaveMode	cola2_lib/include/cola2_lib/mission/mission_section.h	/^  enum class HeaveMode$/;"	c	class:MissionSection
HeightAboveEllipsoid	cola2_lib/include/cola2_lib/wmmc/GeomagnetismHeader.h	/^    double HeightAboveEllipsoid; \/* height above the ellipsoid (HaE) *\/$/;"	m	struct:__anon15
HeightAboveGeoid	cola2_lib/include/cola2_lib/wmmc/GeomagnetismHeader.h	/^    double HeightAboveGeoid; \/* (height above the EGM96 geoid model ) *\/$/;"	m	struct:__anon15
HemiSphere	cola2_lib/include/cola2_lib/wmmc/GeomagnetismHeader.h	/^    char HemiSphere;$/;"	m	struct:__anon25
HolonomicKeepPositionController	cola2_core/cola2_control/include/cola2_control/controllers/holonomic_keep_position.h	/^class HolonomicKeepPositionController$/;"	c
HolonomicKeepPositionController	cola2_core/cola2_control/src/cola2_control/controllers/holonomic_keep_position.cpp	/^HolonomicKeepPositionController::HolonomicKeepPositionController(HolonomicKeepPositionControllerConfig config) : config_(config)$/;"	f	class:HolonomicKeepPositionController
HolonomicKeepPositionControllerConfig	cola2_core/cola2_control/include/cola2_control/controllers/holonomic_keep_position.h	/^} HolonomicKeepPositionControllerConfig;$/;"	t	typeref:struct:__anon7
IAUVController	cola2_core/cola2_control/include/cola2_control/low_level_controllers/auv_controller_base.h	/^class IAUVController$/;"	c
IAUVController	cola2_core/cola2_control/src/cola2_control/low_level_controllers/auv_controller_base.cpp	/^IAUVController::IAUVController(double period, int n_dof, int n_thrusters, int n_fins)$/;"	f	class:IAUVController
IAUVROSController	cola2_core/cola2_control/include/cola2_control/ros_controller/auv_ros_controller_base.h	/^class IAUVROSController$/;"	c
IAUVROSController	cola2_core/cola2_control/src/cola2_control/ros_controller/auv_ros_controller.cpp	/^IAUVROSController::IAUVROSController(const std::string name, const std::string frame_id)$/;"	f	class:IAUVROSController
IController	cola2_core/cola2_control/include/cola2_control/low_level_controllers/controller_base.h	/^class IController$/;"	c
IController	cola2_core/cola2_control/src/cola2_control/low_level_controllers/controller_base.cpp	/^IController::IController(std::string name) : name_(name)$/;"	f	class:IController
IE	cola2_lib/include/cola2_lib/wmmc/GeomagnetismHeader.h	/^    IE,$/;"	e	enum:COEFFICIENTS
IGRF_ERROR_MULTIPLIER	cola2_lib/include/cola2_lib/wmmc/GeomagnetismHeader.h	45;"	d
IM_	cola2_core/cola2_sim/src/dynamics_node.cpp	/^  Eigen::Matrix6d M_, IM_;$/;"	m	class:Dynamics	file:
INCLINATION	cola2_lib/include/cola2_lib/wmmc/GeomagnetismHeader.h	/^    INCLINATION,$/;"	e	enum:__anon12
INCL_ERROR_BASE	cola2_lib/include/cola2_lib/wmmc/GeomagnetismHeader.h	40;"	d
INFORMATIVE	cola2_core/cola2_safety/include/cola2_safety/safety_rules/common.h	/^  static const std::size_t INFORMATIVE = 1;$/;"	m	struct:SafetyRules::SafetyLevel
INIT_TIME	cola2_core/cola2_safety/include/cola2_safety/safety_rules/common.h	/^  static constexpr double INIT_TIME = 20.0;$/;"	m	class:SafetyRules::SafetyRuleBaseClass
INIT_TIME_NO_WARNINGS	cola2_core/cola2_nav/include/cola2_nav/ekf_base_ros.h	/^constexpr double INIT_TIME_NO_WARNINGS = 20.0;  \/\/!< seconds before warnings are displayed (info messages before)$/;"	m	namespace:__anon1
INTSECVARDEG	cola2_lib/include/cola2_lib/wmmc/GeomagnetismHeader.h	/^    INTSECVARDEG,$/;"	e	enum:PARAMS
INTSTATICDEG	cola2_lib/include/cola2_lib/wmmc/GeomagnetismHeader.h	/^    INTSTATICDEG,$/;"	e	enum:PARAMS
IOBase	cola2_lib/include/cola2_lib/io/io_base.h	/^class IOBase$/;"	c	namespace:cola2::io
IOBase	cola2_lib/src/cola2_lib/io/io_base.cpp	/^IOBase::IOBase()$/;"	f	class:cola2::io::IOBase
Idle	cola2_core/cola2_control/src/captain_node.cpp	/^    Idle,$/;"	m	class:Captain::CaptainStates	file:
Incl	cola2_lib/include/cola2_lib/wmmc/GeomagnetismHeader.h	/^    double Incl; \/*2. Angle between the magnetic field vector and the horizontal plane, positive down*\/$/;"	m	struct:__anon21
Incldot	cola2_lib/include/cola2_lib/wmmc/GeomagnetismHeader.h	/^    double Incldot; \/*10. Yearly Rate of change in inclination*\/$/;"	m	struct:__anon21
JetVFCallback	stonefish_ros/include/stonefish_ros/ROSSimulationManager.h	/^	class JetVFCallback$/;"	c	namespace:sf
JetVFCallback	stonefish_ros/src/ROSSimulationManager.cpp	/^JetVFCallback::JetVFCallback(Jet* vf) : vf(vf)$/;"	f	class:sf::JetVFCallback
JoystickBase	cola2_core/cola2_control/src/cola2_control/joystickbase.py	/^class JoystickBase(object):$/;"	c
KEY_A	cola2_core/cola2_control/src/keyboard_to_teleoperation_node.py	/^    KEY_A = 3$/;"	v	class:KeyboardToTeleoperation
KEY_D	cola2_core/cola2_control/src/keyboard_to_teleoperation_node.py	/^    KEY_D = 4$/;"	v	class:KeyboardToTeleoperation
KEY_DOWN	cola2_core/cola2_control/src/keyboard_to_teleoperation_node.py	/^    KEY_DOWN = 6$/;"	v	class:KeyboardToTeleoperation
KEY_LEFT	cola2_core/cola2_control/src/keyboard_to_teleoperation_node.py	/^    KEY_LEFT = 8$/;"	v	class:KeyboardToTeleoperation
KEY_M	cola2_core/cola2_control/src/keyboard_to_teleoperation_node.py	/^    KEY_M = 17$/;"	v	class:KeyboardToTeleoperation
KEY_N	cola2_core/cola2_control/src/keyboard_to_teleoperation_node.py	/^    KEY_N = 18$/;"	v	class:KeyboardToTeleoperation
KEY_RIGHT	cola2_core/cola2_control/src/keyboard_to_teleoperation_node.py	/^    KEY_RIGHT = 7$/;"	v	class:KeyboardToTeleoperation
KEY_S	cola2_core/cola2_control/src/keyboard_to_teleoperation_node.py	/^    KEY_S = 2$/;"	v	class:KeyboardToTeleoperation
KEY_SPACE	cola2_core/cola2_control/src/keyboard_to_teleoperation_node.py	/^    KEY_SPACE = 0$/;"	v	class:KeyboardToTeleoperation
KEY_UP	cola2_core/cola2_control/src/keyboard_to_teleoperation_node.py	/^    KEY_UP = 5$/;"	v	class:KeyboardToTeleoperation
KEY_W	cola2_core/cola2_control/src/keyboard_to_teleoperation_node.py	/^    KEY_W = 1$/;"	v	class:KeyboardToTeleoperation
KeepPosition	cola2_core/cola2_control/src/captain_node.cpp	/^    KeepPosition,$/;"	m	class:Captain::CaptainStates	file:
Keyboard	cola2_core/cola2_control/src/keyboard_node.cpp	/^  Keyboard()$/;"	f	class:Keyboard
Keyboard	cola2_core/cola2_control/src/keyboard_node.cpp	/^class Keyboard$/;"	c	file:
KeyboardToTeleoperation	cola2_core/cola2_control/src/keyboard_to_teleoperation_node.py	/^class KeyboardToTeleoperation(JoystickBase):$/;"	c
LAT_BOUND_MAX	cola2_lib/include/cola2_lib/wmmc/GeomagnetismHeader.h	87;"	d
LAT_BOUND_MIN	cola2_lib/include/cola2_lib/wmmc/GeomagnetismHeader.h	86;"	d
LEFT_JOY_HORIZONTAL	cola2_core/cola2_control/src/logitech_fx10_to_teleoperation_node.py	/^    LEFT_JOY_HORIZONTAL = 0  # LEFT+, RIGHT-$/;"	v	class:LogitechFX10
LEFT_JOY_VERTICAL	cola2_core/cola2_control/src/logitech_fx10_to_teleoperation_node.py	/^    LEFT_JOY_VERTICAL = 1  # UP+, DOWN-$/;"	v	class:LogitechFX10
LEFT_TRIGGER	cola2_core/cola2_control/src/logitech_fx10_to_teleoperation_node.py	/^    LEFT_TRIGGER = 2  # NOT PRESS 1, PRESS -1$/;"	v	class:LogitechFX10
LON_BOUND_MAX	cola2_lib/include/cola2_lib/wmmc/GeomagnetismHeader.h	89;"	d
LON_BOUND_MIN	cola2_lib/include/cola2_lib/wmmc/GeomagnetismHeader.h	88;"	d
LOOKUP_ALTITUDE	cola2_lib/include/cola2_lib/comms/altitude.h	/^  const double LOOKUP_ALTITUDE[ALTITUDE_LOOKUP_SIZE] = {$/;"	v
LOOKUP_ELAPSED_TIME	cola2_lib/include/cola2_lib/comms/elapsed_time.h	/^  const int32_t LOOKUP_ELAPSED_TIME[ELAPSED_TIME_LOOKUP_SIZE] = {$/;"	v
LOW_BATTERY_ERROR	cola2_core/cola2_safety/include/cola2_safety/safety_rules/common.h	/^const std::size_t LOW_BATTERY_ERROR = 13;$/;"	m	namespace:SafetyRules::StatusCodeBits
LOW_BATTERY_WARNING	cola2_core/cola2_safety/include/cola2_safety/safety_rules/common.h	/^const std::size_t LOW_BATTERY_WARNING = 14;$/;"	m	namespace:SafetyRules::StatusCodeBits
LOW_CHARGE_FACTOR	cola2_core/cola2_safety/include/cola2_safety/safety_rules/battery_level.h	/^  static constexpr double LOW_CHARGE_FACTOR = 1.5;$/;"	m	class:SafetyRules::BatteryLevel
LOW_VOLTAGE_OFFSET	cola2_core/cola2_safety/include/cola2_safety/safety_rules/battery_level.h	/^  static constexpr double LOW_VOLTAGE_OFFSET = 1.0;$/;"	m	class:SafetyRules::BatteryLevel
Latitude	cola2_lib/include/cola2_lib/wmmc/GeomagnetismHeader.h	/^    char Latitude[40];$/;"	m	struct:__anon24
LogBag	cola2_core/cola2_log/src/bag_recorder_node.py	/^class LogBag:$/;"	c
LogitechFX10	cola2_core/cola2_control/src/logitech_fx10_to_teleoperation_node.py	/^class LogitechFX10(JoystickBase):$/;"	c
Longitude	cola2_lib/include/cola2_lib/wmmc/GeomagnetismHeader.h	/^    char Longitude[40];$/;"	m	struct:__anon24
M	cola2_lib/include/cola2_lib/wmmc/GeomagnetismHeader.h	/^    M,$/;"	e	enum:COEFFICIENTS
MAGNETIC_DECLINATION_BAD_ALLOCATION	cola2_lib/include/cola2_lib/wmmc/magnetic_declination.h	/^  MAGNETIC_DECLINATION_BAD_ALLOCATION = -4,$/;"	e	enum:__anon11
MAGNETIC_DECLINATION_COF_DATA_NOT_FOUND	cola2_lib/include/cola2_lib/wmmc/magnetic_declination.h	/^  MAGNETIC_DECLINATION_COF_DATA_NOT_FOUND = -3,$/;"	e	enum:__anon11
MAGNETIC_DECLINATION_INVALID_DATE	cola2_lib/include/cola2_lib/wmmc/magnetic_declination.h	/^  MAGNETIC_DECLINATION_INVALID_DATE = -5,$/;"	e	enum:__anon11
MAGNETIC_DECLINATION_INVALID_YEAR	cola2_lib/include/cola2_lib/wmmc/magnetic_declination.h	/^  MAGNETIC_DECLINATION_INVALID_YEAR = -6$/;"	e	enum:__anon11
MAGNETIC_DECLINATION_LATITUDE_OUT_OF_RANGE	cola2_lib/include/cola2_lib/wmmc/magnetic_declination.h	/^  MAGNETIC_DECLINATION_LATITUDE_OUT_OF_RANGE = -1,$/;"	e	enum:__anon11
MAGNETIC_DECLINATION_LONGITUDE_OUT_OF_RANGE	cola2_lib/include/cola2_lib/wmmc/magnetic_declination.h	/^  MAGNETIC_DECLINATION_LONGITUDE_OUT_OF_RANGE = -2,$/;"	e	enum:__anon11
MAGNETIC_DECLINATION_OK	cola2_lib/include/cola2_lib/wmmc/magnetic_declination.h	/^  MAGNETIC_DECLINATION_OK = 0,$/;"	e	enum:__anon11
MAG_AllocateLegendreFunctionMemory	cola2_lib/src/cola2_lib/wmmc/GeomagnetismLibrary.c	/^MAGtype_LegendreFunction *MAG_AllocateLegendreFunctionMemory(int NumTerms)$/;"	f
MAG_AllocateModelMemory	cola2_lib/src/cola2_lib/wmmc/GeomagnetismLibrary.c	/^MAGtype_MagneticModel *MAG_AllocateModelMemory(int NumTerms)$/;"	f
MAG_AllocateSphVarMemory	cola2_lib/src/cola2_lib/wmmc/GeomagnetismLibrary.c	/^MAGtype_SphericalHarmonicVariables* MAG_AllocateSphVarMemory(int nMax)$/;"	f
MAG_AssignHeaderValues	cola2_lib/src/cola2_lib/wmmc/GeomagnetismLibrary.c	/^void MAG_AssignHeaderValues(MAGtype_MagneticModel *model, char values[][MAXLINELENGTH])$/;"	f
MAG_AssignMagneticModelCoeffs	cola2_lib/src/cola2_lib/wmmc/GeomagnetismLibrary.c	/^void MAG_AssignMagneticModelCoeffs(MAGtype_MagneticModel *Assignee, MAGtype_MagneticModel *Source, int nMax, int nMaxSecVar)$/;"	f
MAG_AssociatedLegendreFunction	cola2_lib/src/cola2_lib/wmmc/GeomagnetismLibrary.c	/^int MAG_AssociatedLegendreFunction(MAGtype_CoordSpherical CoordSpherical, int nMax, MAGtype_LegendreFunction *LegendreFunction)$/;"	f
MAG_BaseErrors	cola2_lib/src/cola2_lib/wmmc/GeomagnetismLibrary.c	/^void MAG_BaseErrors(double DeclCoef, double DeclBaseline, double InclOffset, double FOffset, double Multiplier, double H, double* DeclErr, double* InclErr, double* FErr)$/;"	f
MAG_CalculateGeoMagneticElements	cola2_lib/src/cola2_lib/wmmc/GeomagnetismLibrary.c	/^int MAG_CalculateGeoMagneticElements(MAGtype_MagneticResults *MagneticResultsGeo, MAGtype_GeoMagneticElements *GeoMagneticElements)$/;"	f
MAG_CalculateGradientElements	cola2_lib/src/cola2_lib/wmmc/GeomagnetismLibrary.c	/^void MAG_CalculateGradientElements(MAGtype_MagneticResults GradResults, MAGtype_GeoMagneticElements MagneticElements, MAGtype_GeoMagneticElements *GradElements)$/;"	f
MAG_CalculateGridVariation	cola2_lib/src/cola2_lib/wmmc/GeomagnetismLibrary.c	/^int MAG_CalculateGridVariation(MAGtype_CoordGeodetic location, MAGtype_GeoMagneticElements *elements)$/;"	f
MAG_CalculateSecularVariationElements	cola2_lib/src/cola2_lib/wmmc/GeomagnetismLibrary.c	/^int MAG_CalculateSecularVariationElements(MAGtype_MagneticResults MagneticVariation, MAGtype_GeoMagneticElements *MagneticElements)$/;"	f
MAG_CartesianToGeodetic	cola2_lib/src/cola2_lib/wmmc/GeomagnetismLibrary.c	/^void MAG_CartesianToGeodetic(MAGtype_Ellipsoid Ellip, double x, double y, double z, MAGtype_CoordGeodetic *CoordGeodetic)$/;"	f
MAG_CheckGeographicPole	cola2_lib/src/cola2_lib/wmmc/GeomagnetismLibrary.c	/^int MAG_CheckGeographicPole(MAGtype_CoordGeodetic *CoordGeodetic)$/;"	f
MAG_ComputeSphericalHarmonicVariables	cola2_lib/src/cola2_lib/wmmc/GeomagnetismLibrary.c	/^int MAG_ComputeSphericalHarmonicVariables(MAGtype_Ellipsoid Ellip, MAGtype_CoordSpherical CoordSpherical, int nMax, MAGtype_SphericalHarmonicVariables *SphVariables)$/;"	f
MAG_ConvertGeoidToEllipsoidHeight	cola2_lib/src/cola2_lib/wmmc/GeomagnetismLibrary.c	/^int MAG_ConvertGeoidToEllipsoidHeight(MAGtype_CoordGeodetic *CoordGeodetic, MAGtype_Geoid *Geoid)$/;"	f
MAG_CoordGeodeticAssign	cola2_lib/src/cola2_lib/wmmc/GeomagnetismLibrary.c	/^MAGtype_CoordGeodetic MAG_CoordGeodeticAssign(MAGtype_CoordGeodetic CoordGeodetic)$/;"	f
MAG_DMSstringToDegree	cola2_lib/src/cola2_lib/wmmc/GeomagnetismLibrary.c	/^void MAG_DMSstringToDegree(char *DMSstring, double *DegreesOfArc)$/;"	f
MAG_DateToYear	cola2_lib/src/cola2_lib/wmmc/GeomagnetismLibrary.c	/^int MAG_DateToYear(MAGtype_Date *CalendarDate, char *Error)$/;"	f
MAG_DegreeToDMSstring	cola2_lib/src/cola2_lib/wmmc/GeomagnetismLibrary.c	/^void MAG_DegreeToDMSstring(double DegreesOfArc, int UnitDepth, char *DMSstring)$/;"	f
MAG_EquivalentLatLon	cola2_lib/src/cola2_lib/wmmc/GeomagnetismLibrary.c	/^void MAG_EquivalentLatLon(double lat, double lon, double *repairedLat, double  *repairedLon)$/;"	f
MAG_Error	cola2_lib/src/cola2_lib/wmmc/GeomagnetismLibrary.c	/^void MAG_Error(int control)$/;"	f
MAG_ErrorCalc	cola2_lib/src/cola2_lib/wmmc/GeomagnetismLibrary.c	/^void MAG_ErrorCalc(MAGtype_GeoMagneticElements B, MAGtype_GeoMagneticElements* Errors)$/;"	f
MAG_FreeLegendreMemory	cola2_lib/src/cola2_lib/wmmc/GeomagnetismLibrary.c	/^int MAG_FreeLegendreMemory(MAGtype_LegendreFunction *LegendreFunction)$/;"	f
MAG_FreeMagneticModelMemory	cola2_lib/src/cola2_lib/wmmc/GeomagnetismLibrary.c	/^int MAG_FreeMagneticModelMemory(MAGtype_MagneticModel *MagneticModel)$/;"	f
MAG_FreeMemory	cola2_lib/src/cola2_lib/wmmc/GeomagnetismLibrary.c	/^int MAG_FreeMemory(MAGtype_MagneticModel *MagneticModel, MAGtype_MagneticModel *TimedMagneticModel, MAGtype_LegendreFunction *LegendreFunction)$/;"	f
MAG_FreeSphVarMemory	cola2_lib/src/cola2_lib/wmmc/GeomagnetismLibrary.c	/^int MAG_FreeSphVarMemory(MAGtype_SphericalHarmonicVariables *SphVar)$/;"	f
MAG_GEO_POLE_TOLERANCE	cola2_lib/include/cola2_lib/wmmc/GeomagnetismHeader.h	83;"	d
MAG_GeoMagneticElementsAssign	cola2_lib/src/cola2_lib/wmmc/GeomagnetismLibrary.c	/^MAGtype_GeoMagneticElements MAG_GeoMagneticElementsAssign(MAGtype_GeoMagneticElements Elements)$/;"	f
MAG_GeoMagneticElementsScale	cola2_lib/src/cola2_lib/wmmc/GeomagnetismLibrary.c	/^MAGtype_GeoMagneticElements MAG_GeoMagneticElementsScale(MAGtype_GeoMagneticElements Elements, double factor)$/;"	f
MAG_GeoMagneticElementsSubtract	cola2_lib/src/cola2_lib/wmmc/GeomagnetismLibrary.c	/^MAGtype_GeoMagneticElements MAG_GeoMagneticElementsSubtract(MAGtype_GeoMagneticElements minuend, MAGtype_GeoMagneticElements subtrahend)$/;"	f
MAG_GeodeticToSpherical	cola2_lib/src/cola2_lib/wmmc/GeomagnetismLibrary.c	/^int MAG_GeodeticToSpherical(MAGtype_Ellipsoid Ellip, MAGtype_CoordGeodetic CoordGeodetic, MAGtype_CoordSpherical *CoordSpherical)$/;"	f
MAG_Geomag	cola2_lib/src/cola2_lib/wmmc/GeomagnetismLibrary.c	/^int MAG_Geomag(MAGtype_Ellipsoid Ellip, MAGtype_CoordSpherical CoordSpherical, MAGtype_CoordGeodetic CoordGeodetic,$/;"	f
MAG_GetAltitude	cola2_lib/src/cola2_lib/wmmc/GeomagnetismLibrary.c	/^int MAG_GetAltitude(char* Query_String, MAGtype_Geoid *Geoid, MAGtype_CoordGeodetic* coords, int bounds[2], int AltitudeSetting){$/;"	f
MAG_GetDeg	cola2_lib/src/cola2_lib/wmmc/GeomagnetismLibrary.c	/^void MAG_GetDeg(char* Query_String, double* latitude, double bounds[2]) {$/;"	f
MAG_GetGeoidHeight	cola2_lib/src/cola2_lib/wmmc/GeomagnetismLibrary.c	/^int MAG_GetGeoidHeight(double Latitude,$/;"	f
MAG_GetTransverseMercator	cola2_lib/src/cola2_lib/wmmc/GeomagnetismLibrary.c	/^int MAG_GetTransverseMercator(MAGtype_CoordGeodetic CoordGeodetic, MAGtype_UTMParameters *UTMParameters)$/;"	f
MAG_GetUTMParameters	cola2_lib/src/cola2_lib/wmmc/GeomagnetismLibrary.c	/^int MAG_GetUTMParameters(double Latitude,$/;"	f
MAG_GetUserGrid	cola2_lib/src/cola2_lib/wmmc/GeomagnetismLibrary.c	/^int MAG_GetUserGrid(MAGtype_CoordGeodetic *minimum, MAGtype_CoordGeodetic *maximum, double *step_size, double *a_step_size, double *step_time, MAGtype_Date$/;"	f
MAG_GetUserInput	cola2_lib/src/cola2_lib/wmmc/GeomagnetismLibrary.c	/^int MAG_GetUserInput(MAGtype_MagneticModel *MagneticModel, MAGtype_Geoid *Geoid, MAGtype_CoordGeodetic *CoordGeodetic, MAGtype_Date *MagneticDate)$/;"	f
MAG_GradY	cola2_lib/src/cola2_lib/wmmc/GeomagnetismLibrary.c	/^void MAG_GradY(MAGtype_Ellipsoid Ellip, MAGtype_CoordSpherical CoordSpherical, MAGtype_CoordGeodetic CoordGeodetic,$/;"	f
MAG_GradYSummation	cola2_lib/src/cola2_lib/wmmc/GeomagnetismLibrary.c	/^void MAG_GradYSummation(MAGtype_LegendreFunction *LegendreFunction, MAGtype_MagneticModel *MagneticModel, MAGtype_SphericalHarmonicVariables SphVariables, MAGtype_CoordSpherical CoordSpherical, MAGtype_MagneticResults *GradY)$/;"	f
MAG_Gradient	cola2_lib/src/cola2_lib/wmmc/GeomagnetismLibrary.c	/^void MAG_Gradient(MAGtype_Ellipsoid Ellip, MAGtype_CoordGeodetic CoordGeodetic, MAGtype_MagneticModel *TimedMagneticModel, MAGtype_Gradient *Gradient)$/;"	f
MAG_PS_MAX_LAT_DEGREE	cola2_lib/include/cola2_lib/wmmc/GeomagnetismHeader.h	79;"	d
MAG_PS_MIN_LAT_DEGREE	cola2_lib/include/cola2_lib/wmmc/GeomagnetismHeader.h	78;"	d
MAG_PcupHigh	cola2_lib/src/cola2_lib/wmmc/GeomagnetismLibrary.c	/^int MAG_PcupHigh(double *Pcup, double *dPcup, double x, int nMax)$/;"	f
MAG_PcupLow	cola2_lib/src/cola2_lib/wmmc/GeomagnetismLibrary.c	/^int MAG_PcupLow(double *Pcup, double *dPcup, double x, int nMax)$/;"	f
MAG_PrintEMMFormat	cola2_lib/src/cola2_lib/wmmc/GeomagnetismLibrary.c	/^void MAG_PrintEMMFormat(char *filename, char *filenameSV, MAGtype_MagneticModel *MagneticModel)$/;"	f
MAG_PrintGradient	cola2_lib/src/cola2_lib/wmmc/GeomagnetismLibrary.c	/^void MAG_PrintGradient(MAGtype_Gradient Gradient)$/;"	f
MAG_PrintSHDFFormat	cola2_lib/src/cola2_lib/wmmc/GeomagnetismLibrary.c	/^void MAG_PrintSHDFFormat(char *filename, MAGtype_MagneticModel *(*MagneticModel)[], int epochs)$/;"	f
MAG_PrintUserData	cola2_lib/src/cola2_lib/wmmc/GeomagnetismLibrary.c	/^void MAG_PrintUserData(MAGtype_GeoMagneticElements GeomagElements, MAGtype_CoordGeodetic SpaceInput, MAGtype_Date TimeInput, MAGtype_MagneticModel *MagneticModel, MAGtype_Geoid *Geoid)$/;"	f
MAG_PrintUserDataWithUncertainty	cola2_lib/src/cola2_lib/wmmc/GeomagnetismLibrary.c	/^void MAG_PrintUserDataWithUncertainty(MAGtype_GeoMagneticElements GeomagElements,$/;"	f
MAG_PrintWMMFormat	cola2_lib/src/cola2_lib/wmmc/GeomagnetismLibrary.c	/^void MAG_PrintWMMFormat(char *filename, MAGtype_MagneticModel *MagneticModel)$/;"	f
MAG_RotateMagneticVector	cola2_lib/src/cola2_lib/wmmc/GeomagnetismLibrary.c	/^int MAG_RotateMagneticVector(MAGtype_CoordSpherical CoordSpherical, MAGtype_CoordGeodetic CoordGeodetic, MAGtype_MagneticResults MagneticResultsSph, MAGtype_MagneticResults *MagneticResultsGeo)$/;"	f
MAG_SecVarSummation	cola2_lib/src/cola2_lib/wmmc/GeomagnetismLibrary.c	/^int MAG_SecVarSummation(MAGtype_LegendreFunction *LegendreFunction, MAGtype_MagneticModel *MagneticModel, MAGtype_SphericalHarmonicVariables SphVariables, MAGtype_CoordSpherical CoordSpherical, MAGtype_MagneticResults *MagneticResults)$/;"	f
MAG_SecVarSummationSpecial	cola2_lib/src/cola2_lib/wmmc/GeomagnetismLibrary.c	/^int MAG_SecVarSummationSpecial(MAGtype_MagneticModel *MagneticModel, MAGtype_SphericalHarmonicVariables SphVariables, MAGtype_CoordSpherical CoordSpherical, MAGtype_MagneticResults *MagneticResults)$/;"	f
MAG_SetDefaults	cola2_lib/src/cola2_lib/wmmc/GeomagnetismLibrary.c	/^int MAG_SetDefaults(MAGtype_Ellipsoid *Ellip, MAGtype_Geoid *Geoid)$/;"	f
MAG_SphericalToCartesian	cola2_lib/src/cola2_lib/wmmc/GeomagnetismLibrary.c	/^void MAG_SphericalToCartesian(MAGtype_CoordSpherical CoordSpherical, double *x, double *y, double *z)$/;"	f
MAG_SphericalToGeodetic	cola2_lib/src/cola2_lib/wmmc/GeomagnetismLibrary.c	/^void MAG_SphericalToGeodetic(MAGtype_Ellipsoid Ellip, MAGtype_CoordSpherical CoordSpherical, MAGtype_CoordGeodetic *CoordGeodetic)$/;"	f
MAG_Summation	cola2_lib/src/cola2_lib/wmmc/GeomagnetismLibrary.c	/^int MAG_Summation(MAGtype_LegendreFunction *LegendreFunction, MAGtype_MagneticModel *MagneticModel, MAGtype_SphericalHarmonicVariables SphVariables, MAGtype_CoordSpherical CoordSpherical, MAGtype_MagneticResults *MagneticResults)$/;"	f
MAG_SummationSpecial	cola2_lib/src/cola2_lib/wmmc/GeomagnetismLibrary.c	/^int MAG_SummationSpecial(MAGtype_MagneticModel *MagneticModel, MAGtype_SphericalHarmonicVariables SphVariables, MAGtype_CoordSpherical CoordSpherical, MAGtype_MagneticResults *MagneticResults)$/;"	f
MAG_TMfwd4	cola2_lib/src/cola2_lib/wmmc/GeomagnetismLibrary.c	/^void MAG_TMfwd4(double Eps, double Epssq, double K0R4, double K0R4oa,$/;"	f
MAG_TimelyModifyMagneticModel	cola2_lib/src/cola2_lib/wmmc/GeomagnetismLibrary.c	/^int MAG_TimelyModifyMagneticModel(MAGtype_Date UserDate, MAGtype_MagneticModel *MagneticModel, MAGtype_MagneticModel *TimedMagneticModel)$/;"	f
MAG_Trim	cola2_lib/src/cola2_lib/wmmc/GeomagnetismLibrary.c	/^char *MAG_Trim(char *str)$/;"	f
MAG_USE_GEOID	cola2_lib/include/cola2_lib/wmmc/GeomagnetismHeader.h	84;"	d
MAG_UTM_MAX_LAT_DEGREE	cola2_lib/include/cola2_lib/wmmc/GeomagnetismHeader.h	81;"	d
MAG_UTM_MIN_LAT_DEGREE	cola2_lib/include/cola2_lib/wmmc/GeomagnetismHeader.h	80;"	d
MAG_ValidateDMSstring	cola2_lib/src/cola2_lib/wmmc/GeomagnetismLibrary.c	/^int MAG_ValidateDMSstring(char *input, int min, int max, char *Error)$/;"	f
MAG_WMMErrorCalc	cola2_lib/src/cola2_lib/wmmc/GeomagnetismLibrary.c	/^void MAG_WMMErrorCalc(double H, MAGtype_GeoMagneticElements *Uncertainty)$/;"	f
MAG_Warnings	cola2_lib/src/cola2_lib/wmmc/GeomagnetismLibrary.c	/^int MAG_Warnings(int control, double value, MAGtype_MagneticModel *MagneticModel)$/;"	f
MAG_YearToDate	cola2_lib/src/cola2_lib/wmmc/GeomagnetismLibrary.c	/^int MAG_YearToDate(MAGtype_Date *CalendarDate)$/;"	f
MAG_isNaN	cola2_lib/src/cola2_lib/wmmc/GeomagnetismLibrary.c	/^int MAG_isNaN(double d)$/;"	f
MAG_readMagneticModel	cola2_lib/src/cola2_lib/wmmc/GeomagnetismLibrary.c	/^int MAG_readMagneticModel(char *filename, MAGtype_MagneticModel * MagneticModel)$/;"	f
MAG_readMagneticModel_Large	cola2_lib/src/cola2_lib/wmmc/GeomagnetismLibrary.c	/^int MAG_readMagneticModel_Large(char *filename, char *filenameSV, MAGtype_MagneticModel *MagneticModel)$/;"	f
MAG_readMagneticModel_SHDF	cola2_lib/src/cola2_lib/wmmc/GeomagnetismLibrary.c	/^int MAG_readMagneticModel_SHDF(char *filename, MAGtype_MagneticModel *(*magneticmodels)[], int array_size)$/;"	f
MAG_robustReadMagModels	cola2_lib/src/cola2_lib/wmmc/GeomagnetismLibrary.c	/^int MAG_robustReadMagModels(char *filename, MAGtype_MagneticModel *(*magneticmodels)[], int array_size)$/;"	f
MAG_robustReadMagneticModel_Large	cola2_lib/src/cola2_lib/wmmc/GeomagnetismLibrary.c	/^int MAG_robustReadMagneticModel_Large(char *filename, char *filenameSV, MAGtype_MagneticModel **MagneticModel)$/;"	f
MAGenum_Comp	cola2_lib/include/cola2_lib/wmmc/GeomagnetismHeader.h	/^} MAGenum_Comp;$/;"	t	typeref:enum:__anon12
MAGtype_CoordGeodetic	cola2_lib/include/cola2_lib/wmmc/GeomagnetismHeader.h	/^} MAGtype_CoordGeodetic;$/;"	t	typeref:struct:__anon15
MAGtype_CoordGeodeticStr	cola2_lib/include/cola2_lib/wmmc/GeomagnetismHeader.h	/^} MAGtype_CoordGeodeticStr;$/;"	t	typeref:struct:__anon24
MAGtype_CoordSpherical	cola2_lib/include/cola2_lib/wmmc/GeomagnetismHeader.h	/^} MAGtype_CoordSpherical;$/;"	t	typeref:struct:__anon16
MAGtype_Date	cola2_lib/include/cola2_lib/wmmc/GeomagnetismHeader.h	/^} MAGtype_Date;$/;"	t	typeref:struct:__anon17
MAGtype_Ellipsoid	cola2_lib/include/cola2_lib/wmmc/GeomagnetismHeader.h	/^} MAGtype_Ellipsoid;$/;"	t	typeref:struct:__anon14
MAGtype_GeoMagneticElements	cola2_lib/include/cola2_lib/wmmc/GeomagnetismHeader.h	/^} MAGtype_GeoMagneticElements;$/;"	t	typeref:struct:__anon21
MAGtype_Geoid	cola2_lib/include/cola2_lib/wmmc/GeomagnetismHeader.h	/^} MAGtype_Geoid;$/;"	t	typeref:struct:__anon22
MAGtype_Gradient	cola2_lib/include/cola2_lib/wmmc/GeomagnetismHeader.h	/^} MAGtype_Gradient;$/;"	t	typeref:struct:__anon23
MAGtype_LegendreFunction	cola2_lib/include/cola2_lib/wmmc/GeomagnetismHeader.h	/^} MAGtype_LegendreFunction;$/;"	t	typeref:struct:__anon18
MAGtype_MagneticModel	cola2_lib/include/cola2_lib/wmmc/GeomagnetismHeader.h	/^} MAGtype_MagneticModel;$/;"	t	typeref:struct:__anon13
MAGtype_MagneticResults	cola2_lib/include/cola2_lib/wmmc/GeomagnetismHeader.h	/^} MAGtype_MagneticResults;$/;"	t	typeref:struct:__anon19
MAGtype_SphericalHarmonicVariables	cola2_lib/include/cola2_lib/wmmc/GeomagnetismHeader.h	/^} MAGtype_SphericalHarmonicVariables;$/;"	t	typeref:struct:__anon20
MAGtype_UTMParameters	cola2_lib/include/cola2_lib/wmmc/GeomagnetismHeader.h	/^} MAGtype_UTMParameters;$/;"	t	typeref:struct:__anon25
MAXLINELENGTH	cola2_lib/include/cola2_lib/wmmc/GeomagnetismHeader.h	30;"	d
MAX_COVARIANCE	cola2_core/cola2_nav/include/cola2_nav/ekf_base.h	/^constexpr double MAX_COVARIANCE = 0.025;$/;"	m	namespace:__anon2
MAX_HEAVE_VEL	cola2_core/cola2_control/src/open_loop_node.cpp	/^  static constexpr double MAX_HEAVE_VEL = 0.4;$/;"	m	class:OpenLoop	file:
MAX_SURGE_VEL	cola2_core/cola2_control/src/open_loop_node.cpp	/^  static constexpr double MAX_SURGE_VEL = 1.0;$/;"	m	class:OpenLoop	file:
MAX_SWAY_VEL	cola2_core/cola2_control/src/open_loop_node.cpp	/^  static constexpr double MAX_SWAY_VEL = 0.4;$/;"	m	class:OpenLoop	file:
MAX_YAW_RATE	cola2_core/cola2_control/src/open_loop_node.cpp	/^  static constexpr double MAX_YAW_RATE = 0.3;$/;"	m	class:OpenLoop	file:
MISSION_ACTION	cola2_lib/python/cola2/mission/mission_types_v1.py	/^MISSION_ACTION = 2$/;"	v
MISSION_CONFIGURATION	cola2_lib/python/cola2/mission/mission_types_v1.py	/^MISSION_CONFIGURATION = 1$/;"	v
MISSION_MANEUVER	cola2_lib/python/cola2/mission/mission_types_v1.py	/^MISSION_MANEUVER = 0$/;"	v
MODELENDYEAR	cola2_lib/include/cola2_lib/wmmc/GeomagnetismHeader.h	/^    MODELENDYEAR,$/;"	e	enum:PARAMS
MODELNAME	cola2_lib/include/cola2_lib/wmmc/GeomagnetismHeader.h	/^    MODELNAME,$/;"	e	enum:PARAMS
MODELSTARTYEAR	cola2_lib/include/cola2_lib/wmmc/GeomagnetismHeader.h	/^    MODELSTARTYEAR,$/;"	e	enum:PARAMS
MODEL_RELEASE_DATE	cola2_lib/include/cola2_lib/wmmc/GeomagnetismHeader.h	108;"	d
MONTH	cola2_lib/include/cola2_lib/wmmc/GeomagnetismHeader.h	/^    MONTH,$/;"	e	enum:YYYYMMDD
MOVE_DOWN	cola2_core/cola2_control/src/logitech_fx10_to_teleoperation_node.py	/^    MOVE_DOWN = -1$/;"	v	class:LogitechFX10
MOVE_LEFT	cola2_core/cola2_control/src/logitech_fx10_to_teleoperation_node.py	/^    MOVE_LEFT = 1$/;"	v	class:LogitechFX10
MOVE_RIGHT	cola2_core/cola2_control/src/logitech_fx10_to_teleoperation_node.py	/^    MOVE_RIGHT = -1$/;"	v	class:LogitechFX10
MOVE_UP	cola2_core/cola2_control/src/logitech_fx10_to_teleoperation_node.py	/^    MOVE_UP = 1$/;"	v	class:LogitechFX10
MSISScanReady	stonefish_ros/src/ROSSimulationManager.cpp	/^void ROSSimulationManager::MSISScanReady(MSIS* msis)$/;"	f	class:sf::ROSSimulationManager
MSISService	stonefish_ros/include/stonefish_ros/ROSSimulationManager.h	/^	class MSISService$/;"	c	namespace:sf
MSISService	stonefish_ros/src/ROSSimulationManager.cpp	/^MSISService::MSISService(MSIS* msis) : msis(msis)$/;"	f	class:sf::MSISService
MSLON	cola2_lib/include/cola2_lib/wmmc/GeomagnetismHeader.h	95;"	d
M_	cola2_core/cola2_sim/src/dynamics_node.cpp	/^  Eigen::Matrix6d M_, IM_;$/;"	m	class:Dynamics	file:
M_PI	cola2_lib/include/cola2_lib/wmmc/GeomagnetismHeader.h	61;"	d
Main_Field_Coeff_G	cola2_lib/include/cola2_lib/wmmc/GeomagnetismHeader.h	/^    double *Main_Field_Coeff_G; \/* C - Gauss coefficients of main geomagnetic model (nT) Index is (n * (n + 1) \/ 2 + m) *\/$/;"	m	struct:__anon13
Main_Field_Coeff_H	cola2_lib/include/cola2_lib/wmmc/GeomagnetismHeader.h	/^    double *Main_Field_Coeff_H; \/* C - Gauss coefficients of main geomagnetic model (nT) *\/$/;"	m	struct:__anon13
Manual	cola2_core/cola2_safety/include/cola2_safety/safety_rules/manual.h	/^class Manual : public SafetyRuleBaseClass$/;"	c	namespace:SafetyRules
Manual	cola2_core/cola2_safety/src/cola2_safety/safety_rules/manual.cpp	/^Manual::Manual(const std::string& rule_name, ros::NodeHandle* nh_ptr)$/;"	f	class:SafetyRules::Manual
Matrix6d	cola2_core/cola2_sim/src/dynamics_node.cpp	/^typedef Matrix<double, 6, 6> Matrix6d;$/;"	t	namespace:Eigen	file:
Merge	cola2_core/cola2_control/include/cola2_control/low_level_controllers/merge.h	/^class Merge$/;"	c
Merge	cola2_core/cola2_control/src/cola2_control/low_level_controllers/merge.cpp	/^Merge::Merge(std::string name, std::string type, double expire_time)$/;"	f	class:Merge
Mission	cola2_core/cola2_control/src/captain_node.cpp	/^    Mission,$/;"	m	class:Captain::CaptainStates	file:
Mission	cola2_lib/include/cola2_lib/mission/mission.h	/^class Mission$/;"	c
Mission	cola2_lib/python/cola2/mission/mission_types.py	/^class Mission(object):$/;"	c
Mission	cola2_lib/python/cola2/mission/mission_types_v1.py	/^class Mission(object):$/;"	c
Mission	cola2_lib/src/cola2_lib/mission/mission.cpp	/^Mission::Mission()$/;"	f	class:Mission
MissionAction	cola2_lib/include/cola2_lib/mission/mission_action.h	/^class MissionAction$/;"	c
MissionAction	cola2_lib/python/cola2/mission/mission_types.py	/^class MissionAction(object):$/;"	c
MissionAction	cola2_lib/python/cola2/mission/mission_types_v1.py	/^class MissionAction(object):$/;"	c
MissionAction	cola2_lib/src/cola2_lib/mission/mission_action.cpp	/^MissionAction::MissionAction()$/;"	f	class:MissionAction
MissionAction	cola2_lib/src/cola2_lib/mission/mission_action.cpp	/^MissionAction::MissionAction(const std::string& action_id, const std::vector<std::string>& parameters)$/;"	f	class:MissionAction
MissionConfiguration	cola2_lib/python/cola2/mission/mission_types_v1.py	/^class MissionConfiguration(object):$/;"	c
MissionGoto	cola2_lib/include/cola2_lib/mission/mission_goto.h	/^class MissionGoto : public MissionManeuver$/;"	c
MissionGoto	cola2_lib/python/cola2/mission/mission_types.py	/^class MissionGoto(MissionManeuver):$/;"	c
MissionGoto	cola2_lib/src/cola2_lib/mission/mission_goto.cpp	/^MissionGoto::MissionGoto()$/;"	f	class:MissionGoto
MissionManeuver	cola2_lib/include/cola2_lib/mission/mission_maneuver.h	/^class MissionManeuver$/;"	c
MissionManeuver	cola2_lib/python/cola2/mission/mission_types.py	/^class MissionManeuver(object):$/;"	c
MissionManeuver	cola2_lib/python/cola2/mission/mission_types_v1.py	/^class MissionManeuver(object):$/;"	c
MissionManeuver	cola2_lib/src/cola2_lib/mission/mission_maneuver.cpp	/^MissionManeuver::MissionManeuver(const unsigned int type)$/;"	f	class:MissionManeuver
MissionPark	cola2_lib/include/cola2_lib/mission/mission_park.h	/^class MissionPark : public MissionManeuver$/;"	c
MissionPark	cola2_lib/python/cola2/mission/mission_types.py	/^class MissionPark(MissionManeuver):$/;"	c
MissionPark	cola2_lib/python/cola2/mission/mission_types_v1.py	/^class MissionPark(MissionManeuver):$/;"	c
MissionPark	cola2_lib/src/cola2_lib/mission/mission_park.cpp	/^MissionPark::MissionPark()$/;"	f	class:MissionPark
MissionPosition	cola2_lib/python/cola2/mission/mission_types_v1.py	/^class MissionPosition(object):$/;"	c
MissionSection	cola2_lib/include/cola2_lib/mission/mission_section.h	/^class MissionSection : public MissionManeuver$/;"	c
MissionSection	cola2_lib/python/cola2/mission/mission_types.py	/^class MissionSection(MissionManeuver):$/;"	c
MissionSection	cola2_lib/python/cola2/mission/mission_types_v1.py	/^class MissionSection(MissionManeuver):$/;"	c
MissionSection	cola2_lib/src/cola2_lib/mission/mission_section.cpp	/^MissionSection::MissionSection()$/;"	f	class:MissionSection
MissionStep	cola2_lib/include/cola2_lib/mission/mission_step.h	/^class MissionStep$/;"	c
MissionStep	cola2_lib/python/cola2/mission/mission_types.py	/^class MissionStep(object):$/;"	c
MissionStep	cola2_lib/python/cola2/mission/mission_types_v1.py	/^class MissionStep(object):$/;"	c
MissionStep	cola2_lib/src/cola2_lib/mission/mission_step.cpp	/^MissionStep::MissionStep()$/;"	f	class:MissionStep
MissionTolerance	cola2_lib/python/cola2/mission/mission_types_v1.py	/^class MissionTolerance(object):$/;"	c
MissionWaypoint	cola2_lib/python/cola2/mission/mission_types_v1.py	/^class MissionWaypoint(MissionManeuver):$/;"	c
MissionWithState	cola2_core/cola2_control/src/captain_node.cpp	/^    MissionWithState() : current_step(0)$/;"	f	struct:Captain::MissionWithState
MissionWithState	cola2_core/cola2_control/src/captain_node.cpp	/^  struct MissionWithState$/;"	s	class:Captain	file:
ModelName	cola2_lib/include/cola2_lib/wmmc/GeomagnetismHeader.h	/^    char ModelName[32];$/;"	m	struct:__anon13
Month	cola2_lib/include/cola2_lib/wmmc/GeomagnetismHeader.h	/^    int Month;$/;"	m	struct:__anon17
Multibeam2ScanReady	stonefish_ros/src/ROSSimulationManager.cpp	/^void ROSSimulationManager::Multibeam2ScanReady(Multibeam2* mb)$/;"	f	class:sf::ROSSimulationManager
N	cola2_lib/include/cola2_lib/wmmc/GeomagnetismHeader.h	/^    N,$/;"	e	enum:COEFFICIENTS
NAVIGATION_ERROR	cola2_core/cola2_safety/include/cola2_safety/safety_rules/common.h	/^const std::size_t NAVIGATION_ERROR = 11;$/;"	m	namespace:SafetyRules::StatusCodeBits
NDofController	cola2_core/cola2_control/include/cola2_control/low_level_controllers/ndof_controller.h	/^class NDofController$/;"	c
NDofController	cola2_core/cola2_control/src/cola2_control/low_level_controllers/ndof_controller.cpp	/^NDofController::NDofController(const unsigned int n_dof) : n_dof_(n_dof)$/;"	f	class:NDofController
NED	cola2_core/cola2_control/include/cola2_control/controllers/types.h	/^  NED() : ned_origin_latitude(d_double), ned_origin_longitude(d_double), north(d_double),$/;"	f	class:control::NED
NED	cola2_core/cola2_control/include/cola2_control/controllers/types.h	/^class NED$/;"	c	namespace:control
NED	cola2_lib/include/cola2_lib/utils/ned.h	/^class NED$/;"	c	namespace:cola2::utils
NED	cola2_lib/python/cola2/utils/ned.py	/^class NED:$/;"	c
NED	cola2_lib/src/cola2_lib/utils/ned.cpp	/^NED::NED(const double lat, const double lon, const double height)$/;"	f	class:cola2::utils::NED
NMEAParser	cola2_lib/include/cola2_lib/io/nmea_parser.h	/^class NMEAParser$/;"	c
NMEAParser	cola2_lib/python/cola2/io/nmea_parser.py	/^class NMEAParser(object):$/;"	c
NMEAParser	cola2_lib/src/cola2_lib/io/nmea_parser.cpp	/^NMEAParser::NMEAParser() : valid_(false)$/;"	f	class:NMEAParser
NMEAParser	cola2_lib/src/cola2_lib/io/nmea_parser.cpp	/^NMEAParser::NMEAParser(std::string s)$/;"	f	class:NMEAParser
NONE	cola2_core/cola2_safety/include/cola2_safety/safety_rules/common.h	/^  static const std::size_t NONE = 0;$/;"	m	struct:SafetyRules::SafetyLevel
NOOFCOEFFICIENTS	cola2_lib/include/cola2_lib/wmmc/GeomagnetismHeader.h	32;"	d
NOOFPARAMS	cola2_lib/include/cola2_lib/wmmc/GeomagnetismHeader.h	31;"	d
NORMALIZATION	cola2_lib/include/cola2_lib/wmmc/GeomagnetismHeader.h	/^    NORMALIZATION,$/;"	e	enum:PARAMS
NO_ALTITUDE_ERROR	cola2_core/cola2_safety/include/cola2_safety/safety_rules/common.h	/^const std::size_t NO_ALTITUDE_ERROR = 10;$/;"	m	namespace:SafetyRules::StatusCodeBits
NO_ALT_MAX	cola2_lib/include/cola2_lib/wmmc/GeomagnetismHeader.h	91;"	d
NO_DIAGNOSTICS_ESCALATED_TIME	cola2_core/cola2_safety/include/cola2_safety/safety_rules/common.h	/^  static constexpr double NO_DIAGNOSTICS_ESCALATED_TIME = 630.0;$/;"	m	class:SafetyRules::SafetyRuleBaseClass
NO_DIAGNOSTICS_TIME	cola2_core/cola2_safety/include/cola2_safety/safety_rules/common.h	/^  static constexpr double NO_DIAGNOSTICS_TIME = 30.0;$/;"	m	class:SafetyRules::SafetyRuleBaseClass
Nav	cola2_core/cola2_control/include/cola2_control/controllers/types.h	/^  Nav() : ned_origin_latitude(d_double), ned_origin_longitude(d_double), north(d_double), east(d_double),$/;"	f	class:control::Nav
Nav	cola2_core/cola2_control/include/cola2_control/controllers/types.h	/^class Nav$/;"	c	namespace:control
Navigator	cola2_core/cola2_safety/include/cola2_safety/safety_rules/navigator.h	/^class Navigator : public SafetyRuleBaseClass$/;"	c	namespace:SafetyRules
Navigator	cola2_core/cola2_safety/src/cola2_safety/safety_rules/navigator.cpp	/^Navigator::Navigator(const std::string& rule_name, ros::NodeHandle* nh_ptr)$/;"	f	class:SafetyRules::Navigator
NavigatorNode	cola2_core/cola2_nav/src/navigator_node.cpp	/^NavigatorNode::NavigatorNode()$/;"	f	class:NavigatorNode
NavigatorNode	cola2_core/cola2_nav/src/navigator_node.cpp	/^class NavigatorNode : public EKFPositionVelocity$/;"	c	file:
NavigatorSurfaceNode	cola2_core/cola2_nav/src/navigator_surface_node.cpp	/^NavigatorSurfaceNode::NavigatorSurfaceNode()$/;"	f	class:NavigatorSurfaceNode
NavigatorSurfaceNode	cola2_core/cola2_nav/src/navigator_surface_node.cpp	/^class NavigatorSurfaceNode : public EKFSurface2D$/;"	c	file:
Northing	cola2_lib/include/cola2_lib/wmmc/GeomagnetismHeader.h	/^    double Northing; \/* (Y) in meters *\/$/;"	m	struct:__anon25
NotOpen	cola2_lib/include/cola2_lib/io/serial_port.h	/^    NotOpen() : logic_error("Serial port is not open")$/;"	f	class:cola2::io::SerialPort::NotOpen
NotOpen	cola2_lib/include/cola2_lib/io/serial_port.h	/^    NotOpen(const std::string& whatArg) : logic_error(whatArg)$/;"	f	class:cola2::io::SerialPort::NotOpen
NotOpen	cola2_lib/include/cola2_lib/io/serial_port.h	/^  class NotOpen : public std::logic_error$/;"	c	class:cola2::io::SerialPort
NumbGeoidCols	cola2_lib/include/cola2_lib/wmmc/GeomagnetismHeader.h	/^    int NumbGeoidCols; \/* 360 degrees of longitude at 15 minute spacing *\/$/;"	m	struct:__anon22
NumbGeoidElevs	cola2_lib/include/cola2_lib/wmmc/GeomagnetismHeader.h	/^    int NumbGeoidElevs;$/;"	m	struct:__anon22
NumbGeoidRows	cola2_lib/include/cola2_lib/wmmc/GeomagnetismHeader.h	/^    int NumbGeoidRows; \/* 180 degrees of latitude  at 15 minute spacing *\/$/;"	m	struct:__anon22
NumbHeaderItems	cola2_lib/include/cola2_lib/wmmc/GeomagnetismHeader.h	/^    int NumbHeaderItems; \/* min, max lat, min, max long, lat, long spacing*\/$/;"	m	struct:__anon22
OnlyThrusterAllocator	cola2_core/cola2_control/include/cola2_control/low_level_controllers/only_thruster_allocator.h	/^class OnlyThrusterAllocator$/;"	c
OnlyThrusterAllocator	cola2_core/cola2_control/src/cola2_control/low_level_controllers/only_thruster_allocator.cpp	/^OnlyThrusterAllocator::OnlyThrusterAllocator(unsigned int n_thrusters)$/;"	f	class:OnlyThrusterAllocator
OnlyThrustersController	cola2_core/cola2_control/include/cola2_control/low_level_controllers/only_thrusters_controller.h	/^class OnlyThrustersController : public IAUVController$/;"	c
OnlyThrustersController	cola2_core/cola2_control/src/cola2_control/low_level_controllers/only_thrusters_controller.cpp	/^OnlyThrustersController::OnlyThrustersController(double period, unsigned int n_thrusters)$/;"	f	class:OnlyThrustersController
OnlyThrustersROSController	cola2_core/cola2_control/src/controller_node.cpp	/^  OnlyThrustersROSController(const std::string name, const std::string frame_id) : IAUVROSController(name, frame_id)$/;"	f	class:OnlyThrustersROSController
OnlyThrustersROSController	cola2_core/cola2_control/src/controller_node.cpp	/^class OnlyThrustersROSController : public IAUVROSController$/;"	c	file:
OpenFailed	cola2_lib/include/cola2_lib/io/serial_port.h	/^    OpenFailed() : runtime_error("Serial port failed to open")$/;"	f	class:cola2::io::SerialPort::OpenFailed
OpenFailed	cola2_lib/include/cola2_lib/io/serial_port.h	/^    OpenFailed(const std::string& whatArg) : runtime_error(whatArg)$/;"	f	class:cola2::io::SerialPort::OpenFailed
OpenFailed	cola2_lib/include/cola2_lib/io/serial_port.h	/^  class OpenFailed : public std::runtime_error$/;"	c	class:cola2::io::SerialPort
OpenLoop	cola2_core/cola2_control/src/open_loop_node.cpp	/^OpenLoop::OpenLoop()$/;"	f	class:OpenLoop
OpenLoop	cola2_core/cola2_control/src/open_loop_node.cpp	/^class OpenLoop$/;"	c	file:
PACKAGE	cola2_core/cola2_control/cfg/controller.cfg	/^PACKAGE = "cola2_control"$/;"	v
PARAMS	cola2_lib/include/cola2_lib/wmmc/GeomagnetismHeader.h	/^enum PARAMS {$/;"	g
PARITY_DEFAULT	cola2_lib/include/cola2_lib/io/serial_port.h	/^  PARITY_DEFAULT = PARITY_NONE  \/\/!< Default parity none.$/;"	e	enum:cola2::io::EParity
PARITY_EVEN	cola2_lib/include/cola2_lib/io/serial_port.h	/^  PARITY_EVEN,                  \/\/!< Even parity.$/;"	e	enum:cola2::io::EParity
PARITY_INVALID	cola2_lib/include/cola2_lib/io/serial_port.h	/^  PARITY_INVALID,               \/\/!< Invalid parity checking.$/;"	e	enum:cola2::io::EParity
PARITY_NONE	cola2_lib/include/cola2_lib/io/serial_port.h	/^  PARITY_NONE,                  \/\/!< No parity i.e. parity checking disabled.$/;"	e	enum:cola2::io::EParity
PARITY_ODD	cola2_lib/include/cola2_lib/io/serial_port.h	/^  PARITY_ODD,                   \/\/!< Odd parity.$/;"	e	enum:cola2::io::EParity
PARK_MANEUVER	cola2_lib/include/cola2_lib/mission/mission_maneuver.h	/^  static const unsigned int PARK_MANEUVER = 2;     \/\/!< Park maneuver type.$/;"	m	class:MissionManeuver
PARK_MANEUVER	cola2_lib/python/cola2/mission/mission_types.py	/^PARK_MANEUVER = 2  # Park maneuver type.$/;"	v
PARK_MANEUVER	cola2_lib/python/cola2/mission/mission_types_v1.py	/^PARK_MANEUVER = 2$/;"	v
PID	cola2_core/cola2_control/include/cola2_control/low_level_controllers/pid.h	/^class PID : public IController$/;"	c
PID	cola2_core/cola2_control/src/cola2_control/low_level_controllers/pid.cpp	/^PID::PID(std::string name)$/;"	f	class:PID
PUBLISHER	cola2_lib/include/cola2_lib/wmmc/GeomagnetismHeader.h	/^    PUBLISHER,$/;"	e	enum:PARAMS
PY_STRING	cola2_core/cola2_comms/include/cppystruct/string.h	34;"	d
P_	cola2_core/cola2_nav/include/cola2_nav/ekf_base.h	/^  Eigen::MatrixXd P_;                             \/\/!< covariance matrix$/;"	m	class:EKFBase
ParamLoggerNode	cola2_core/cola2_log/src/param_logger_node.py	/^class ParamLoggerNode(object):$/;"	c
Parameter	cola2_lib/python/cola2/mission/mission_types.py	/^class Parameter(object):$/;"	c
Parameter	cola2_lib/python/cola2/mission/mission_types_v1.py	/^class Parameter(object):$/;"	c
ParseActuator	stonefish_ros/src/ROSScenarioParser.cpp	/^Actuator* ROSScenarioParser::ParseActuator(XMLElement* element, const std::string& namePrefix)$/;"	f	class:sf::ROSScenarioParser
ParseAnimated	stonefish_ros/src/ROSScenarioParser.cpp	/^bool ROSScenarioParser::ParseAnimated(XMLElement* element)$/;"	f	class:sf::ROSScenarioParser
ParseComm	stonefish_ros/src/ROSScenarioParser.cpp	/^Comm* ROSScenarioParser::ParseComm(XMLElement* element, const std::string& namePrefix)$/;"	f	class:sf::ROSScenarioParser
ParseContact	stonefish_ros/src/ROSScenarioParser.cpp	/^bool ROSScenarioParser::ParseContact(XMLElement* element)$/;"	f	class:sf::ROSScenarioParser
ParseLight	stonefish_ros/src/ROSScenarioParser.cpp	/^Light* ROSScenarioParser::ParseLight(XMLElement* element, const std::string& namePrefix)$/;"	f	class:sf::ROSScenarioParser
ParseRobot	stonefish_ros/src/ROSScenarioParser.cpp	/^bool ROSScenarioParser::ParseRobot(XMLElement* element)$/;"	f	class:sf::ROSScenarioParser
ParseSensor	stonefish_ros/src/ROSScenarioParser.cpp	/^Sensor* ROSScenarioParser::ParseSensor(XMLElement* element, const std::string& namePrefix)$/;"	f	class:sf::ROSScenarioParser
ParseVelocityField	stonefish_ros/src/ROSScenarioParser.cpp	/^VelocityField* ROSScenarioParser::ParseVelocityField(XMLElement* element)$/;"	f	class:sf::ROSScenarioParser
Pcup	cola2_lib/include/cola2_lib/wmmc/GeomagnetismHeader.h	/^    double *Pcup; \/* Legendre Function *\/$/;"	m	struct:__anon18
Pilot	cola2_core/cola2_control/src/pilot_node.cpp	/^Pilot::Pilot()$/;"	f	class:Pilot
Pilot	cola2_core/cola2_control/src/pilot_node.cpp	/^class Pilot$/;"	c	file:
Point	cola2_core/cola2_control/include/cola2_control/controllers/types.h	/^  Point() : x(d_double), y(d_double), z(d_double)$/;"	f	class:control::Point
Point	cola2_core/cola2_control/include/cola2_control/controllers/types.h	/^class Point$/;"	c	namespace:control
PointScale	cola2_lib/include/cola2_lib/wmmc/GeomagnetismHeader.h	/^    double PointScale;$/;"	m	struct:__anon25
PointsList	cola2_core/cola2_control/include/cola2_control/controllers/types.h	/^struct PointsList$/;"	s	namespace:control
Poly	cola2_core/cola2_control/include/cola2_control/low_level_controllers/poly.h	/^class Poly : public IController$/;"	c
Poly	cola2_core/cola2_control/src/cola2_control/low_level_controllers/poly.cpp	/^Poly::Poly(std::string name) : IController(name), setpoint_coefs_()$/;"	f	class:Poly
Pose	cola2_core/cola2_control/include/cola2_control/controllers/types.h	/^  Pose() : altitude(d_double), altitude_mode(d_bool)$/;"	f	class:control::Pose
Pose	cola2_core/cola2_control/include/cola2_control/controllers/types.h	/^class Pose$/;"	c	namespace:control
PreProcess	stonefish_ros/src/ROSScenarioParser.cpp	/^bool ROSScenarioParser::PreProcess(XMLNode* root, const std::map<std::string, std::string>& args)$/;"	f	class:sf::ROSScenarioParser
PropellersCallback	stonefish_ros/include/stonefish_ros/ROSSimulationManager.h	/^	class PropellersCallback$/;"	c	namespace:sf
PropellersCallback	stonefish_ros/src/ROSSimulationManager.cpp	/^PropellersCallback::PropellersCallback(ROSSimulationManager* sm, ROSRobot* robot) : sm(sm), robot(robot)$/;"	f	class:sf::PropellersCallback
PublishAccelerometer	stonefish_ros/src/ROSInterface.cpp	/^void ROSInterface::PublishAccelerometer(ros::Publisher& pub, Accelerometer* acc)$/;"	f	class:sf::ROSInterface
PublishContact	stonefish_ros/src/ROSInterface.cpp	/^void ROSInterface::PublishContact(ros::Publisher& pub, Contact* cnt)$/;"	f	class:sf::ROSInterface
PublishDVL	stonefish_ros/src/ROSInterface.cpp	/^void ROSInterface::PublishDVL(ros::Publisher& pub, ros::Publisher& altPub, DVL* dvl)$/;"	f	class:sf::ROSInterface
PublishEncoder	stonefish_ros/src/ROSInterface.cpp	/^void ROSInterface::PublishEncoder(ros::Publisher& pub, RotaryEncoder* enc)$/;"	f	class:sf::ROSInterface
PublishForceTorque	stonefish_ros/src/ROSInterface.cpp	/^void ROSInterface::PublishForceTorque(ros::Publisher& pub, ForceTorque* ft)$/;"	f	class:sf::ROSInterface
PublishGPS	stonefish_ros/src/ROSInterface.cpp	/^void ROSInterface::PublishGPS(ros::Publisher& pub, GPS* gps)$/;"	f	class:sf::ROSInterface
PublishGyroscope	stonefish_ros/src/ROSInterface.cpp	/^void ROSInterface::PublishGyroscope(ros::Publisher& pub, Gyroscope* gyro)$/;"	f	class:sf::ROSInterface
PublishIMU	stonefish_ros/src/ROSInterface.cpp	/^void ROSInterface::PublishIMU(ros::Publisher& pub, IMU* imu)$/;"	f	class:sf::ROSInterface
PublishMultibeam	stonefish_ros/src/ROSInterface.cpp	/^void ROSInterface::PublishMultibeam(ros::Publisher& pub, Multibeam* mb)$/;"	f	class:sf::ROSInterface
PublishOdometry	stonefish_ros/src/ROSInterface.cpp	/^void ROSInterface::PublishOdometry(ros::Publisher& pub, Odometry* odom)$/;"	f	class:sf::ROSInterface
PublishPointCloud	stonefish_ros/src/ROSInterface.cpp	/^void ROSInterface::PublishPointCloud(ros::Publisher& pointCloudPub, Multibeam2* mb)$/;"	f	class:sf::ROSInterface
PublishPressure	stonefish_ros/src/ROSInterface.cpp	/^void ROSInterface::PublishPressure(ros::Publisher& pub, Pressure* press)$/;"	f	class:sf::ROSInterface
PublishProfiler	stonefish_ros/src/ROSInterface.cpp	/^void ROSInterface::PublishProfiler(ros::Publisher& pub, Profiler* prof)$/;"	f	class:sf::ROSInterface
PublishTF	stonefish_ros/src/ROSInterface.cpp	/^void ROSInterface::PublishTF(tf::TransformBroadcaster& broadcaster, const Transform& T, const ros::Time& t, const std::string &frame_id, const std::string &child_frame_id)$/;"	f	class:sf::ROSInterface
PublishTrajectoryState	stonefish_ros/src/ROSInterface.cpp	/^void ROSInterface::PublishTrajectoryState(ros::Publisher& odom, ros::Publisher& iter, AnimatedEntity* anim)$/;"	f	class:sf::ROSInterface
PublishUSBL	stonefish_ros/src/ROSInterface.cpp	/^void ROSInterface::PublishUSBL(ros::Publisher& pub, USBL* usbl)$/;"	f	class:sf::ROSInterface
Q_	cola2_core/cola2_nav/include/cola2_nav/ekf_base.h	/^  Eigen::MatrixXd Q_;                             \/\/!< noise prediction matrix$/;"	m	class:EKFBase
RAD2DEG	cola2_lib/include/cola2_lib/wmmc/GeomagnetismHeader.h	64;"	d
RA_ABORT	cola2_core/cola2_safety/include/cola2_safety/safety_rules/common.h	/^const std::size_t RA_ABORT = 15;$/;"	m	namespace:SafetyRules::StatusCodeBits
RA_ABORT_SURFACE	cola2_core/cola2_safety/include/cola2_safety/safety_rules/common.h	/^const std::size_t RA_ABORT_SURFACE = 16;$/;"	m	namespace:SafetyRules::StatusCodeBits
RA_DROP_WEIGHT	cola2_core/cola2_safety/include/cola2_safety/safety_rules/common.h	/^const std::size_t RA_DROP_WEIGHT = 18;$/;"	m	namespace:SafetyRules::StatusCodeBits
RA_EMERGENCY_SURFACE	cola2_core/cola2_safety/include/cola2_safety/safety_rules/common.h	/^const std::size_t RA_EMERGENCY_SURFACE = 17;$/;"	m	namespace:SafetyRules::StatusCodeBits
READONLYMODE	cola2_lib/include/cola2_lib/wmmc/GeomagnetismHeader.h	29;"	d
RELEASEDATE	cola2_lib/include/cola2_lib/wmmc/GeomagnetismHeader.h	/^    RELEASEDATE,$/;"	e	enum:PARAMS
RESET_TIMEOUT	cola2_core/cola2_comms/src/comms_node.cpp	/^  RESET_TIMEOUT = 20   \/\/!< reset vehicle timeout$/;"	e	enum:CustomCommands	file:
RESOLVE_THROW_MACRO	cola2_lib/include/cola2_lib/utils/error_macro.h	40;"	d
RIGHT_JOY_HORIZONTAL	cola2_core/cola2_control/src/logitech_fx10_to_teleoperation_node.py	/^    RIGHT_JOY_HORIZONTAL = 3  # LEFT+, RIGHT-$/;"	v	class:LogitechFX10
RIGHT_JOY_VERTICAL	cola2_core/cola2_control/src/logitech_fx10_to_teleoperation_node.py	/^    RIGHT_JOY_VERTICAL = 4  # UP+, DOWN-$/;"	v	class:LogitechFX10
RIGHT_TRIGGER	cola2_core/cola2_control/src/logitech_fx10_to_teleoperation_node.py	/^    RIGHT_TRIGGER = 5  # NOT PRESS 1, PRESS -1$/;"	v	class:LogitechFX10
ROSInterface	stonefish_ros/include/stonefish_ros/ROSInterface.h	/^    class ROSInterface$/;"	c	namespace:sf
ROSRobot	stonefish_ros/include/stonefish_ros/ROSSimulationManager.h	/^		ROSRobot(Robot* robot, unsigned int nThrusters, unsigned int nPropellers, unsigned int nRudders=0) $/;"	f	struct:sf::ROSRobot
ROSRobot	stonefish_ros/include/stonefish_ros/ROSSimulationManager.h	/^	struct ROSRobot$/;"	s	namespace:sf
ROSScenarioParser	stonefish_ros/include/stonefish_ros/ROSScenarioParser.h	/^    class ROSScenarioParser : public ScenarioParser$/;"	c	namespace:sf
ROSScenarioParser	stonefish_ros/src/ROSScenarioParser.cpp	/^ROSScenarioParser::ROSScenarioParser(ROSSimulationManager* sm) : ScenarioParser(sm)$/;"	f	class:sf::ROSScenarioParser
ROSSimulationManager	stonefish_ros/include/stonefish_ros/ROSSimulationManager.h	/^	class ROSSimulationManager : public SimulationManager$/;"	c	namespace:sf
ROSSimulationManager	stonefish_ros/src/ROSSimulationManager.cpp	/^ROSSimulationManager::ROSSimulationManager(Scalar stepsPerSecond, std::string scenarioFilePath) $/;"	f	class:sf::ROSSimulationManager
RPY	cola2_core/cola2_control/include/cola2_control/controllers/types.h	/^  RPY() : roll(d_double), pitch(d_double), yaw(d_double)$/;"	f	class:control::RPY
RPY	cola2_core/cola2_control/include/cola2_control/controllers/types.h	/^class RPY$/;"	c	namespace:control
RawFormatType	cola2_core/cola2_comms/include/cppystruct/format.h	/^struct RawFormatType$/;"	s	namespace:pystruct
ReadTimeout	cola2_lib/include/cola2_lib/io/serial_port.h	/^    ReadTimeout() : runtime_error("Serial port read timeout")$/;"	f	class:cola2::io::SerialPort::ReadTimeout
ReadTimeout	cola2_lib/include/cola2_lib/io/serial_port.h	/^    ReadTimeout(const std::string& whatArg) : runtime_error(whatArg)$/;"	f	class:cola2::io::SerialPort::ReadTimeout
ReadTimeout	cola2_lib/include/cola2_lib/io/serial_port.h	/^  class ReadTimeout : public std::runtime_error$/;"	c	class:cola2::io::SerialPort
RelativeRadiusPower	cola2_lib/include/cola2_lib/wmmc/GeomagnetismHeader.h	/^    double *RelativeRadiusPower; \/* [earth_reference_radius_km \/ sph. radius ]^n  *\/$/;"	m	struct:__anon20
ReplaceROSVars	stonefish_ros/src/ROSScenarioParser.cpp	/^bool ROSScenarioParser::ReplaceROSVars(XMLNode* node)$/;"	f	class:sf::ROSScenarioParser
Request	cola2_core/cola2_control/include/cola2_control/controllers/types.h	/^  Request() : ned_origin_latitude(d_double), ned_origin_longitude(d_double), initial_north(d_double),$/;"	f	class:control::Request
Request	cola2_core/cola2_control/include/cola2_control/controllers/types.h	/^class Request$/;"	c	namespace:control
Request	cola2_core/cola2_control/include/cola2_control/low_level_controllers/request.h	/^class Request$/;"	c
Request	cola2_core/cola2_control/src/cola2_control/low_level_controllers/request.cpp	/^Request::Request(const Request& other)$/;"	f	class:Request
Request	cola2_core/cola2_control/src/cola2_control/low_level_controllers/request.cpp	/^Request::Request(std::string requester, const double stamp, const unsigned int priority, const unsigned int n_dof)$/;"	f	class:Request
RuddersCallback	stonefish_ros/include/stonefish_ros/ROSSimulationManager.h	/^	class RuddersCallback$/;"	c	namespace:sf
RuddersCallback	stonefish_ros/src/ROSSimulationManager.cpp	/^RuddersCallback::RuddersCallback(ROSSimulationManager* sm, ROSRobot* robot) : sm(sm), robot(robot)$/;"	f	class:sf::RuddersCallback
SECTION	cola2_core/cola2_control/include/cola2_control/controllers/types.h	/^  static const std::uint64_t SECTION = 0;$/;"	m	class:control::Request
SECTION_MANEUVER	cola2_lib/include/cola2_lib/mission/mission_maneuver.h	/^  static const unsigned int SECTION_MANEUVER = 1;  \/\/!< Section meneuver type.$/;"	m	class:MissionManeuver
SECTION_MANEUVER	cola2_lib/python/cola2/mission/mission_types.py	/^SECTION_MANEUVER = 1  # Section meneuver type.$/;"	v
SECTION_MANEUVER	cola2_lib/python/cola2/mission/mission_types_v1.py	/^SECTION_MANEUVER = 1$/;"	v
SET_FORMAT_CHAR	cola2_core/cola2_comms/include/cppystruct/format.h	75;"	d
SET_FORMAT_MODE	cola2_core/cola2_comms/include/cppystruct/format.h	42;"	d
SHDF	cola2_lib/include/cola2_lib/wmmc/GeomagnetismHeader.h	/^    SHDF,$/;"	e	enum:PARAMS
SIZE	cola2_core/cola2_comms/src/comms_node.cpp	/^const int SIZE = pystruct::calcsize(FMT);  \/\/!< size of the serialized message$/;"	m	namespace:__anon8	file:
SOURCEDIR	stonefish_ros/docs/Makefile	/^SOURCEDIR     = .$/;"	m
SPATBASFUNC	cola2_lib/include/cola2_lib/wmmc/GeomagnetismHeader.h	/^    SPATBASFUNC$/;"	e	enum:PARAMS
SPConfig	cola2_lib/include/cola2_lib/io/serial_port.h	/^struct SPConfig$/;"	s	namespace:cola2::io
SPHINXBUILD	stonefish_ros/docs/Makefile	/^SPHINXBUILD   = sphinx-build$/;"	m
SPHINXOPTS	stonefish_ros/docs/Makefile	/^SPHINXOPTS    =$/;"	m
SSSScanReady	stonefish_ros/src/ROSSimulationManager.cpp	/^void ROSSimulationManager::SSSScanReady(SSS* sss)$/;"	f	class:sf::ROSSimulationManager
SSSService	stonefish_ros/include/stonefish_ros/ROSSimulationManager.h	/^	class SSSService$/;"	c	namespace:sf
SSSService	stonefish_ros/src/ROSSimulationManager.cpp	/^SSSService::SSSService(SSS* sss) : sss(sss)$/;"	f	class:sf::SSSService
START_MISSION	cola2_core/cola2_comms/src/comms_node.cpp	/^  START_MISSION = 10,  \/\/!< start default mission$/;"	e	enum:CustomCommands	file:
STD_GRAVITY	cola2_core/cola2_sim/src/dynamics_node.cpp	34;"	d	file:
STOP_BITS_1	cola2_lib/include/cola2_lib/io/serial_port.h	/^  STOP_BITS_1,                     \/\/!< 1 stop bit.$/;"	e	enum:cola2::io::EStopBits
STOP_BITS_2	cola2_lib/include/cola2_lib/io/serial_port.h	/^  STOP_BITS_2,                     \/\/!< 2 stop bits.$/;"	e	enum:cola2::io::EStopBits
STOP_BITS_DEFAULT	cola2_lib/include/cola2_lib/io/serial_port.h	/^  STOP_BITS_DEFAULT = STOP_BITS_1  \/\/!< Default stop bit 1.$/;"	e	enum:cola2::io::EStopBits
STOP_BITS_INVALID	cola2_lib/include/cola2_lib/io/serial_port.h	/^  STOP_BITS_INVALID,               \/\/!< Invalid stop bits.$/;"	e	enum:cola2::io::EStopBits
SURFACE_DEPTH	cola2_core/cola2_safety/include/cola2_safety/safety_rules/navigator.h	/^  static constexpr double SURFACE_DEPTH = 0.5;$/;"	m	class:SafetyRules::Navigator
SafeDepthAltitude	cola2_core/cola2_safety/src/safe_depth_altitude_node.cpp	/^SafeDepthAltitude::SafeDepthAltitude()$/;"	f	class:SafeDepthAltitude
SafeDepthAltitude	cola2_core/cola2_safety/src/safe_depth_altitude_node.cpp	/^class SafeDepthAltitude$/;"	c	file:
SafetyKeepPosition	cola2_core/cola2_control/src/captain_node.cpp	/^    SafetyKeepPosition,$/;"	m	class:Captain::CaptainStates	file:
SafetyLevel	cola2_core/cola2_safety/include/cola2_safety/safety_rules/common.h	/^struct SafetyLevel$/;"	s	namespace:SafetyRules
SafetyRuleBaseClass	cola2_core/cola2_safety/include/cola2_safety/safety_rules/common.h	/^class SafetyRuleBaseClass$/;"	c	namespace:SafetyRules
SafetyRuleBaseClass	cola2_core/cola2_safety/src/cola2_safety/safety_rules/common.cpp	/^SafetyRuleBaseClass::SafetyRuleBaseClass(const std::string& rule_name)$/;"	f	class:SafetyRules::SafetyRuleBaseClass
SafetyRules	cola2_core/cola2_safety/include/cola2_safety/safety_rules/battery_control_board.h	/^namespace SafetyRules$/;"	n
SafetyRules	cola2_core/cola2_safety/include/cola2_safety/safety_rules/battery_level.h	/^namespace SafetyRules$/;"	n
SafetyRules	cola2_core/cola2_safety/include/cola2_safety/safety_rules/captain.h	/^namespace SafetyRules$/;"	n
SafetyRules	cola2_core/cola2_safety/include/cola2_safety/safety_rules/check_enabled.h	/^namespace SafetyRules$/;"	n
SafetyRules	cola2_core/cola2_safety/include/cola2_safety/safety_rules/combined_water_inside.h	/^namespace SafetyRules$/;"	n
SafetyRules	cola2_core/cola2_safety/include/cola2_safety/safety_rules/common.h	/^namespace SafetyRules$/;"	n
SafetyRules	cola2_core/cola2_safety/include/cola2_safety/safety_rules/comms.h	/^namespace SafetyRules$/;"	n
SafetyRules	cola2_core/cola2_safety/include/cola2_safety/safety_rules/manual.h	/^namespace SafetyRules$/;"	n
SafetyRules	cola2_core/cola2_safety/include/cola2_safety/safety_rules/navigator.h	/^namespace SafetyRules$/;"	n
SafetyRules	cola2_core/cola2_safety/include/cola2_safety/safety_rules/teleoperation.h	/^namespace SafetyRules$/;"	n
SafetyRules	cola2_core/cola2_safety/include/cola2_safety/safety_rules/temperature.h	/^namespace SafetyRules$/;"	n
SafetyRules	cola2_core/cola2_safety/include/cola2_safety/safety_rules/virtual_cage.h	/^namespace SafetyRules$/;"	n
SafetyRules	cola2_core/cola2_safety/include/cola2_safety/safety_rules/watchdog_timer.h	/^namespace SafetyRules$/;"	n
SafetyRules	cola2_core/cola2_safety/include/cola2_safety/safety_rules/water_inside.h	/^namespace SafetyRules$/;"	n
SafetyRules	cola2_core/cola2_safety/src/cola2_safety/safety_rules/battery_control_board.cpp	/^namespace SafetyRules$/;"	n	file:
SafetyRules	cola2_core/cola2_safety/src/cola2_safety/safety_rules/battery_level.cpp	/^namespace SafetyRules$/;"	n	file:
SafetyRules	cola2_core/cola2_safety/src/cola2_safety/safety_rules/captain.cpp	/^namespace SafetyRules$/;"	n	file:
SafetyRules	cola2_core/cola2_safety/src/cola2_safety/safety_rules/check_enabled.cpp	/^namespace SafetyRules$/;"	n	file:
SafetyRules	cola2_core/cola2_safety/src/cola2_safety/safety_rules/combined_water_inside.cpp	/^namespace SafetyRules$/;"	n	file:
SafetyRules	cola2_core/cola2_safety/src/cola2_safety/safety_rules/common.cpp	/^namespace SafetyRules$/;"	n	file:
SafetyRules	cola2_core/cola2_safety/src/cola2_safety/safety_rules/comms.cpp	/^namespace SafetyRules$/;"	n	file:
SafetyRules	cola2_core/cola2_safety/src/cola2_safety/safety_rules/manual.cpp	/^namespace SafetyRules$/;"	n	file:
SafetyRules	cola2_core/cola2_safety/src/cola2_safety/safety_rules/navigator.cpp	/^namespace SafetyRules$/;"	n	file:
SafetyRules	cola2_core/cola2_safety/src/cola2_safety/safety_rules/teleoperation.cpp	/^namespace SafetyRules$/;"	n	file:
SafetyRules	cola2_core/cola2_safety/src/cola2_safety/safety_rules/temperature.cpp	/^namespace SafetyRules$/;"	n	file:
SafetyRules	cola2_core/cola2_safety/src/cola2_safety/safety_rules/virtual_cage.cpp	/^namespace SafetyRules$/;"	n	file:
SafetyRules	cola2_core/cola2_safety/src/cola2_safety/safety_rules/watchdog_timer.cpp	/^namespace SafetyRules$/;"	n	file:
SafetyRules	cola2_core/cola2_safety/src/cola2_safety/safety_rules/water_inside.cpp	/^namespace SafetyRules$/;"	n	file:
SafetySupervisor	cola2_core/cola2_safety/src/safety_supervisor_node.cpp	/^SafetySupervisor::SafetySupervisor()$/;"	f	class:SafetySupervisor
SafetySupervisor	cola2_core/cola2_safety/src/safety_supervisor_node.cpp	/^class SafetySupervisor$/;"	c	file:
SafetySupervisorChecker	cola2_core/cola2_safety/src/safety_supervisor_checker_node.cpp	/^SafetySupervisorChecker::SafetySupervisorChecker()$/;"	f	class:SafetySupervisorChecker
SafetySupervisorChecker	cola2_core/cola2_safety/src/safety_supervisor_checker_node.cpp	/^class SafetySupervisorChecker$/;"	c	file:
ScaleFactor	cola2_lib/include/cola2_lib/wmmc/GeomagnetismHeader.h	/^    int ScaleFactor; \/* 4 grid cells per degree at 15 minute spacing  *\/$/;"	m	struct:__anon22
Section	cola2_core/cola2_control/src/captain_node.cpp	/^    Section,$/;"	m	class:Captain::CaptainStates	file:
SectionController	cola2_core/cola2_control/include/cola2_control/controllers/section.h	/^class SectionController$/;"	c
SectionController	cola2_core/cola2_control/src/cola2_control/controllers/section.cpp	/^SectionController::SectionController(SectionControllerConfig config) : config_(config)$/;"	f	class:SectionController
SectionControllerConfig	cola2_core/cola2_control/include/cola2_control/controllers/section.h	/^} SectionControllerConfig;$/;"	t	typeref:struct:__anon6
SecularVariationUsed	cola2_lib/include/cola2_lib/wmmc/GeomagnetismHeader.h	/^    int SecularVariationUsed; \/* Whether or not the magnetic secular variation vector will be needed by program*\/$/;"	m	struct:__anon13
Secular_Var_Coeff_G	cola2_lib/include/cola2_lib/wmmc/GeomagnetismHeader.h	/^    double *Secular_Var_Coeff_G; \/* CD - Gauss coefficients of secular geomagnetic model (nT\/yr) *\/$/;"	m	struct:__anon13
Secular_Var_Coeff_H	cola2_lib/include/cola2_lib/wmmc/GeomagnetismHeader.h	/^    double *Secular_Var_Coeff_H; \/* CD - Gauss coefficients of secular geomagnetic model (nT\/yr) *\/$/;"	m	struct:__anon13
SensorOriginCallback	stonefish_ros/include/stonefish_ros/ROSSimulationManager.h	/^	class SensorOriginCallback$/;"	c	namespace:sf
SensorOriginCallback	stonefish_ros/src/ROSSimulationManager.cpp	/^SensorOriginCallback::SensorOriginCallback(Sensor* sens) : sens(sens)$/;"	f	class:sf::SensorOriginCallback
SerialPort	cola2_lib/include/cola2_lib/io/serial_port.h	/^class SerialPort : public IOBase, private boost::noncopyable$/;"	c	namespace:cola2::io
SerialPort	cola2_lib/src/cola2_lib/io/serial_port.cpp	/^SerialPort::SerialPort()$/;"	f	class:cola2::io::SerialPort
SerialPort	cola2_lib/src/cola2_lib/io/serial_port.cpp	/^SerialPort::SerialPort(const cola2::io::SPConfig config)$/;"	f	class:cola2::io::SerialPort
Server	cola2_lib/include/cola2_lib/io/udp_socket.h	/^class Server$/;"	c	namespace:cola2::io::udp_socket
Server	cola2_lib/src/cola2_lib/io/udp_socket.cpp	/^Server::Server()$/;"	f	class:cola2::io::udp_socket::Server
ServosCallback	stonefish_ros/include/stonefish_ros/ROSSimulationManager.h	/^	class ServosCallback$/;"	c	namespace:sf
ServosCallback	stonefish_ros/src/ROSSimulationManager.cpp	/^ServosCallback::ServosCallback(ROSSimulationManager* sm, ROSRobot* robot) : sm(sm), robot(robot)$/;"	f	class:sf::ServosCallback
SetpointsSelector	cola2_lib_ros/include/cola2_lib_ros/setpoints_selector.h	/^class SetpointsSelector$/;"	c	namespace:cola2::ros
SetpointsSelector	cola2_lib_ros/src/cola2_lib_ros/setpoints_selector.cpp	/^SetpointsSelector::SetpointsSelector(::ros::NodeHandle& nh)$/;"	f	class:cola2::ros::SetpointsSelector
ShutdownLogger	cola2_core/cola2_log/startup_processes/shutdown_logger_startup_process.cpp	/^  explicit ShutdownLogger(const std::string& user)$/;"	f	class:ShutdownLogger
ShutdownLogger	cola2_core/cola2_log/startup_processes/shutdown_logger_startup_process.cpp	/^class ShutdownLogger$/;"	c	file:
SimAUVNavSensors	cola2_core/cola2_sim/src/sim_auv_nav_sensors_node.py	/^class SimAUVNavSensors(object):$/;"	c
SimInternalSensors	cola2_core/cola2_sim/src/sim_internal_sensors_node.cpp	/^SimInternalSensors::SimInternalSensors()$/;"	f	class:SimInternalSensors
SimInternalSensors	cola2_core/cola2_sim/src/sim_internal_sensors_node.cpp	/^class SimInternalSensors$/;"	c	file:
SimulationClockSleep	stonefish_ros/src/ROSSimulationManager.cpp	/^void ROSSimulationManager::SimulationClockSleep(uint64_t us)$/;"	f	class:sf::ROSSimulationManager
SimulationStepCompleted	stonefish_ros/src/ROSSimulationManager.cpp	/^void ROSSimulationManager::SimulationStepCompleted(Scalar timeStep)$/;"	f	class:sf::ROSSimulationManager
StampedPosition	cola2_core/cola2_nav/include/cola2_nav/ekf_base_ros.h	/^    StampedPosition(const double& t, const Eigen::Vector3d& pos, const Eigen::Vector3d& rpy)$/;"	f	struct:EKFBaseROS::StampedPosition
StampedPosition	cola2_core/cola2_nav/include/cola2_nav/ekf_base_ros.h	/^  struct StampedPosition$/;"	s	class:EKFBaseROS
State	cola2_core/cola2_control/include/cola2_control/controllers/types.h	/^struct State$/;"	s	namespace:control
StatusCodeBits	cola2_core/cola2_safety/include/cola2_safety/safety_rules/common.h	/^namespace StatusCodeBits$/;"	n	namespace:SafetyRules
StatusCodeBits	cola2_core/cola2_safety/src/cola2_safety/safety_rules/common.cpp	/^namespace StatusCodeBits$/;"	n	namespace:SafetyRules	file:
SubstituteROSVars	stonefish_ros/src/ROSScenarioParser.cpp	/^std::string ROSScenarioParser::SubstituteROSVars(const std::string& value)$/;"	f	class:sf::ROSScenarioParser
TCPConfig	cola2_lib/include/cola2_lib/io/tcp_socket.h	/^struct TCPConfig$/;"	s	namespace:cola2::io
TEST	cola2_core/cola2_safety/test/test_battery_control_board_rule.cpp	/^TEST(TESTSuite, test)$/;"	f
TEST	cola2_core/cola2_safety/test/test_battery_level_rule.cpp	/^TEST(TESTSuite, test)$/;"	f
TEST	cola2_core/cola2_safety/test/test_captain_rule.cpp	/^TEST(TESTSuite, test)$/;"	f
TEST	cola2_core/cola2_safety/test/test_check_enabled_rule.cpp	/^TEST(TESTSuite, test)$/;"	f
TEST	cola2_core/cola2_safety/test/test_combined_water_inside_rule.cpp	/^TEST(TESTSuite, test)$/;"	f
TEST	cola2_core/cola2_safety/test/test_common.cpp	/^TEST(TESTSuite, test)$/;"	f
TEST	cola2_core/cola2_safety/test/test_comms_rule.cpp	/^TEST(TESTSuite, test)$/;"	f
TEST	cola2_core/cola2_safety/test/test_manual_rule.cpp	/^TEST(TESTSuite, test)$/;"	f
TEST	cola2_core/cola2_safety/test/test_navigator_rule.cpp	/^TEST(TESTSuite, test)$/;"	f
TEST	cola2_core/cola2_safety/test/test_teleoperation_rule.cpp	/^TEST(TESTSuite, test)$/;"	f
TEST	cola2_core/cola2_safety/test/test_temperature_rule.cpp	/^TEST(TESTSuite, test)$/;"	f
TEST	cola2_core/cola2_safety/test/test_virtual_cage_rule.cpp	/^TEST(TESTSuite, test)$/;"	f
TEST	cola2_core/cola2_safety/test/test_watchdog_timer_rule.cpp	/^TEST(TESTSuite, test)$/;"	f
TEST	cola2_core/cola2_safety/test/test_water_inside_rule.cpp	/^TEST(TESTSuite, test)$/;"	f
THIS_NODE_H	cola2_lib_ros/include/cola2_lib_ros/this_node.h	14;"	d
THROW	cola2_lib/include/cola2_lib/utils/error_macro.h	46;"	d
THROW_MESSAGE	cola2_lib/include/cola2_lib/utils/error_macro.h	35;"	d
THROW_NO_MESSAGE	cola2_lib/include/cola2_lib/utils/error_macro.h	25;"	d
TIME_BETWEEN_PUBLISHING	cola2_core/cola2_nav/include/cola2_nav/ekf_base_ros.h	/^constexpr double TIME_BETWEEN_PUBLISHING = 1.0 \/ 20.0;  \/\/!< minimum time between publishNavigation()$/;"	m	namespace:__anon1
TOTAL_INTENSITY	cola2_lib/include/cola2_lib/wmmc/GeomagnetismHeader.h	/^    TOTAL_INTENSITY,$/;"	e	enum:__anon12
TRUE	cola2_lib/include/cola2_lib/wmmc/GeomagnetismHeader.h	69;"	d
TWIST_R	cola2_core/cola2_control/src/keyboard_to_teleoperation_node.py	/^    TWIST_R = 3$/;"	v	class:KeyboardToTeleoperation
TWIST_U	cola2_core/cola2_control/src/keyboard_to_teleoperation_node.py	/^    TWIST_U = 0$/;"	v	class:KeyboardToTeleoperation
TWIST_V	cola2_core/cola2_control/src/keyboard_to_teleoperation_node.py	/^    TWIST_V = 1$/;"	v	class:KeyboardToTeleoperation
TWIST_W	cola2_core/cola2_control/src/keyboard_to_teleoperation_node.py	/^    TWIST_W = 2$/;"	v	class:KeyboardToTeleoperation
TcpSocket	cola2_lib/include/cola2_lib/io/tcp_socket.h	/^class TcpSocket : public IOBase$/;"	c	namespace:cola2::io
TcpSocket	cola2_lib/src/cola2_lib/io/tcp_socket.cpp	/^TcpSocket::TcpSocket(TCPConfig config)$/;"	f	class:cola2::io::TcpSocket
Teleoperation	cola2_core/cola2_control/src/teleoperation_node.py	/^class Teleoperation(object):$/;"	c
Teleoperation	cola2_core/cola2_safety/include/cola2_safety/safety_rules/teleoperation.h	/^class Teleoperation : public SafetyRuleBaseClass$/;"	c	namespace:SafetyRules
Teleoperation	cola2_core/cola2_safety/src/cola2_safety/safety_rules/teleoperation.cpp	/^Teleoperation::Teleoperation(const std::string& rule_name, ros::NodeHandle* nh_ptr)$/;"	f	class:SafetyRules::Teleoperation
Temperature	cola2_core/cola2_safety/include/cola2_safety/safety_rules/temperature.h	/^class Temperature : public SafetyRuleBaseClass$/;"	c	namespace:SafetyRules
Temperature	cola2_core/cola2_safety/src/cola2_safety/safety_rules/temperature.cpp	/^  Temperature::Temperature(const std::string& rule_name)$/;"	f	class:SafetyRules::Temperature
TestThrusters	cola2_core/cola2_control/test/test_thrusters.py	/^class TestThrusters:$/;"	c
ThreadPool	cola2_lib/include/cola2_lib/utils/thread_pool.h	/^class ThreadPool$/;"	c
ThreadPool	cola2_lib/include/cola2_lib/utils/thread_pool.h	/^inline ThreadPool::ThreadPool(size_t threads) : stop(false)$/;"	f	class:ThreadPool
ThreadSafeFlag	cola2_lib/include/cola2_lib/utils/thread_safe_flag.h	/^class ThreadSafeFlag$/;"	c	namespace:cola2::utils
ThreadSafeFlag	cola2_lib/src/cola2_lib/utils/thread_safe_flag.cpp	/^ThreadSafeFlag::ThreadSafeFlag() : state_(false)$/;"	f	class:cola2::utils::ThreadSafeFlag
ThreadSafeFlag	cola2_lib/src/cola2_lib/utils/thread_safe_flag.cpp	/^ThreadSafeFlag::ThreadSafeFlag(const bool state) : state_(state)$/;"	f	class:cola2::utils::ThreadSafeFlag
ThrusterAllocatorWrapper	cola2_core/cola2_control/src/open_loop_node.cpp	/^  ThrusterAllocatorWrapper(unsigned int n_thrusters)$/;"	f	class:ThrusterAllocatorWrapper
ThrusterAllocatorWrapper	cola2_core/cola2_control/src/open_loop_node.cpp	/^class ThrusterAllocatorWrapper : public OnlyThrusterAllocator$/;"	c	file:
ThrustersCallback	stonefish_ros/include/stonefish_ros/ROSSimulationManager.h	/^	class ThrustersCallback$/;"	c	namespace:sf
ThrustersCallback	stonefish_ros/src/ROSSimulationManager.cpp	/^ThrustersCallback::ThrustersCallback(ROSSimulationManager* sm, ROSRobot* robot) : sm(sm), robot(robot)$/;"	f	class:sf::ThrustersCallback
TrajectoryCallback	stonefish_ros/include/stonefish_ros/ROSSimulationManager.h	/^	class TrajectoryCallback$/;"	c	namespace:sf
TrajectoryCallback	stonefish_ros/src/ROSSimulationManager.cpp	/^TrajectoryCallback::TrajectoryCallback(ManualTrajectory* tr) : tr(tr)$/;"	f	class:sf::TrajectoryCallback
TransformHandler	cola2_lib_ros/include/cola2_lib_ros/transform_handler.h	/^class TransformHandler$/;"	c	namespace:cola2::ros
TransformHandler	cola2_lib_ros/python/cola2_ros/transform_handler.py	/^class TransformHandler(object):$/;"	c
TransformHandler	cola2_lib_ros/src/cola2_lib_ros/transform_handler.cpp	/^cola2::ros::TransformHandler::TransformHandler() : tf_buffer_(), tf_listener_(tf_buffer_)$/;"	f	class:cola2::ros::TransformHandler
TransformHandler	cola2_lib_ros/src/cola2_lib_ros/transform_handler.cpp	/^cola2::ros::TransformHandler::TransformHandler(const std::string& frame) : tf_buffer_(), tf_listener_(tf_buffer_)$/;"	f	class:cola2::ros::TransformHandler
USBL_KEEP_TIME	cola2_core/cola2_nav/include/cola2_nav/ekf_base_ros.h	/^constexpr double USBL_KEEP_TIME = 10.0;                 \/\/!< seconds to keep position history for delayed USBLs$/;"	m	namespace:__anon1
USER_GAVE_UP	cola2_lib/include/cola2_lib/wmmc/GeomagnetismHeader.h	92;"	d
UniformVFCallback	stonefish_ros/include/stonefish_ros/ROSSimulationManager.h	/^	class UniformVFCallback$/;"	c	namespace:sf
UniformVFCallback	stonefish_ros/src/ROSSimulationManager.cpp	/^UniformVFCallback::UniformVFCallback(Uniform* vf) : vf(vf)$/;"	f	class:sf::UniformVFCallback
UnsupportedBaudRate	cola2_lib/include/cola2_lib/io/serial_port.h	/^    UnsupportedBaudRate() : runtime_error("Unsupported baud rate")$/;"	f	class:cola2::io::SerialPort::UnsupportedBaudRate
UnsupportedBaudRate	cola2_lib/include/cola2_lib/io/serial_port.h	/^    UnsupportedBaudRate(const std::string& whatArg) : runtime_error(whatArg)$/;"	f	class:cola2::io::SerialPort::UnsupportedBaudRate
UnsupportedBaudRate	cola2_lib/include/cola2_lib/io/serial_port.h	/^  class UnsupportedBaudRate : public std::runtime_error$/;"	c	class:cola2::io::SerialPort
UseGeoid	cola2_lib/include/cola2_lib/wmmc/GeomagnetismHeader.h	/^    int UseGeoid; \/*Is the Geoid being used?*\/$/;"	m	struct:__anon22
UseGeoid	cola2_lib/include/cola2_lib/wmmc/GeomagnetismHeader.h	/^    int UseGeoid;$/;"	m	struct:__anon15
UseGradient	cola2_lib/include/cola2_lib/wmmc/GeomagnetismHeader.h	/^    int UseGradient;$/;"	m	struct:__anon23
VBSCallback	stonefish_ros/include/stonefish_ros/ROSSimulationManager.h	/^	class VBSCallback$/;"	c	namespace:sf
VBSCallback	stonefish_ros/src/ROSSimulationManager.cpp	/^VBSCallback::VBSCallback(VariableBuoyancy* act) : act(act)$/;"	f	class:sf::VBSCallback
VERSIONDATE_LARGE	cola2_lib/include/cola2_lib/wmmc/GeomagnetismHeader.h	109;"	d
Vector6d	cola2_core/cola2_control/include/cola2_control/controllers/types.h	/^  Vector6d() : x(d_double), y(d_double), z(d_double), roll(d_double), pitch(d_double), yaw(d_double)$/;"	f	class:control::Vector6d
Vector6d	cola2_core/cola2_control/include/cola2_control/controllers/types.h	/^class Vector6d$/;"	c	namespace:control
Vector6d	cola2_core/cola2_sim/src/dynamics_node.cpp	/^typedef Matrix<double, 6, 1> Vector6d;$/;"	t	namespace:Eigen	file:
Velocity	cola2_core/cola2_control/include/cola2_control/controllers/types.h	/^struct Velocity$/;"	s	namespace:control
VirtualCage	cola2_core/cola2_safety/include/cola2_safety/safety_rules/virtual_cage.h	/^class VirtualCage : public SafetyRuleBaseClass$/;"	c	namespace:SafetyRules
VirtualCage	cola2_core/cola2_safety/src/cola2_safety/safety_rules/virtual_cage.cpp	/^  VirtualCage::VirtualCage(const std::string& rule_name)$/;"	f	class:SafetyRules::VirtualCage
VirtualCage	cola2_core/cola2_safety/src/virtual_cage_node.cpp	/^VirtualCage::VirtualCage()$/;"	f	class:VirtualCage
VirtualCage	cola2_core/cola2_safety/src/virtual_cage_node.cpp	/^class VirtualCage$/;"	c	file:
WATCHDOG_TIMER	cola2_core/cola2_safety/include/cola2_safety/safety_rules/common.h	/^const std::size_t WATCHDOG_TIMER = 12;$/;"	m	namespace:SafetyRules::StatusCodeBits
WATER_INSIDE	cola2_core/cola2_safety/include/cola2_safety/safety_rules/common.h	/^const std::size_t WATER_INSIDE = 9;$/;"	m	namespace:SafetyRules::StatusCodeBits
WAYPOINT_MANEUVER	cola2_lib/python/cola2/mission/mission_types_v1.py	/^WAYPOINT_MANEUVER = 0$/;"	v
WGS84ON	cola2_lib/include/cola2_lib/wmmc/GeomagnetismHeader.h	94;"	d
WMM_ERROR_MULTIPLIER	cola2_lib/include/cola2_lib/wmmc/GeomagnetismHeader.h	44;"	d
WMM_UNCERTAINTY_D_COEF	cola2_lib/include/cola2_lib/wmmc/GeomagnetismHeader.h	57;"	d
WMM_UNCERTAINTY_D_OFFSET	cola2_lib/include/cola2_lib/wmmc/GeomagnetismHeader.h	56;"	d
WMM_UNCERTAINTY_F	cola2_lib/include/cola2_lib/wmmc/GeomagnetismHeader.h	50;"	d
WMM_UNCERTAINTY_H	cola2_lib/include/cola2_lib/wmmc/GeomagnetismHeader.h	51;"	d
WMM_UNCERTAINTY_I	cola2_lib/include/cola2_lib/wmmc/GeomagnetismHeader.h	55;"	d
WMM_UNCERTAINTY_X	cola2_lib/include/cola2_lib/wmmc/GeomagnetismHeader.h	52;"	d
WMM_UNCERTAINTY_Y	cola2_lib/include/cola2_lib/wmmc/GeomagnetismHeader.h	53;"	d
WMM_UNCERTAINTY_Z	cola2_lib/include/cola2_lib/wmmc/GeomagnetismHeader.h	54;"	d
W_	cola2_core/cola2_nav/include/cola2_nav/ekf_base.h	/^  Eigen::MatrixXd W_;   \/\/!< Linearizartion of f(x) w.r.t. process noise (df(x) \/ dnoise) (computed in$/;"	m	class:EKFBase
WaitForIdleHelper	cola2_lib_ros/python/cola2_ros/captain_helper.py	/^class WaitForIdleHelper(object):$/;"	c
WatchdogTimer	cola2_core/cola2_safety/include/cola2_safety/safety_rules/watchdog_timer.h	/^class WatchdogTimer : public SafetyRuleBaseClass$/;"	c	namespace:SafetyRules
WatchdogTimer	cola2_core/cola2_safety/src/cola2_safety/safety_rules/watchdog_timer.cpp	/^WatchdogTimer::WatchdogTimer(const std::string& rule_name)$/;"	f	class:SafetyRules::WatchdogTimer
WatchdogTimer	cola2_core/cola2_safety/src/watchdog_timer_node.cpp	/^WatchdogTimer::WatchdogTimer()$/;"	f	class:WatchdogTimer
WatchdogTimer	cola2_core/cola2_safety/src/watchdog_timer_node.cpp	/^class WatchdogTimer$/;"	c	file:
WaterInside	cola2_core/cola2_safety/include/cola2_safety/safety_rules/water_inside.h	/^class WaterInside : public SafetyRuleBaseClass$/;"	c	namespace:SafetyRules
WaterInside	cola2_core/cola2_safety/src/cola2_safety/safety_rules/water_inside.cpp	/^  WaterInside::WaterInside(const std::string& rule_name)$/;"	f	class:SafetyRules::WaterInside
X	cola2_lib/include/cola2_lib/wmmc/GeomagnetismHeader.h	/^    double X; \/*5. Northern component of the magnetic field vector*\/$/;"	m	struct:__anon21
X_COMPONENT	cola2_lib/include/cola2_lib/wmmc/GeomagnetismHeader.h	/^    X_COMPONENT,$/;"	e	enum:__anon12
Xdot	cola2_lib/include/cola2_lib/wmmc/GeomagnetismHeader.h	/^    double Xdot; \/*13. Yearly rate of change in the northern component*\/$/;"	m	struct:__anon21
Y	cola2_lib/include/cola2_lib/wmmc/GeomagnetismHeader.h	/^    double Y; \/*6. Eastern component of the magnetic field vector*\/$/;"	m	struct:__anon21
YEAR	cola2_lib/include/cola2_lib/wmmc/GeomagnetismHeader.h	/^    YEAR,$/;"	e	enum:YYYYMMDD
YYYYMMDD	cola2_lib/include/cola2_lib/wmmc/GeomagnetismHeader.h	/^enum YYYYMMDD {$/;"	g
Y_COMPONENT	cola2_lib/include/cola2_lib/wmmc/GeomagnetismHeader.h	/^    Y_COMPONENT,$/;"	e	enum:__anon12
Ydot	cola2_lib/include/cola2_lib/wmmc/GeomagnetismHeader.h	/^    double Ydot; \/*14. Yearly rate of change in the eastern component*\/$/;"	m	struct:__anon21
Year	cola2_lib/include/cola2_lib/wmmc/GeomagnetismHeader.h	/^    int Year;$/;"	m	struct:__anon17
Z	cola2_lib/include/cola2_lib/wmmc/GeomagnetismHeader.h	/^    double Z; \/*7. Downward component of the magnetic field vector*\/$/;"	m	struct:__anon21
Z_COMPONENT	cola2_lib/include/cola2_lib/wmmc/GeomagnetismHeader.h	/^    Z_COMPONENT,$/;"	e	enum:__anon12
Zdot	cola2_lib/include/cola2_lib/wmmc/GeomagnetismHeader.h	/^    double Zdot; \/*15. Yearly rate of change in the downward component*\/$/;"	m	struct:__anon21
Zone	cola2_lib/include/cola2_lib/wmmc/GeomagnetismHeader.h	/^    int Zone; \/*UTM Zone*\/$/;"	m	struct:__anon25
_DEGREE_NOT_FOUND	cola2_lib/include/cola2_lib/wmmc/GeomagnetismHeader.h	34;"	d
_POSIX_C_SOURCE	cola2_lib/include/cola2_lib/wmmc/GeomagnetismHeader.h	17;"	d
__ONLYTHRUSTERALLOCATOR_CLASS__	cola2_core/cola2_control/include/cola2_control/low_level_controllers/only_thruster_allocator.h	10;"	d
__OnlyThrusters_CONTROLLER__	cola2_core/cola2_control/include/cola2_control/low_level_controllers/only_thrusters_controller.h	10;"	d
__Stonefish_ROSInterface__	stonefish_ros/include/stonefish_ros/ROSInterface.h	27;"	d
__Stonefish_ROSScenarioParser__	stonefish_ros/include/stonefish_ros/ROSScenarioParser.h	27;"	d
__Stonefish_ROSSimulationManager__	stonefish_ros/include/stonefish_ros/ROSSimulationManager.h	27;"	d
__add_key_value_impl	cola2_lib_ros/python/cola2_ros/diagnostic_helper.py	/^    def __add_key_value_impl(self, key, value):$/;"	m	class:DiagnosticHelper	file:
__cbrt__	cola2_lib/python/cola2/utils/ned.py	/^def __cbrt__(x):$/;"	f	file:
__compute_frequency	cola2_lib_ros/python/cola2_ros/diagnostic_helper.py	/^    def __compute_frequency(self, now):$/;"	m	class:DiagnosticHelper	file:
__degree_to_degree_minute_seconds_aux__	cola2_lib/python/cola2/utils/angles.py	/^def __degree_to_degree_minute_seconds_aux__(value):$/;"	f	file:
__degree_to_degree_minutes_aux__	cola2_lib/python/cola2/utils/angles.py	/^def __degree_to_degree_minutes_aux__(value):$/;"	f	file:
__init__	cola2_core/cola2_control/src/cola2_control/joystickbase.py	/^    def __init__(self, name):$/;"	m	class:JoystickBase
__init__	cola2_core/cola2_control/src/keyboard_to_teleoperation_node.py	/^    def __init__(self, name):$/;"	m	class:KeyboardToTeleoperation
__init__	cola2_core/cola2_control/src/logitech_fx10_to_teleoperation_node.py	/^    def __init__(self, name):$/;"	m	class:LogitechFX10
__init__	cola2_core/cola2_control/src/teleoperation_node.py	/^    def __init__(self, name):$/;"	m	class:Teleoperation
__init__	cola2_core/cola2_control/test/test_thrusters.py	/^    def __init__(self):$/;"	m	class:TestThrusters
__init__	cola2_core/cola2_log/src/bag_recorder_node.py	/^    def __init__(self):$/;"	m	class:LogBag
__init__	cola2_core/cola2_log/src/computer_logger_node.py	/^    def __init__(self, name):$/;"	m	class:ComputerLogger
__init__	cola2_core/cola2_log/src/default_param_handler_node.py	/^    def __init__(self, name):$/;"	m	class:DefaultParamHandler
__init__	cola2_core/cola2_log/src/param_logger_node.py	/^    def __init__(self):$/;"	m	class:ParamLoggerNode
__init__	cola2_core/cola2_sim/src/sim_auv_nav_sensors_node.py	/^    def __init__(self):$/;"	m	class:SimAUVNavSensors
__init__	cola2_lib/python/cola2/io/nmea_parser.py	/^    def __init__(self, data=""):$/;"	m	class:NMEAParser
__init__	cola2_lib/python/cola2/mission/mission_types.py	/^    def __init__(self):$/;"	m	class:Mission
__init__	cola2_lib/python/cola2/mission/mission_types.py	/^    def __init__(self):$/;"	m	class:MissionStep
__init__	cola2_lib/python/cola2/mission/mission_types.py	/^    def __init__(self, action_id="", parameters=None):$/;"	m	class:MissionAction
__init__	cola2_lib/python/cola2/mission/mission_types.py	/^    def __init__(self, final_latitude=0.0, final_longitude=0.0, final_depth=0.0, final_altitude=0.0,$/;"	m	class:MissionGoto
__init__	cola2_lib/python/cola2/mission/mission_types.py	/^    def __init__(self, final_latitude=0.0, final_longitude=0.0, final_depth=0.0, final_altitude=0.0,$/;"	m	class:MissionPark
__init__	cola2_lib/python/cola2/mission/mission_types.py	/^    def __init__(self, initial_latitude=0.0, initial_longitude=0.0, initial_depth=0.0,$/;"	m	class:MissionSection
__init__	cola2_lib/python/cola2/mission/mission_types.py	/^    def __init__(self, m_type):$/;"	m	class:MissionManeuver
__init__	cola2_lib/python/cola2/mission/mission_types.py	/^    def __init__(self, value=""):$/;"	m	class:Parameter
__init__	cola2_lib/python/cola2/mission/mission_types_v1.py	/^    def __init__(self):$/;"	m	class:Mission
__init__	cola2_lib/python/cola2/mission/mission_types_v1.py	/^    def __init__(self):$/;"	m	class:MissionStep
__init__	cola2_lib/python/cola2/mission/mission_types_v1.py	/^    def __init__(self, action_id="", parameters=None):$/;"	m	class:MissionAction
__init__	cola2_lib/python/cola2/mission/mission_types_v1.py	/^    def __init__(self, initial_position=None, final_position=None, speed=0.0, tolerance=None):$/;"	m	class:MissionSection
__init__	cola2_lib/python/cola2/mission/mission_types_v1.py	/^    def __init__(self, key="", value=""):$/;"	m	class:MissionConfiguration
__init__	cola2_lib/python/cola2/mission/mission_types_v1.py	/^    def __init__(self, lat=0.0, lon=0.0, z=0.0, mode=False):$/;"	m	class:MissionPosition
__init__	cola2_lib/python/cola2/mission/mission_types_v1.py	/^    def __init__(self, m_type):$/;"	m	class:MissionManeuver
__init__	cola2_lib/python/cola2/mission/mission_types_v1.py	/^    def __init__(self, position=None, speed=0.0, time=0.0, tolerance=None):$/;"	m	class:MissionPark
__init__	cola2_lib/python/cola2/mission/mission_types_v1.py	/^    def __init__(self, position=None, speed=0.0, tolerance=None):$/;"	m	class:MissionWaypoint
__init__	cola2_lib/python/cola2/mission/mission_types_v1.py	/^    def __init__(self, value=""):$/;"	m	class:Parameter
__init__	cola2_lib/python/cola2/mission/mission_types_v1.py	/^    def __init__(self, x=0.0, y=0.0, z=0.0):$/;"	m	class:MissionTolerance
__init__	cola2_lib/python/cola2/utils/ned.py	/^    def __init__(self, lat, lon, height):$/;"	m	class:NED
__init__	cola2_lib_ros/python/cola2_ros/captain_helper.py	/^    def __init__(self):$/;"	m	class:WaitForIdleHelper
__init__	cola2_lib_ros/python/cola2_ros/diagnostic_helper.py	/^    def __init__(self, name, hardware_id):$/;"	m	class:DiagnosticHelper
__init__	cola2_lib_ros/python/cola2_ros/transform_handler.py	/^    def __init__(self):$/;"	m	class:TransformHandler
__nRe__	cola2_lib/python/cola2/utils/ned.py	/^def __nRe__(lat, lon):$/;"	f	file:
__remove_key_value_impl	cola2_lib_ros/python/cola2_ros/diagnostic_helper.py	/^    def __remove_key_value_impl(self, key):$/;"	m	class:DiagnosticHelper	file:
__shrink_frequency_buffer	cola2_lib_ros/python/cola2_ros/diagnostic_helper.py	/^    def __shrink_frequency_buffer(self, now):$/;"	m	class:DiagnosticHelper	file:
__split_degree_minutes__	cola2_lib/python/cola2/utils/angles.py	/^def __split_degree_minutes__(value):$/;"	f	file:
__str__	cola2_lib/python/cola2/mission/mission_types.py	/^    def __str__(self):$/;"	m	class:Mission	file:
__str__	cola2_lib/python/cola2/mission/mission_types.py	/^    def __str__(self):$/;"	m	class:MissionAction	file:
__str__	cola2_lib/python/cola2/mission/mission_types.py	/^    def __str__(self):$/;"	m	class:MissionGoto	file:
__str__	cola2_lib/python/cola2/mission/mission_types.py	/^    def __str__(self):$/;"	m	class:MissionManeuver	file:
__str__	cola2_lib/python/cola2/mission/mission_types.py	/^    def __str__(self):$/;"	m	class:MissionPark	file:
__str__	cola2_lib/python/cola2/mission/mission_types.py	/^    def __str__(self):$/;"	m	class:MissionSection	file:
__str__	cola2_lib/python/cola2/mission/mission_types.py	/^    def __str__(self):$/;"	m	class:MissionStep	file:
__str__	cola2_lib/python/cola2/mission/mission_types_v1.py	/^    def __str__(self):$/;"	m	class:Mission	file:
__str__	cola2_lib/python/cola2/mission/mission_types_v1.py	/^    def __str__(self):$/;"	m	class:MissionAction	file:
__str__	cola2_lib/python/cola2/mission/mission_types_v1.py	/^    def __str__(self):$/;"	m	class:MissionConfiguration	file:
__str__	cola2_lib/python/cola2/mission/mission_types_v1.py	/^    def __str__(self):$/;"	m	class:MissionManeuver	file:
__str__	cola2_lib/python/cola2/mission/mission_types_v1.py	/^    def __str__(self):$/;"	m	class:MissionPark	file:
__str__	cola2_lib/python/cola2/mission/mission_types_v1.py	/^    def __str__(self):$/;"	m	class:MissionPosition	file:
__str__	cola2_lib/python/cola2/mission/mission_types_v1.py	/^    def __str__(self):$/;"	m	class:MissionSection	file:
__str__	cola2_lib/python/cola2/mission/mission_types_v1.py	/^    def __str__(self):$/;"	m	class:MissionStep	file:
__str__	cola2_lib/python/cola2/mission/mission_types_v1.py	/^    def __str__(self):$/;"	m	class:MissionTolerance	file:
__str__	cola2_lib/python/cola2/mission/mission_types_v1.py	/^    def __str__(self):$/;"	m	class:MissionWaypoint	file:
_are_thrusters_killed	cola2_core/cola2_control/include/cola2_control/ros_controller/auv_ros_controller_base.h	/^  bool _are_thrusters_killed;$/;"	m	class:IAUVROSController
a	cola2_core/cola2_safety/test/test_common.cpp	/^  double a;$/;"	m	class:Common	file:
a	cola2_lib/include/cola2_lib/wmmc/GeomagnetismHeader.h	/^    double a; \/*semi-major axis of the ellipsoid*\/$/;"	m	struct:__anon14
a_fins	cola2_core/cola2_sim/src/dynamics_node.cpp	/^    double a_fins;$/;"	m	struct:Dynamics::Config	file:
acceptSetpoints	cola2_lib_ros/src/cola2_lib_ros/setpoints_selector.cpp	/^SetpointsSelector::acceptSetpoints(const cola2_msgs::Setpoints& msg)$/;"	f	class:cola2::ros::SetpointsSelector
ack_callback	cola2_core/cola2_control/src/teleoperation_node.py	/^    def ack_callback(self, ack_msg):$/;"	m	class:Teleoperation
act	stonefish_ros/include/stonefish_ros/ROSSimulationManager.h	/^		Actuator* act;$/;"	m	class:sf::ActuatorOriginCallback
act	stonefish_ros/include/stonefish_ros/ROSSimulationManager.h	/^		VariableBuoyancy* act;$/;"	m	class:sf::VBSCallback
action_id_	cola2_lib/include/cola2_lib/mission/mission_action.h	/^  std::string action_id_;                \/\/!< Name of the service to call.$/;"	m	class:MissionAction
actionlib_request_	cola2_core/cola2_control/src/captain_node.cpp	/^  cola2_msgs::PilotGoal actionlib_request_;$/;"	m	class:Captain	file:
actions_	cola2_lib/include/cola2_lib/mission/mission_step.h	/^  std::vector<MissionAction> actions_;         \/\/!< List of actions.$/;"	m	class:MissionStep
addAction	cola2_lib/src/cola2_lib/mission/mission_step.cpp	/^void MissionStep::addAction(const MissionAction& action)$/;"	f	class:MissionStep
addController	cola2_core/cola2_control/src/cola2_control/low_level_controllers/ndof_controller.cpp	/^void NDofController::addController(std::shared_ptr<IController> controller)$/;"	f	class:NDofController
addKeyValue	cola2_lib_ros/src/cola2_lib_ros/diagnostic_helper.cpp	/^DiagnosticHelper::addKeyValue(const std::string& key, const bool value)$/;"	f	class:cola2::ros::DiagnosticHelper
addKeyValue	cola2_lib_ros/src/cola2_lib_ros/diagnostic_helper.cpp	/^DiagnosticHelper::addKeyValue(const std::string& key, const char* value)$/;"	f	class:cola2::ros::DiagnosticHelper
addKeyValue	cola2_lib_ros/src/cola2_lib_ros/diagnostic_helper.cpp	/^DiagnosticHelper::addKeyValue(const std::string& key, const double value)$/;"	f	class:cola2::ros::DiagnosticHelper
addKeyValue	cola2_lib_ros/src/cola2_lib_ros/diagnostic_helper.cpp	/^DiagnosticHelper::addKeyValue(const std::string& key, const int value)$/;"	f	class:cola2::ros::DiagnosticHelper
addKeyValue	cola2_lib_ros/src/cola2_lib_ros/diagnostic_helper.cpp	/^DiagnosticHelper::addKeyValue(const std::string& key, const std::string& value)$/;"	f	class:cola2::ros::DiagnosticHelper
addKeyValueImpl	cola2_lib_ros/src/cola2_lib_ros/diagnostic_helper.cpp	/^DiagnosticHelper::addKeyValueImpl(const std::string& key, const std::string& value)$/;"	f	class:cola2::ros::DiagnosticHelper
addPIDParamToVector	cola2_core/cola2_control/src/cola2_control/low_level_controllers/auv_controller_base.cpp	/^void IAUVController::addPIDParamToVector(std::vector<std::string> keys, std::vector<double> values,$/;"	f	class:IAUVController
addParameters	cola2_lib/src/cola2_lib/mission/mission_action.cpp	/^void MissionAction::addParameters(const std::string& param)$/;"	f	class:MissionAction
addPolyParamToVector	cola2_core/cola2_control/src/cola2_control/low_level_controllers/auv_controller_base.cpp	/^void IAUVController::addPolyParamToVector(std::vector<double> values,$/;"	f	class:IAUVController
addRequest	cola2_core/cola2_control/src/cola2_control/low_level_controllers/merge.cpp	/^void Merge::addRequest(const Request req)$/;"	f	class:Merge
addStep	cola2_lib/src/cola2_lib/mission/mission.cpp	/^void Mission::addStep(std::shared_ptr<MissionStep> step)$/;"	f	class:Mission
add_action	cola2_lib/python/cola2/mission/mission_types.py	/^    def add_action(self, action):$/;"	m	class:MissionStep
add_action	cola2_lib/python/cola2/mission/mission_types_v1.py	/^    def add_action(self, action):$/;"	m	class:MissionStep
add_configuration	cola2_lib/python/cola2/mission/mission_types_v1.py	/^    def add_configuration(self, config):$/;"	m	class:MissionStep
add_key_value	cola2_lib_ros/python/cola2_ros/diagnostic_helper.py	/^    def add_key_value(self, key, value):$/;"	m	class:DiagnosticHelper
add_maneuver	cola2_lib/python/cola2/mission/mission_types.py	/^    def add_maneuver(self, maneuver):$/;"	m	class:MissionStep
add_maneuver	cola2_lib/python/cola2/mission/mission_types_v1.py	/^    def add_maneuver(self, maneuver):$/;"	m	class:MissionStep
add_step	cola2_lib/python/cola2/mission/mission_types.py	/^    def add_step(self, step):$/;"	m	class:Mission
add_step	cola2_lib/python/cola2/mission/mission_types_v1.py	/^    def add_step(self, step):$/;"	m	class:Mission
altitude	cola2_core/cola2_control/include/cola2_control/controllers/types.h	/^  double altitude;$/;"	m	class:control::Nav
altitude	cola2_core/cola2_control/include/cola2_control/controllers/types.h	/^  double altitude;$/;"	m	class:control::Pose
altitudeDecode	cola2_lib/src/cola2_lib/comms/altitude.c	/^double altitudeDecode(const uint8_t encoded)$/;"	f
altitudeEncode	cola2_lib/src/cola2_lib/comms/altitude.c	/^uint8_t altitudeEncode(const double altitude)$/;"	f
altitudeIsEncodingError	cola2_lib/src/cola2_lib/comms/altitude.c	/^bool altitudeIsEncodingError(const uint8_t encoded)$/;"	f
altitudeIsInvalid	cola2_lib/src/cola2_lib/comms/altitude.c	/^bool altitudeIsInvalid(const uint8_t encoded)$/;"	f
altitudeIsMaximum	cola2_lib/src/cola2_lib/comms/altitude.c	/^bool altitudeIsMaximum(const uint8_t encoded)$/;"	f
altitude_	cola2_core/cola2_nav/include/cola2_nav/ekf_base_ros.h	/^  double altitude_ = 0.0;           \/\/!< altitude of the vehicle above floor$/;"	m	class:EKFBaseROS
altitude_data_timeout_	cola2_core/cola2_safety/include/cola2_safety/safety_rules/navigator.h	/^  double altitude_data_timeout_;$/;"	m	class:SafetyRules::Navigator
altitude_mode	cola2_core/cola2_control/include/cola2_control/controllers/types.h	/^  bool altitude_mode;$/;"	m	class:control::Pose
anchor_config	cola2_core/cola2_control/src/pilot_node.cpp	/^    AnchorControllerConfig anchor_config;$/;"	m	struct:Pilot::__anon4	file:
anchor_controller_	cola2_core/cola2_control/src/pilot_node.cpp	/^  std::shared_ptr<AnchorController> anchor_controller_;$/;"	m	class:Pilot	file:
ang_vel_	cola2_core/cola2_nav/include/cola2_nav/ekf_position_velocity.h	/^  Eigen::Vector3d ang_vel_ = Eigen::Vector3d::Zero();                \/\/!< Current filter angular velocity$/;"	m	class:EKFPositionVelocity
ang_vel_	cola2_core/cola2_nav/include/cola2_nav/ekf_surface_2d.h	/^  Eigen::Vector3d ang_vel_ = Eigen::Vector3d::Zero();$/;"	m	class:EKFSurface2D
ang_vel_cov_	cola2_core/cola2_nav/include/cola2_nav/ekf_position_velocity.h	/^  Eigen::Matrix3d ang_vel_cov_ = 0.1 * Eigen::Matrix3d::Identity();  \/\/!< Current filter angular velocity covariance$/;"	m	class:EKFPositionVelocity
ang_vel_cov_	cola2_core/cola2_nav/include/cola2_nav/ekf_surface_2d.h	/^  Eigen::Matrix3d ang_vel_cov_ = 0.1 * Eigen::Matrix3d::Identity();$/;"	m	class:EKFSurface2D
angular	cola2_core/cola2_control/include/cola2_control/controllers/types.h	/^  control::Point angular;$/;"	m	struct:control::Velocity
angularVelocity	cola2_core/cola2_nav/src/cola2_nav/transformations.cpp	/^Eigen::Vector3d angularVelocity(const Eigen::Vector3d& measured_angular_velocity,$/;"	f	namespace:transforms
angularVelocityCovariance	cola2_core/cola2_nav/src/cola2_nav/transformations.cpp	/^Eigen::Matrix3d angularVelocityCovariance(const Eigen::Matrix3d& measured_angular_velocity_covariance,$/;"	f	namespace:transforms
applyUpdate	cola2_core/cola2_nav/src/cola2_nav/ekf_base.cpp	/^bool EKFBase::applyUpdate(const Eigen::VectorXd& innovation, const Eigen::MatrixXd& H, const Eigen::MatrixXd& R,$/;"	f	class:EKFBase
approach_completed_	cola2_core/cola2_control/src/captain_node.cpp	/^  bool approach_completed_;$/;"	m	class:Captain	file:
author	cola2_lib/doc/conf.py	/^author = u'iquarobotics'$/;"	v
author	cola2_lib_ros/doc/conf.py	/^author = u'iquarobotics'$/;"	v
author	stonefish_ros/docs/conf.py	/^author = u'Patryk Cieślak'$/;"	v
autodoc_mock_imports	cola2_lib/doc/conf.py	/^autodoc_mock_imports = ["numpy"]$/;"	v
autodoc_mock_imports	cola2_lib_ros/doc/conf.py	/^autodoc_mock_imports = ["numpy", "tf"]$/;"	v
auv_controller_	cola2_core/cola2_control/include/cola2_control/ros_controller/auv_ros_controller_base.h	/^  std::shared_ptr<IAUVController> auv_controller_;$/;"	m	class:IAUVROSController
auv_controller_	cola2_core/cola2_control/src/controller_node.cpp	/^  std::shared_ptr<OnlyThrustersController> auv_controller_;$/;"	m	class:OnlyThrustersROSController	file:
b	cola2_core/cola2_safety/test/test_common.cpp	/^  int b;$/;"	m	class:Common	file:
b	cola2_lib/include/cola2_lib/wmmc/GeomagnetismHeader.h	/^    double b; \/*semi-minor axis of the ellipsoid*\/$/;"	m	struct:__anon14
barsToMeters	cola2_lib/src/cola2_lib/utils/pressure.cpp	/^double cola2::utils::barsToMeters(const double bars, const double water_density)$/;"	f	class:cola2::utils
barsToPascals	cola2_lib/src/cola2_lib/utils/pressure.cpp	/^double cola2::utils::barsToPascals(const double bars)$/;"	f	class:cola2::utils
base_frame_	cola2_lib_ros/include/cola2_lib_ros/transform_handler.h	/^  std::string base_frame_;                  \/\/!< frame used as a base for computing transformations.$/;"	m	class:cola2::ros::TransformHandler
battery_consumption_per_second_	cola2_core/cola2_sim/src/sim_internal_sensors_node.cpp	/^  double battery_consumption_per_second_;$/;"	m	class:SimInternalSensors	file:
battery_level_	cola2_core/cola2_sim/src/sim_internal_sensors_node.cpp	/^  double battery_level_;$/;"	m	class:SimInternalSensors	file:
baudRateFromInteger	cola2_lib/src/cola2_lib/io/serial_port.cpp	/^EBaudRate SerialPort::baudRateFromInteger(const unsigned int baudRate)$/;"	f	class:cola2::io::SerialPort
bisectionPolySolver	cola2_core/cola2_sim/src/dynamics_node.cpp	/^double bisectionPolySolver(Poly& poly, double x1, double x2, double ytarget)$/;"	f
blockingWaitFor	cola2_lib/src/cola2_lib/utils/thread_safe_flag.cpp	/^void ThreadSafeFlag::blockingWaitFor(const bool desired_state)$/;"	f	class:cola2::utils::ThreadSafeFlag
boolToString	cola2_lib_ros/src/cola2_lib_ros/diagnostic_helper.cpp	/^DiagnosticHelper::boolToString(const bool value) const$/;"	f	class:cola2::ros::DiagnosticHelper
bool_vars_	cola2_core/cola2_safety/include/cola2_safety/safety_rules/common.h	/^  std::map<std::string, bool> bool_vars_;$/;"	m	class:SafetyRules::SafetyRuleBaseClass
br	stonefish_ros/include/stonefish_ros/ROSSimulationManager.h	/^		tf::TransformBroadcaster br;$/;"	m	class:sf::ROSSimulationManager
buoyancy	cola2_core/cola2_sim/src/dynamics_node.cpp	/^    double buoyancy;$/;"	m	struct:Dynamics::Config	file:
buoyancy_center	cola2_core/cola2_sim/src/dynamics_node.cpp	/^    Eigen::Vector3d buoyancy_center;$/;"	m	struct:Dynamics::Config	file:
bytes	cola2_core/cola2_comms/include/cppystruct/data_view.h	/^  T* bytes;$/;"	m	struct:pystruct::data_view
c	cola2_core/cola2_safety/test/test_common.cpp	/^  bool c;$/;"	m	class:Common	file:
cage_center_east_	cola2_core/cola2_safety/src/virtual_cage_node.cpp	/^  double cage_center_north_, cage_center_east_, cage_radius_;$/;"	m	class:VirtualCage	file:
cage_center_north_	cola2_core/cola2_safety/src/virtual_cage_node.cpp	/^  double cage_center_north_, cage_center_east_, cage_radius_;$/;"	m	class:VirtualCage	file:
cage_marker_	cola2_core/cola2_safety/src/virtual_cage_node.cpp	/^  visualization_msgs::Marker cage_marker_;$/;"	m	class:VirtualCage	file:
cage_radius_	cola2_core/cola2_safety/src/virtual_cage_node.cpp	/^  double cage_center_north_, cage_center_east_, cage_radius_;$/;"	m	class:VirtualCage	file:
calcsize	cola2_core/cola2_comms/include/cppystruct/calcsize.h	/^constexpr size_t calcsize(Fmt)$/;"	f	namespace:pystruct
callAction	cola2_core/cola2_control/src/captain_node.cpp	/^void Captain::callAction(const bool is_trigger, const std::string& action_id,$/;"	f	class:Captain
callServiceAndWaitForIdle	cola2_lib_ros/include/cola2_lib_ros/captain_helper.h	/^bool callServiceAndWaitForIdle(ros::NodeHandle& nh, TSrv& srv, const TReq& req, TRes& res)$/;"	f	namespace:cola2::rosutils
callServiceAndWaitForIdle	cola2_lib_ros/python/cola2_ros/captain_helper.py	/^def callServiceAndWaitForIdle(srv, req, res):$/;"	f
callServiceHelper	cola2_core/cola2_safety/src/safety_supervisor_node.cpp	/^callServiceHelper(ros::NodeHandle* nh_ptr, const std::string& srv_name)$/;"	f
callServiceHelper	cola2_lib_ros/include/cola2_lib_ros/serviceclient_helper.h	/^void callServiceHelper(TSrv* srv, const TReq* req, TRes* res, bool* success, cola2::utils::ThreadSafeFlag* done)$/;"	f	namespace:cola2::ros
callServiceWithErrorLevel	cola2_core/cola2_safety/test/test_manual_rule.cpp	/^callServiceWithErrorLevel(ros::NodeHandle* nh_ptr, const std::uint16_t& level)$/;"	f
callServiceWithTimeout	cola2_lib_ros/include/cola2_lib_ros/serviceclient_helper.h	/^bool callServiceWithTimeout(::ros::NodeHandle& nh, typename TSrv::Request& req, typename TSrv::Response& res,$/;"	f	namespace:cola2::ros
callServiceWithTimeout	cola2_lib_ros/include/cola2_lib_ros/serviceclient_helper.h	/^bool callServiceWithTimeout(TSrv& srv, const TReq& req, TRes& res, bool& success, double timeout)$/;"	f	namespace:cola2::ros
callTriggerService	cola2_core/cola2_control/src/captain_node.cpp	/^bool Captain::callTriggerService(const std::string& srv_name, const double timeout, const double wait_time)$/;"	f	class:Captain
callback	cola2_lib_ros/python/cola2_ros/captain_helper.py	/^    def callback(self, captain_status):$/;"	m	class:WaitForIdleHelper
cameraMsgPrototypes	stonefish_ros/include/stonefish_ros/ROSSimulationManager.h	/^		std::map<std::string, std::pair<sensor_msgs::ImagePtr, sensor_msgs::CameraInfoPtr>> cameraMsgPrototypes;$/;"	m	class:sf::ROSSimulationManager
cancelPilotActionlib	cola2_core/cola2_control/src/captain_node.cpp	/^void Captain::cancelPilotActionlib()$/;"	f	class:Captain
captainStateFeedbackCallback	cola2_core/cola2_safety/src/cola2_safety/safety_rules/captain.cpp	/^Captain::captainStateFeedbackCallback(const cola2_msgs::CaptainStateFeedback& msg)$/;"	f	class:SafetyRules::Captain
captainStatusCallback	cola2_core/cola2_safety/src/cola2_safety/safety_rules/teleoperation.cpp	/^Teleoperation::captainStatusCallback(const cola2_msgs::CaptainStatus& msg)$/;"	f	class:SafetyRules::Teleoperation
captainStatusCallback	cola2_core/cola2_safety/src/safety_supervisor_node.cpp	/^SafetySupervisor::captainStatusCallback(const cola2_msgs::CaptainStatus& msg)$/;"	f	class:SafetySupervisor
cbkCustomInput	cola2_core/cola2_comms/src/comms_node.cpp	/^void CommsNode::cbkCustomInput(const std_msgs::String &msg)$/;"	f	class:CommsNode
cbkElapsedTime	cola2_core/cola2_comms/src/comms_node.cpp	/^void CommsNode::cbkElapsedTime(const std_msgs::Int32 &msg)$/;"	f	class:CommsNode
cbkFromModem	cola2_core/cola2_comms/src/comms_node.cpp	/^void CommsNode::cbkFromModem(const std_msgs::String &msg)$/;"	f	class:CommsNode
cbkNavigation	cola2_core/cola2_comms/src/comms_node.cpp	/^void CommsNode::cbkNavigation(const cola2_msgs::NavSts &msg)$/;"	f	class:CommsNode
cbkSafetyStatus	cola2_core/cola2_comms/src/comms_node.cpp	/^void CommsNode::cbkSafetyStatus(const cola2_msgs::SafetySupervisorStatus &msg)$/;"	f	class:CommsNode
cbrt	cola2_lib/src/cola2_lib/utils/ned.cpp	/^double NED::NED::cbrt(const double x) const$/;"	f	class:cola2::utils::NED::NED
charSizeFromInteger	cola2_lib/src/cola2_lib/io/serial_port.cpp	/^ECharacterSize SerialPort::charSizeFromInteger(const unsigned int charSize)$/;"	f	class:cola2::io::SerialPort
charge_	cola2_core/cola2_safety/include/cola2_safety/safety_rules/battery_level.h	/^  double charge_, voltage_, min_charge_, min_voltage_;$/;"	m	class:SafetyRules::BatteryLevel
checkActuatorsCallback	cola2_core/cola2_sim/src/dynamics_node.cpp	/^void Dynamics::checkActuatorsCallback(const ros::TimerEvent&)$/;"	f	class:Dynamics
checkDataTypeNames	cola2_core/cola2_safety/test/test_common.cpp	/^Common::checkDataTypeNames()$/;"	f	class:Common
checkDiagnostics	cola2_core/cola2_control/src/cola2_control/ros_controller/auv_ros_controller.cpp	/^void IAUVROSController::checkDiagnostics(const ros::TimerEvent& event)$/;"	f	class:IAUVROSController
checkDiagnostics	cola2_core/cola2_nav/src/cola2_nav/ekf_base_ros.cpp	/^void EKFBaseROS::checkDiagnostics(const ros::TimerEvent& e)$/;"	f	class:EKFBaseROS
checkIntegrity	cola2_core/cola2_nav/src/cola2_nav/ekf_base.cpp	/^void EKFBase::checkIntegrity()$/;"	f	class:EKFBase
check_battery_housing_	cola2_core/cola2_safety/include/cola2_safety/safety_rules/combined_water_inside.h	/^  bool check_battery_housing_;$/;"	m	class:SafetyRules::CombinedWaterInside
check_diagnostics_	cola2_core/cola2_control/include/cola2_control/ros_controller/auv_ros_controller_base.h	/^  ros::Timer check_diagnostics_;$/;"	m	class:IAUVROSController
check_extra_housing_	cola2_core/cola2_safety/include/cola2_safety/safety_rules/combined_water_inside.h	/^  bool check_extra_housing_;$/;"	m	class:SafetyRules::CombinedWaterInside
check_map_ack	cola2_core/cola2_control/src/teleoperation_node.py	/^    def check_map_ack(self, event):$/;"	m	class:Teleoperation
check_reset_keep_position	cola2_core/cola2_control/src/teleoperation_node.py	/^    def check_reset_keep_position(self, event):$/;"	m	class:Teleoperation
checksum	cola2_lib/python/cola2/io/nmea_parser.py	/^    def checksum(self, data):$/;"	m	class:NMEAParser
checksum	cola2_lib/src/cola2_lib/io/nmea_parser.cpp	/^std::string NMEAParser::checksum(std::string s) const$/;"	f	class:NMEAParser
close	cola2_lib/src/cola2_lib/io/serial_port.cpp	/^void SerialPort::close()$/;"	f	class:cola2::io::SerialPort
close	cola2_lib/src/cola2_lib/io/tcp_socket.cpp	/^void TcpSocket::close()$/;"	f	class:cola2::io::TcpSocket
cola2	cola2_lib/include/cola2_lib/io/io_base.h	/^namespace cola2$/;"	n
cola2	cola2_lib/include/cola2_lib/io/serial_port.h	/^namespace cola2$/;"	n
cola2	cola2_lib/include/cola2_lib/io/tcp_socket.h	/^namespace cola2$/;"	n
cola2	cola2_lib/include/cola2_lib/io/udp_socket.h	/^namespace cola2$/;"	n
cola2	cola2_lib/include/cola2_lib/utils/angles.h	/^namespace cola2$/;"	n
cola2	cola2_lib/include/cola2_lib/utils/filesystem.h	/^namespace cola2$/;"	n
cola2	cola2_lib/include/cola2_lib/utils/ned.h	/^namespace cola2$/;"	n
cola2	cola2_lib/include/cola2_lib/utils/pressure.h	/^namespace cola2$/;"	n
cola2	cola2_lib/include/cola2_lib/utils/saturate.h	/^namespace cola2$/;"	n
cola2	cola2_lib/include/cola2_lib/utils/thread_safe_flag.h	/^namespace cola2$/;"	n
cola2	cola2_lib/src/cola2_lib/io/io_base.cpp	/^namespace cola2$/;"	n	file:
cola2	cola2_lib/src/cola2_lib/io/serial_port.cpp	/^namespace cola2$/;"	n	file:
cola2	cola2_lib/src/cola2_lib/io/tcp_socket.cpp	/^namespace cola2$/;"	n	file:
cola2	cola2_lib/src/cola2_lib/io/udp_socket.cpp	/^namespace cola2$/;"	n	file:
cola2	cola2_lib/src/cola2_lib/utils/angles.cpp	/^namespace cola2$/;"	n	file:
cola2	cola2_lib/src/cola2_lib/utils/ned.cpp	/^namespace cola2$/;"	n	file:
cola2	cola2_lib/src/cola2_lib/utils/thread_safe_flag.cpp	/^namespace cola2$/;"	n	file:
cola2	cola2_lib_ros/include/cola2_lib_ros/captain_helper.h	/^namespace cola2$/;"	n
cola2	cola2_lib_ros/include/cola2_lib_ros/diagnostic_helper.h	/^namespace cola2$/;"	n
cola2	cola2_lib_ros/include/cola2_lib_ros/param_loader.h	/^namespace cola2$/;"	n
cola2	cola2_lib_ros/include/cola2_lib_ros/serviceclient_helper.h	/^namespace cola2$/;"	n
cola2	cola2_lib_ros/include/cola2_lib_ros/setpoints_selector.h	/^namespace cola2$/;"	n
cola2	cola2_lib_ros/include/cola2_lib_ros/this_node.h	/^namespace cola2$/;"	n
cola2	cola2_lib_ros/include/cola2_lib_ros/transform_handler.h	/^namespace cola2$/;"	n
cola2	cola2_lib_ros/src/cola2_lib_ros/captain_helper.cpp	/^namespace cola2$/;"	n	file:
cola2	cola2_lib_ros/src/cola2_lib_ros/diagnostic_helper.cpp	/^namespace cola2$/;"	n	file:
cola2	cola2_lib_ros/src/cola2_lib_ros/setpoints_selector.cpp	/^namespace cola2$/;"	n	file:
combineLowerPriorityRequest	cola2_core/cola2_control/src/cola2_control/low_level_controllers/request.cpp	/^void Request::combineLowerPriorityRequest(const Request& lower)$/;"	f	class:Request
combineRequest	cola2_core/cola2_control/src/cola2_control/low_level_controllers/request.cpp	/^void Request::combineRequest(const Request& req)$/;"	f	class:Request
combineRequest	cola2_core/cola2_control/src/cola2_control/low_level_controllers/request.cpp	/^void Request::combineRequest(const Request& req, std::string mode)$/;"	f	class:Request
combineSamePriorityRequest	cola2_core/cola2_control/src/cola2_control/low_level_controllers/request.cpp	/^void Request::combineSamePriorityRequest(const Request& req, std::string mode)$/;"	f	class:Request
compute	cola2_core/cola2_control/src/cola2_control/controllers/anchor.cpp	/^void AnchorController::compute(const control::State& current_state, const control::Request& request,$/;"	f	class:AnchorController
compute	cola2_core/cola2_control/src/cola2_control/controllers/holonomic_keep_position.cpp	/^void HolonomicKeepPositionController::compute(const control::State& current_state, const control::Request& request,$/;"	f	class:HolonomicKeepPositionController
compute	cola2_core/cola2_control/src/cola2_control/controllers/section.cpp	/^void SectionController::compute(const control::State& current_state, const control::Request& request,$/;"	f	class:SectionController
compute	cola2_core/cola2_control/src/cola2_control/low_level_controllers/controller_base.cpp	/^double IController::compute(double, double, double)$/;"	f	class:IController
compute	cola2_core/cola2_control/src/cola2_control/low_level_controllers/ndof_controller.cpp	/^std::vector<double> NDofController::compute(double time_in_sec, Request req, std::vector<double> feedback)$/;"	f	class:NDofController
compute	cola2_core/cola2_control/src/cola2_control/low_level_controllers/only_thruster_allocator.cpp	/^Eigen::VectorXd OnlyThrusterAllocator::compute(const Request& wrench_req)$/;"	f	class:OnlyThrusterAllocator
compute	cola2_core/cola2_control/src/cola2_control/low_level_controllers/pid.cpp	/^double PID::compute(double time_in_sec, double setpoint, double feedback)$/;"	f	class:PID
compute	cola2_core/cola2_control/src/cola2_control/low_level_controllers/poly.cpp	/^double Poly::compute(double, double setpoint, double)$/;"	f	class:Poly
computeError	cola2_core/cola2_control/src/cola2_control/low_level_controllers/only_thrusters_controller.cpp	/^std::vector<double> OnlyThrustersController::computeError(const std::vector<double> setpoint,$/;"	f	class:OnlyThrustersController
computeFinsForce	cola2_core/cola2_sim/src/dynamics_node.cpp	/^Eigen::Vector6d Dynamics::computeFinsForce(const Eigen::Vector2d& fins, const Eigen::Vector6d& vel)$/;"	f	class:Dynamics
computeFrequency	cola2_lib_ros/src/cola2_lib_ros/diagnostic_helper.cpp	/^DiagnosticHelper::computeFrequency(const double now)$/;"	f	class:cola2::ros::DiagnosticHelper
computeMagneticDeclination	cola2_lib/src/cola2_lib/wmm/magnetic_declination.cpp	/^double computeMagneticDeclination(const double latitude, const double longitude, const int year, const int month,$/;"	f
computeMagneticDeclination	cola2_lib/src/cola2_lib/wmmc/magnetic_declination.c	/^int computeMagneticDeclination(double *declination, const double latitude, const double longitude, const int year,$/;"	f
computeMagneticDeclinationDeg	cola2_lib/src/cola2_lib/wmm/magnetic_declination.cpp	/^double computeMagneticDeclinationDeg(const double latitude, const double longitude, const int year, const int month,$/;"	f
computeMagneticDeclinationDeg	cola2_lib/src/cola2_lib/wmmc/magnetic_declination.c	/^int computeMagneticDeclinationDeg(double *declination, const double latitude, const double longitude, const int year,$/;"	f
computePredictionMatrices	cola2_core/cola2_nav/src/cola2_nav/ekf_position_velocity.cpp	/^void EKFPositionVelocity::computePredictionMatrices(const double dt)$/;"	f	class:EKFPositionVelocity
computePredictionMatrices	cola2_core/cola2_nav/src/cola2_nav/ekf_surface_2d.cpp	/^void EKFSurface2D::computePredictionMatrices(const double dt)$/;"	f	class:EKFSurface2D
computeThrusterAllocator	cola2_core/cola2_control/src/cola2_control/low_level_controllers/only_thrusters_controller.cpp	/^void OnlyThrustersController::computeThrusterAllocator()$/;"	f	class:OnlyThrustersController
computeThrustersForce	cola2_core/cola2_sim/src/dynamics_node.cpp	/^Eigen::Vector6d Dynamics::computeThrustersForce(const Eigen::VectorXd& u)$/;"	f	class:Dynamics
computeTimeoutAndDistance	cola2_core/cola2_control/src/captain_node.cpp	/^void Captain::computeTimeoutAndDistance(const cola2_msgs::PilotGoal& actionlib_request, double& timeout,$/;"	f	class:Captain
condition	cola2_lib/include/cola2_lib/utils/thread_pool.h	/^  std::condition_variable condition;$/;"	m	class:ThreadPool
config_	cola2_core/cola2_comms/src/comms_node.cpp	/^  Config config_;  \/\/!< configuration params$/;"	m	class:CommsNode	file:
config_	cola2_core/cola2_control/include/cola2_control/controllers/anchor.h	/^  AnchorControllerConfig config_;$/;"	m	class:AnchorController
config_	cola2_core/cola2_control/include/cola2_control/controllers/holonomic_keep_position.h	/^  HolonomicKeepPositionControllerConfig config_;$/;"	m	class:HolonomicKeepPositionController
config_	cola2_core/cola2_control/include/cola2_control/controllers/section.h	/^  SectionControllerConfig config_;$/;"	m	class:SectionController
config_	cola2_core/cola2_control/src/captain_node.cpp	/^  } config_;$/;"	m	class:Captain	typeref:struct:Captain::__anon3	file:
config_	cola2_core/cola2_control/src/pilot_node.cpp	/^  } config_;$/;"	m	class:Pilot	typeref:struct:Pilot::__anon4	file:
config_	cola2_core/cola2_nav/include/cola2_nav/ekf_base_ros.h	/^  Config config_;  \/\/!< config loaded by getConfig()$/;"	m	class:EKFBaseROS
config_	cola2_core/cola2_sim/src/dynamics_node.cpp	/^  } config_;$/;"	m	class:Dynamics	typeref:struct:Dynamics::Config	file:
config_	cola2_lib/include/cola2_lib/io/serial_port.h	/^  cola2::io::SPConfig config_;                   \/\/!< Structure to hold the configuration of the serial port.$/;"	m	class:cola2::io::SerialPort
config_	cola2_lib/include/cola2_lib/io/tcp_socket.h	/^  TCPConfig config_;                     \/\/!< Structure to hold the configuration of the TCP socket$/;"	m	class:cola2::io::TcpSocket
configure	cola2_lib/src/cola2_lib/io/serial_port.cpp	/^void SerialPort::configure()$/;"	f	class:cola2::io::SerialPort
connectToService	cola2_lib_ros/include/cola2_lib_ros/serviceclient_helper.h	/^::ros::ServiceClient connectToService(::ros::NodeHandle& nh, const std::string& srv_name, const double wait = 1.0)$/;"	f	namespace:cola2::ros
connect_to_service	cola2_lib_ros/python/cola2_ros/service_helper.py	/^def connect_to_service(srv_name, srv_type, wait=1.0):$/;"	f
consumeNumber	cola2_core/cola2_comms/include/cppystruct/string.h	/^constexpr std::pair<size_t, size_t> consumeNumber(const char (&str)[Size], size_t offset)$/;"	f	namespace:pystruct::internal
control	cola2_core/cola2_control/include/cola2_control/controllers/types.h	/^namespace control$/;"	n
controlled_surface_depth	cola2_core/cola2_control/src/captain_node.cpp	/^    double controlled_surface_depth;$/;"	m	struct:Captain::__anon3	file:
controller_max_velocity_z	cola2_core/cola2_control/src/captain_node.cpp	/^    double controller_max_velocity_z;$/;"	m	struct:Captain::__anon3	file:
controller_type	cola2_core/cola2_control/include/cola2_control/controllers/types.h	/^  std::uint64_t controller_type;$/;"	m	class:control::Request
controllers_	cola2_core/cola2_control/include/cola2_control/low_level_controllers/ndof_controller.h	/^  std::vector<std::shared_ptr<IController> > controllers_;$/;"	m	class:NDofController
convert	cola2_core/cola2_comms/include/cppystruct/pack.h	/^constexpr RepType convert(const T& val)$/;"	f	namespace:pystruct::internal
copy	cola2_lib/python/cola2/mission/mission_types.py	/^    def copy(self, mission):$/;"	m	class:Mission
copy	cola2_lib/python/cola2/mission/mission_types_v1.py	/^    def copy(self, mission):$/;"	m	class:Mission
copy	cola2_lib/python/cola2/mission/mission_types_v1.py	/^    def copy(self, position):$/;"	m	class:MissionPosition
copy	cola2_lib/python/cola2/mission/mission_types_v1.py	/^    def copy(self, tolerance):$/;"	m	class:MissionTolerance
copyright	cola2_lib/doc/conf.py	/^copyright = f'{now.year}, iquarobotics'$/;"	v
copyright	cola2_lib_ros/doc/conf.py	/^copyright = '{}, iquarobotics'.format(now.year)$/;"	v
copyright	stonefish_ros/docs/conf.py	/^copyright = u'2021, Patryk Cieślak'$/;"	v
coriolisMatrix	cola2_core/cola2_sim/src/dynamics_node.cpp	/^Eigen::Matrix6d Dynamics::coriolisMatrix(const Eigen::Vector6d& vel)$/;"	f	class:Dynamics
cos_mlambda	cola2_lib/include/cola2_lib/wmmc/GeomagnetismHeader.h	/^    double *cos_mlambda; \/*cp(m)  - cosine of (m*spherical coord. longitude)*\/$/;"	m	struct:__anon20
countItems	cola2_core/cola2_comms/include/cppystruct/format.h	/^constexpr size_t countItems(Fmt)$/;"	f	namespace:pystruct
createDirectory	cola2_lib/src/cola2_lib/utils/filesystem.cpp	/^void cola2::utils::createDirectory(const std::string& path)$/;"	f	class:cola2::utils
createMessage	cola2_core/cola2_safety/src/cola2_safety/safety_rules/common.cpp	/^SafetyRuleBaseClass::createMessage(const std::string& input_message)$/;"	f	class:SafetyRules::SafetyRuleBaseClass
createPathFromMission	cola2_core/cola2_control/src/captain_node.cpp	/^nav_msgs::Path Captain::createPathFromMission(Mission mission)$/;"	f	class:Captain
crossMatrix	cola2_core/cola2_sim/src/dynamics_node.cpp	/^Eigen::Matrix3d crossMatrix(const Eigen::Vector3d& x)$/;"	f
cross_product_matrix	cola2_lib/src/cola2_lib/utils/angles.cpp	/^Eigen::Matrix3d cross_product_matrix(const Eigen::Vector3d &abc)$/;"	f	namespace:cola2::utils
cross_track_error	cola2_core/cola2_control/include/cola2_control/controllers/types.h	/^  double cross_track_error;$/;"	m	class:control::Feedback
currentCallback	cola2_core/cola2_sim/src/dynamics_node.cpp	/^void Dynamics::currentCallback(const geometry_msgs::Vector3Stamped& msg)$/;"	f	class:Dynamics
current_	cola2_core/cola2_sim/src/dynamics_node.cpp	/^  Eigen::Vector3d current_;$/;"	m	class:Dynamics	file:
current_state_	cola2_core/cola2_control/src/pilot_node.cpp	/^  control::State current_state_;$/;"	m	class:Pilot	file:
current_step	cola2_core/cola2_control/src/captain_node.cpp	/^    std::size_t current_step;$/;"	m	struct:Captain::MissionWithState	file:
current_step_	cola2_core/cola2_safety/include/cola2_safety/safety_rules/captain.h	/^  std::uint32_t current_step_;$/;"	m	class:SafetyRules::Captain
custom_	cola2_core/cola2_comms/src/comms_node.cpp	/^  std::string custom_ = "";                               \/\/!< custom extra message received$/;"	m	class:CommsNode	file:
custom_max_time	cola2_core/cola2_comms/src/comms_node.cpp	/^    double custom_max_time;       \/\/!< max time since last custom input reception to still send it$/;"	m	struct:CommsNode::Config	file:
custom_time_	cola2_core/cola2_comms/src/comms_node.cpp	/^  double custom_time_ = ros::Time::now().toSec();         \/\/!< time of last custom message$/;"	m	class:CommsNode	file:
cv_	cola2_lib/include/cola2_lib/utils/thread_safe_flag.h	/^  std::condition_variable cv_;$/;"	m	class:cola2::utils::ThreadSafeFlag
dPcup	cola2_lib/include/cola2_lib/wmmc/GeomagnetismHeader.h	/^    double *dPcup; \/* Derivative of Legendre fcn *\/$/;"	m	struct:__anon18
d_rotation_d_pitch	cola2_lib/src/cola2_lib/utils/angles.cpp	/^Eigen::Matrix3d d_rotation_d_pitch(const Eigen::Vector3d &rpy)$/;"	f	namespace:cola2::utils
d_rotation_d_roll	cola2_lib/src/cola2_lib/utils/angles.cpp	/^Eigen::Matrix3d d_rotation_d_roll(const Eigen::Vector3d &rpy)$/;"	f	namespace:cola2::utils
d_rotation_d_yaw	cola2_lib/src/cola2_lib/utils/angles.cpp	/^Eigen::Matrix3d d_rotation_d_yaw(const Eigen::Vector3d &rpy)$/;"	f	namespace:cola2::utils
damping	cola2_core/cola2_sim/src/dynamics_node.cpp	/^    Eigen::Vector6d damping;$/;"	m	struct:Dynamics::Config	file:
dampingMatrix	cola2_core/cola2_sim/src/dynamics_node.cpp	/^Eigen::Matrix6d Dynamics::dampingMatrix(const Eigen::Vector6d& vel)$/;"	f	class:Dynamics
data	cola2_core/cola2_comms/include/cppystruct/data_view.h	/^namespace data$/;"	n	namespace:pystruct
dataTypeToString	cola2_core/cola2_safety/src/cola2_safety/safety_rules/common.cpp	/^SafetyRuleBaseClass::dataTypeToString(const DataType& data_type)$/;"	f	class:SafetyRules::SafetyRuleBaseClass
data_view	cola2_core/cola2_comms/include/cppystruct/data_view.h	/^  constexpr data_view(T* b, bool bigEndian) : isBigEndian(bigEndian), bytes(b)$/;"	f	struct:pystruct::data_view
data_view	cola2_core/cola2_comms/include/cppystruct/data_view.h	/^struct data_view$/;"	s	namespace:pystruct
declination_	cola2_core/cola2_nav/include/cola2_nav/ekf_base_ros.h	/^    double declination_;    \/\/!< declination of the heading measurements$/;"	m	struct:EKFBaseROS::Config
degreeMinutesToDegrees	cola2_lib/src/cola2_lib/utils/angles.cpp	/^double degreeMinutesToDegrees(const double degree_minutes, const char hemisphere)$/;"	f	namespace:cola2::utils
degreeMinutesToDegreesInt	cola2_lib/src/cola2_lib/utils/angles.cpp	/^double degreeMinutesToDegreesInt(const double degree_minutes, const int hemisphere)$/;"	f	namespace:cola2::utils
degree_minutes_to_degrees	cola2_lib/python/cola2/utils/angles.py	/^def degree_minutes_to_degrees(lat, lon):$/;"	f
degreesToRadians	cola2_lib/src/cola2_lib/utils/angles.cpp	/^double degreesToRadians(const double degrees)$/;"	f	namespace:cola2::utils
degrees_to_degree_minute_seconds	cola2_lib/python/cola2/utils/angles.py	/^def degrees_to_degree_minute_seconds(lat, lon):$/;"	f
degrees_to_degree_minutes	cola2_lib/python/cola2/utils/angles.py	/^def degrees_to_degree_minutes(lat, lon):$/;"	f
deleteFile	cola2_lib/src/cola2_lib/utils/filesystem.cpp	/^void cola2::utils::deleteFile(const std::string& path)$/;"	f	class:cola2::utils
deleteLoadedMission	cola2_core/cola2_control/src/captain_node.cpp	/^bool Captain::deleteLoadedMission(const std::string& mission_name)$/;"	f	class:Captain
delta	cola2_core/cola2_control/include/cola2_control/controllers/section.h	/^  double delta;$/;"	m	struct:__anon6
depth	cola2_core/cola2_control/include/cola2_control/controllers/types.h	/^  double depth;$/;"	m	class:control::NED
depth	cola2_core/cola2_control/include/cola2_control/controllers/types.h	/^  double depth;$/;"	m	class:control::Nav
depth_data_timeout_	cola2_core/cola2_safety/include/cola2_safety/safety_rules/navigator.h	/^  double depth_data_timeout_;$/;"	m	class:SafetyRules::Navigator
depth_sensor_offset_	cola2_core/cola2_nav/include/cola2_nav/ekf_base_ros.h	/^    double depth_sensor_offset_;            \/\/!< manually\/computed set depth sensor offset value$/;"	m	struct:EKFBaseROS::Config
derivative_term_from_feedback_	cola2_core/cola2_control/include/cola2_control/low_level_controllers/pid.h	/^  bool derivative_term_from_feedback_;$/;"	m	class:PID
diag_help_	cola2_core/cola2_comms/src/comms_node.cpp	/^  cola2::ros::DiagnosticHelper diag_help_;  \/\/!< to create diagnostics$/;"	m	class:CommsNode	file:
diag_help_	cola2_core/cola2_nav/include/cola2_nav/ekf_base_ros.h	/^  cola2::ros::DiagnosticHelper diag_help_;    \/\/!< ease publishing diagnostics$/;"	m	class:EKFBaseROS
diagnostic_	cola2_core/cola2_control/include/cola2_control/ros_controller/auv_ros_controller_base.h	/^  cola2::ros::DiagnosticHelper diagnostic_;$/;"	m	class:IAUVROSController
diagnostic_	cola2_core/cola2_control/src/captain_node.cpp	/^  cola2::ros::DiagnosticHelper diagnostic_;$/;"	m	class:Captain	file:
diagnostic_	cola2_core/cola2_control/src/pilot_node.cpp	/^  cola2::ros::DiagnosticHelper diagnostic_;$/;"	m	class:Pilot	file:
diagnostic_	cola2_core/cola2_safety/src/safe_depth_altitude_node.cpp	/^  cola2::ros::DiagnosticHelper diagnostic_;$/;"	m	class:SafeDepthAltitude	file:
diagnostic_	cola2_core/cola2_safety/src/safety_supervisor_checker_node.cpp	/^  cola2::ros::DiagnosticHelper diagnostic_;$/;"	m	class:SafetySupervisorChecker	file:
diagnostic_	cola2_core/cola2_safety/src/virtual_cage_node.cpp	/^  cola2::ros::DiagnosticHelper diagnostic_;$/;"	m	class:VirtualCage	file:
diagnostic_	cola2_core/cola2_safety/src/watchdog_timer_node.cpp	/^  cola2::ros::DiagnosticHelper diagnostic_;$/;"	m	class:WatchdogTimer	file:
diagnostic_bat_	cola2_core/cola2_sim/src/sim_internal_sensors_node.cpp	/^  cola2::ros::DiagnosticHelper diagnostic_bat_, diagnostic_bat_cylinder_, diagnostic_pc_cylinder_;$/;"	m	class:SimInternalSensors	file:
diagnostic_bat_cylinder_	cola2_core/cola2_sim/src/sim_internal_sensors_node.cpp	/^  cola2::ros::DiagnosticHelper diagnostic_bat_, diagnostic_bat_cylinder_, diagnostic_pc_cylinder_;$/;"	m	class:SimInternalSensors	file:
diagnostic_msg_	cola2_lib_ros/include/cola2_lib_ros/diagnostic_helper.h	/^  diagnostic_msgs::DiagnosticArray diagnostic_msg_;  \/\/!< Diagnostic message to publish.$/;"	m	class:cola2::ros::DiagnosticHelper
diagnostic_pc_cylinder_	cola2_core/cola2_sim/src/sim_internal_sensors_node.cpp	/^  cola2::ros::DiagnosticHelper diagnostic_bat_, diagnostic_bat_cylinder_, diagnostic_pc_cylinder_;$/;"	m	class:SimInternalSensors	file:
diagnostic_pub_	cola2_lib_ros/include/cola2_lib_ros/diagnostic_helper.h	/^  ::ros::Publisher diagnostic_pub_;                  \/\/!< Diagnostic publisher.$/;"	m	class:cola2::ros::DiagnosticHelper
diagnostic_status_name_	cola2_core/cola2_safety/include/cola2_safety/safety_rules/temperature.h	/^  std::string diagnostic_status_name_;$/;"	m	class:SafetyRules::Temperature
diagnostic_status_names_to_check_	cola2_core/cola2_safety/include/cola2_safety/safety_rules/check_enabled.h	/^  std::vector<std::string> diagnostic_status_names_to_check_;$/;"	m	class:SafetyRules::CheckEnabled
diagnostics	cola2_core/cola2_log/src/param_logger_node.py	/^    def diagnostics(self, event):$/;"	m	class:ParamLoggerNode
diagnosticsCallback	cola2_core/cola2_safety/src/safety_supervisor_node.cpp	/^SafetySupervisor::diagnosticsCallback(const diagnostic_msgs::DiagnosticArray& msg)$/;"	f	class:SafetySupervisor
diagnosticsTimer	cola2_core/cola2_control/src/captain_node.cpp	/^void Captain::diagnosticsTimer(const ros::TimerEvent& event)$/;"	f	class:Captain
diagnosticsTimer	cola2_core/cola2_control/src/pilot_node.cpp	/^void Pilot::diagnosticsTimer(const ros::TimerEvent& event)$/;"	f	class:Pilot
diagnosticsTimer	cola2_core/cola2_safety/src/safe_depth_altitude_node.cpp	/^SafeDepthAltitude::diagnosticsTimer(const ros::TimerEvent& event)$/;"	f	class:SafeDepthAltitude
diagnosticsUpdate	cola2_core/cola2_safety/src/cola2_safety/safety_rules/common.cpp	/^SafetyRuleBaseClass::diagnosticsUpdate(const diagnostic_msgs::DiagnosticArray& msg)$/;"	f	class:SafetyRules::SafetyRuleBaseClass
diagnostics_timer_	cola2_core/cola2_control/src/captain_node.cpp	/^  ros::Timer diagnostics_timer_;$/;"	m	class:Captain	file:
diagnostics_timer_	cola2_core/cola2_control/src/pilot_node.cpp	/^  ros::Timer diagnostics_timer_;$/;"	m	class:Pilot	file:
diagnostics_timer_	cola2_core/cola2_safety/src/safe_depth_altitude_node.cpp	/^  ros::Timer diagnostics_timer_;$/;"	m	class:SafeDepthAltitude	file:
disableAllAndSetIdleSrv	cola2_core/cola2_control/src/captain_node.cpp	/^bool Captain::disableAllAndSetIdleSrv(ros::ServiceEvent<std_srvs::Trigger::Request,$/;"	f	class:Captain
disableAllKeepPositionsSrv	cola2_core/cola2_control/src/captain_node.cpp	/^bool Captain::disableAllKeepPositionsSrv(std_srvs::Trigger::Request& req, std_srvs::Trigger::Response& res)$/;"	f	class:Captain
disableExternalMissionSrv	cola2_core/cola2_control/src/captain_node.cpp	/^bool Captain::disableExternalMissionSrv($/;"	f	class:Captain
disableGotoSrv	cola2_core/cola2_control/src/captain_node.cpp	/^bool Captain::disableGotoSrv(std_srvs::Trigger::Request&, std_srvs::Trigger::Response& res)$/;"	f	class:Captain
disableKeepPositionSrv	cola2_core/cola2_control/src/captain_node.cpp	/^bool Captain::disableKeepPositionSrv(std_srvs::Trigger::Request&, std_srvs::Trigger::Response& res)$/;"	f	class:Captain
disableMissionHelper	cola2_core/cola2_control/src/captain_node.cpp	/^void Captain::disableMissionHelper()$/;"	f	class:Captain
disableMissionSrv	cola2_core/cola2_control/src/captain_node.cpp	/^bool Captain::disableMissionSrv(cola2_msgs::Mission::Request& req, cola2_msgs::Mission::Response& res)$/;"	f	class:Captain
disableNoAltitudeGoesUpCallback	cola2_core/cola2_safety/src/safe_depth_altitude_node.cpp	/^SafeDepthAltitude::disableNoAltitudeGoesUpCallback(std_srvs::Trigger::Request&, std_srvs::Trigger::Response& res)$/;"	f	class:SafeDepthAltitude
disablePoseController	cola2_core/cola2_control/src/cola2_control/ros_controller/auv_ros_controller.cpp	/^bool IAUVROSController::disablePoseController(std_srvs::Trigger::Request&, std_srvs::Trigger::Response& res)$/;"	f	class:IAUVROSController
disableSafetyKeepPositionSrv	cola2_core/cola2_control/src/captain_node.cpp	/^bool Captain::disableSafetyKeepPositionSrv(std_srvs::Trigger::Request&, std_srvs::Trigger::Response& res)$/;"	f	class:Captain
disableSectionSrv	cola2_core/cola2_control/src/captain_node.cpp	/^bool Captain::disableSectionSrv(std_srvs::Trigger::Request&, std_srvs::Trigger::Response& res)$/;"	f	class:Captain
disableThrusterAllocator	cola2_core/cola2_control/src/cola2_control/ros_controller/auv_ros_controller.cpp	/^bool IAUVROSController::disableThrusterAllocator(std_srvs::Trigger::Request&, std_srvs::Trigger::Response& res)$/;"	f	class:IAUVROSController
disableVelocityController	cola2_core/cola2_control/src/cola2_control/ros_controller/auv_ros_controller.cpp	/^bool IAUVROSController::disableVelocityController(std_srvs::Trigger::Request&, std_srvs::Trigger::Response& res)$/;"	f	class:IAUVROSController
disable_all_and_set_idle_	cola2_core/cola2_control/src/captain_node.cpp	/^  ros::ServiceServer disable_all_and_set_idle_;$/;"	m	class:Captain	file:
disable_all_keep_positions_srv_	cola2_core/cola2_control/src/captain_node.cpp	/^  ros::ServiceServer disable_all_keep_positions_srv_;$/;"	m	class:Captain	file:
disable_axis	cola2_core/cola2_control/include/cola2_control/controllers/types.h	/^  control::Vector6d disable_axis;$/;"	m	class:control::Pose
disable_axis	cola2_core/cola2_control/include/cola2_control/controllers/types.h	/^  control::Vector6d disable_axis;$/;"	m	struct:control::Velocity
disable_external_mission_srv_	cola2_core/cola2_control/src/captain_node.cpp	/^  ros::ServiceServer disable_external_mission_srv_;$/;"	m	class:Captain	file:
disable_fin_allocator_srv_	cola2_core/cola2_control/include/cola2_control/ros_controller/auv_ros_controller_base.h	/^  ros::ServiceServer disable_fin_allocator_srv_;$/;"	m	class:IAUVROSController
disable_goto_srv_	cola2_core/cola2_control/src/captain_node.cpp	/^  ros::ServiceServer disable_goto_srv_;$/;"	m	class:Captain	file:
disable_keep_position_srv_	cola2_core/cola2_control/src/captain_node.cpp	/^  ros::ServiceServer disable_keep_position_srv_;$/;"	m	class:Captain	file:
disable_logs	cola2_core/cola2_log/src/bag_recorder_node.py	/^    def disable_logs(self, req):$/;"	m	class:LogBag
disable_mission_srv_	cola2_core/cola2_control/src/captain_node.cpp	/^  ros::ServiceServer disable_mission_srv_;$/;"	m	class:Captain	file:
disable_no_altitude_goes_up_service	cola2_core/cola2_control/src/captain_node.cpp	/^    std::string disable_no_altitude_goes_up_service;$/;"	m	struct:Captain::__anon3	file:
disable_pose_controller_srv_	cola2_core/cola2_control/include/cola2_control/ros_controller/auv_ros_controller_base.h	/^  ros::ServiceServer disable_pose_controller_srv_;$/;"	m	class:IAUVROSController
disable_safety_keep_position_srv_	cola2_core/cola2_control/src/captain_node.cpp	/^  ros::ServiceServer disable_safety_keep_position_srv_;$/;"	m	class:Captain	file:
disable_section_srv_	cola2_core/cola2_control/src/captain_node.cpp	/^  ros::ServiceServer disable_section_srv_;$/;"	m	class:Captain	file:
disable_thruster_allocator_srv_	cola2_core/cola2_control/include/cola2_control/ros_controller/auv_ros_controller_base.h	/^  ros::ServiceServer disable_thruster_allocator_srv_;$/;"	m	class:IAUVROSController
disable_velocity_controller_srv_	cola2_core/cola2_control/include/cola2_control/ros_controller/auv_ros_controller_base.h	/^  ros::ServiceServer disable_velocity_controller_srv_;$/;"	m	class:IAUVROSController
disabled_axis_	cola2_core/cola2_control/include/cola2_control/low_level_controllers/request.h	/^  std::vector<bool> disabled_axis_;$/;"	m	class:Request
distance_to_end	cola2_core/cola2_control/include/cola2_control/controllers/types.h	/^  double distance_to_end;$/;"	m	class:control::Feedback
distance_to_max_velocity	cola2_core/cola2_control/include/cola2_control/controllers/section.h	/^  double distance_to_max_velocity;$/;"	m	struct:__anon6
doesFormatAlign	cola2_core/cola2_comms/include/cppystruct/format.h	/^constexpr bool doesFormatAlign(FormatType format)$/;"	f	namespace:pystruct
double_vars_	cola2_core/cola2_safety/include/cola2_safety/safety_rules/common.h	/^  std::map<std::string, double> double_vars_;$/;"	m	class:SafetyRules::SafetyRuleBaseClass
drop_weight_service_	cola2_core/cola2_safety/src/safety_supervisor_node.cpp	/^  std::string drop_weight_service_;$/;"	m	class:SafetySupervisor	file:
dvl_data_timeout_	cola2_core/cola2_safety/include/cola2_safety/safety_rules/navigator.h	/^  double dvl_data_timeout_;$/;"	m	class:SafetyRules::Navigator
dvl_fallback_delay_	cola2_core/cola2_nav/include/cola2_nav/ekf_base_ros.h	/^    double dvl_fallback_delay_;  \/\/!< minimum time to receive invalid DVL measurments to use the dvl_fallback callbacks$/;"	m	struct:EKFBaseROS::Config
dvl_max_v_	cola2_core/cola2_nav/include/cola2_nav/ekf_base_ros.h	/^    double dvl_max_v_;      \/\/!< maximum velocity of accepted DVL measurements$/;"	m	struct:EKFBaseROS::Config
east	cola2_core/cola2_control/include/cola2_control/controllers/types.h	/^  double east;$/;"	m	class:control::NED
east	cola2_core/cola2_control/include/cola2_control/controllers/types.h	/^  double east;$/;"	m	class:control::Nav
ecef2Geodetic	cola2_lib/src/cola2_lib/utils/ned.cpp	/^void NED::NED::ecef2Geodetic(const double x, const double y, const double z, double &lat, double &lon,$/;"	f	class:cola2::utils::NED::NED
ecef2Ned	cola2_lib/src/cola2_lib/utils/ned.cpp	/^void NED::NED::ecef2Ned(const double x, const double y, const double z, double &north, double &east,$/;"	f	class:cola2::utils::NED::NED
ecef2geodetic	cola2_lib/python/cola2/utils/ned.py	/^    def ecef2geodetic(self, ecef):$/;"	m	class:NED
ecef2ned	cola2_lib/python/cola2/utils/ned.py	/^    def ecef2ned(self, ecef):$/;"	m	class:NED
ecef_to_ned_matrix_	cola2_lib/include/cola2_lib/utils/ned.h	/^  Eigen::Matrix3d ecef_to_ned_matrix_;$/;"	m	class:cola2::utils::NED
edotk_old_	cola2_core/cola2_control/include/cola2_control/low_level_controllers/pid.h	/^  double edotk_old_;$/;"	m	class:PID
eik_old_	cola2_core/cola2_control/include/cola2_control/low_level_controllers/pid.h	/^  double eik_old_;$/;"	m	class:PID
elapsedTimeDecode	cola2_lib/src/cola2_lib/comms/elapsed_time.c	/^int32_t elapsedTimeDecode(const uint8_t encoded)$/;"	f
elapsedTimeEncode	cola2_lib/src/cola2_lib/comms/elapsed_time.c	/^uint8_t elapsedTimeEncode(const int32_t elapsed_time)$/;"	f
elapsedTimeIsEncodingError	cola2_lib/src/cola2_lib/comms/elapsed_time.c	/^bool elapsedTimeIsEncodingError(const uint8_t encoded)$/;"	f
elapsedTimeIsInvalid	cola2_lib/src/cola2_lib/comms/elapsed_time.c	/^bool elapsedTimeIsInvalid(const uint8_t encoded)$/;"	f
elapsedTimeIsMaximum	cola2_lib/src/cola2_lib/comms/elapsed_time.c	/^bool elapsedTimeIsMaximum(const uint8_t encoded)$/;"	f
elapsed_time_	cola2_core/cola2_comms/src/comms_node.cpp	/^  int32_t elapsed_time_ = -1;                             \/\/!< elapsed time received (init as invalid\/not received)$/;"	m	class:CommsNode	file:
elapsed_time_	cola2_core/cola2_safety/include/cola2_safety/safety_rules/watchdog_timer.h	/^  double elapsed_time_, timeout_;$/;"	m	class:SafetyRules::WatchdogTimer
emergency_surface_setpoints_	cola2_core/cola2_safety/src/safety_supervisor_checker_node.cpp	/^  std::vector<double> emergency_surface_setpoints_;$/;"	m	class:SafetySupervisorChecker	file:
emergency_surface_setpoints_	cola2_core/cola2_safety/src/safety_supervisor_node.cpp	/^  std::vector<double> emergency_surface_setpoints_;$/;"	m	class:SafetySupervisor	file:
enableExternalMissionSrv	cola2_core/cola2_control/src/captain_node.cpp	/^bool Captain::enableExternalMissionSrv($/;"	f	class:Captain
enableGotoSrv	cola2_core/cola2_control/src/captain_node.cpp	/^bool Captain::enableGotoSrv(cola2_msgs::Goto::Request& req, cola2_msgs::Goto::Response& res)$/;"	f	class:Captain
enableKeepPositionHolonomicSrv	cola2_core/cola2_control/src/captain_node.cpp	/^bool Captain::enableKeepPositionHolonomicSrv(std_srvs::Trigger::Request&, std_srvs::Trigger::Response& res)$/;"	f	class:Captain
enableKeepPositionNonHolonomicSrv	cola2_core/cola2_control/src/captain_node.cpp	/^bool Captain::enableKeepPositionNonHolonomicSrv(std_srvs::Trigger::Request&, std_srvs::Trigger::Response& res)$/;"	f	class:Captain
enableMission	cola2_core/cola2_control/src/captain_node.cpp	/^bool Captain::enableMission(cola2_msgs::Mission::Request& req, cola2_msgs::Mission::Response& res)$/;"	f	class:Captain
enableMissionSrv	cola2_core/cola2_control/src/captain_node.cpp	/^bool Captain::enableMissionSrv(cola2_msgs::Mission::Request& req, cola2_msgs::Mission::Response& res)$/;"	f	class:Captain
enableNoAltitudeGoesUpCallback	cola2_core/cola2_safety/src/safe_depth_altitude_node.cpp	/^SafeDepthAltitude::enableNoAltitudeGoesUpCallback(std_srvs::Trigger::Request&, std_srvs::Trigger::Response& res)$/;"	f	class:SafeDepthAltitude
enablePoseController	cola2_core/cola2_control/src/cola2_control/ros_controller/auv_ros_controller.cpp	/^bool IAUVROSController::enablePoseController(std_srvs::Trigger::Request&, std_srvs::Trigger::Response& res)$/;"	f	class:IAUVROSController
enableSafetyKeepPositionSrv	cola2_core/cola2_control/src/captain_node.cpp	/^bool Captain::enableSafetyKeepPositionSrv($/;"	f	class:Captain
enableSectionSrv	cola2_core/cola2_control/src/captain_node.cpp	/^bool Captain::enableSectionSrv(cola2_msgs::Section::Request& req, cola2_msgs::Section::Response& res)$/;"	f	class:Captain
enableThrusterAllocator	cola2_core/cola2_control/src/cola2_control/ros_controller/auv_ros_controller.cpp	/^bool IAUVROSController::enableThrusterAllocator(std_srvs::Trigger::Request&, std_srvs::Trigger::Response& res)$/;"	f	class:IAUVROSController
enableVelocityController	cola2_core/cola2_control/src/cola2_control/ros_controller/auv_ros_controller.cpp	/^bool IAUVROSController::enableVelocityController(std_srvs::Trigger::Request&, std_srvs::Trigger::Response& res)$/;"	f	class:IAUVROSController
enable_debug_	cola2_core/cola2_nav/include/cola2_nav/ekf_base_ros.h	/^    bool enable_debug_;                \/\/!< record debug information into and external file in $HOME dir$/;"	m	struct:EKFBaseROS::Config
enable_external_mission_srv_	cola2_core/cola2_control/src/captain_node.cpp	/^  ros::ServiceServer enable_external_mission_srv_;$/;"	m	class:Captain	file:
enable_fin_allocator_srv_	cola2_core/cola2_control/include/cola2_control/ros_controller/auv_ros_controller_base.h	/^  ros::ServiceServer enable_fin_allocator_srv_;$/;"	m	class:IAUVROSController
enable_goto_srv_	cola2_core/cola2_control/src/captain_node.cpp	/^  ros::ServiceServer enable_goto_srv_;$/;"	m	class:Captain	file:
enable_keep_position_holonomic_srv_	cola2_core/cola2_control/src/captain_node.cpp	/^  ros::ServiceServer enable_keep_position_holonomic_srv_;$/;"	m	class:Captain	file:
enable_keep_position_non_holonomic_srv_	cola2_core/cola2_control/src/captain_node.cpp	/^  ros::ServiceServer enable_keep_position_non_holonomic_srv_;$/;"	m	class:Captain	file:
enable_logs	cola2_core/cola2_log/src/bag_recorder_node.py	/^    def enable_logs(self, req):$/;"	m	class:LogBag
enable_mission_srv_	cola2_core/cola2_control/src/captain_node.cpp	/^  ros::ServiceServer enable_mission_srv_;$/;"	m	class:Captain	file:
enable_no_altitude_goes_up_service	cola2_core/cola2_control/src/captain_node.cpp	/^    std::string enable_no_altitude_goes_up_service;$/;"	m	struct:Captain::__anon3	file:
enable_pose_controller_srv_	cola2_core/cola2_control/include/cola2_control/ros_controller/auv_ros_controller_base.h	/^  ros::ServiceServer enable_pose_controller_srv_;$/;"	m	class:IAUVROSController
enable_safety_keep_position_srv_	cola2_core/cola2_control/src/captain_node.cpp	/^  ros::ServiceServer enable_safety_keep_position_srv_;$/;"	m	class:Captain	file:
enable_section_srv_	cola2_core/cola2_control/src/captain_node.cpp	/^  ros::ServiceServer enable_section_srv_;$/;"	m	class:Captain	file:
enable_thruster_allocator_srv_	cola2_core/cola2_control/include/cola2_control/ros_controller/auv_ros_controller_base.h	/^  ros::ServiceServer enable_thruster_allocator_srv_;$/;"	m	class:IAUVROSController
enable_velocity_controller_srv_	cola2_core/cola2_control/include/cola2_control/ros_controller/auv_ros_controller_base.h	/^  ros::ServiceServer enable_velocity_controller_srv_;$/;"	m	class:IAUVROSController
enabled_	cola2_lib_ros/include/cola2_lib_ros/diagnostic_helper.h	/^  bool enabled_;                                     \/\/!< Enabled.$/;"	m	class:cola2::ros::DiagnosticHelper
enabled_port_	cola2_lib/include/cola2_lib/io/udp_socket.h	/^  bool enabled_port_;                            \/\/!< Flag to check if port_ is set before writting to the socket.$/;"	m	class:cola2::io::udp_socket::Server
enabled_port_	cola2_lib/include/cola2_lib/io/udp_socket.h	/^  bool enabled_port_;  \/\/!< Flag to check if port_ is set before reading from the connection.$/;"	m	class:cola2::io::udp_socket::Client
enables_abort_and_surface_	cola2_core/cola2_safety/include/cola2_safety/safety_rules/virtual_cage.h	/^  bool enables_abort_and_surface_;$/;"	m	class:SafetyRules::VirtualCage
epoch	cola2_lib/include/cola2_lib/wmmc/GeomagnetismHeader.h	/^    double epoch; \/*Base time of Geomagnetic model epoch (yrs)*\/$/;"	m	struct:__anon13
eps	cola2_lib/include/cola2_lib/wmmc/GeomagnetismHeader.h	/^    double eps; \/* first eccentricity *\/$/;"	m	struct:__anon14
epssq	cola2_lib/include/cola2_lib/wmmc/GeomagnetismHeader.h	/^    double epssq; \/*first eccentricity squared *\/$/;"	m	struct:__anon14
epub_exclude_files	stonefish_ros/docs/conf.py	/^epub_exclude_files = ['search.html']$/;"	v
epub_title	stonefish_ros/docs/conf.py	/^epub_title = project$/;"	v
error_old_	cola2_core/cola2_control/include/cola2_control/low_level_controllers/pid.h	/^  double error_old_;$/;"	m	class:PID
euler2quaternion	cola2_lib/src/cola2_lib/utils/angles.cpp	/^Eigen::Quaterniond euler2quaternion(const Eigen::Vector3d &rpy)$/;"	f	namespace:cola2::utils
euler2quaternion	cola2_lib/src/cola2_lib/utils/angles.cpp	/^Eigen::Quaterniond euler2quaternion(const double roll, const double pitch, const double yaw)$/;"	f	namespace:cola2::utils
euler2rotation	cola2_lib/src/cola2_lib/utils/angles.cpp	/^Eigen::Matrix3d euler2rotation(const Eigen::Vector3d &rpy)$/;"	f	namespace:cola2::utils
euler2rotation	cola2_lib/src/cola2_lib/utils/angles.cpp	/^Eigen::Matrix3d euler2rotation(const double roll, const double pitch, const double yaw)$/;"	f	namespace:cola2::utils
exclude_patterns	cola2_lib/doc/conf.py	/^exclude_patterns = ['_build', 'Thumbs.db', '.DS_Store', 'env', 'modules.rst']$/;"	v
exclude_patterns	cola2_lib_ros/doc/conf.py	/^exclude_patterns = ['_build', 'Thumbs.db', '.DS_Store', 'env', 'modules.rst']$/;"	v
exclude_patterns	stonefish_ros/docs/conf.py	/^exclude_patterns = [u'_build', 'Thumbs.db', '.DS_Store']$/;"	v
executePendingActions	cola2_core/cola2_control/src/captain_node.cpp	/^void Captain::executePendingActions(std::string mission_name)$/;"	f	class:Captain
expire_time_	cola2_core/cola2_control/include/cola2_control/low_level_controllers/merge.h	/^  double expire_time_;$/;"	m	class:Merge
extensions	cola2_lib/doc/conf.py	/^extensions = ['sphinx.ext.autodoc',$/;"	v
extensions	cola2_lib_ros/doc/conf.py	/^extensions = ['sphinx.ext.autodoc',$/;"	v
extensions	stonefish_ros/docs/conf.py	/^extensions = [$/;"	v
external_mission_caller_name_	cola2_core/cola2_control/src/captain_node.cpp	/^  std::string external_mission_caller_name_;$/;"	m	class:Captain	file:
external_mission_feedback_id_	cola2_core/cola2_control/src/captain_node.cpp	/^  std::uint16_t external_mission_feedback_id_;$/;"	m	class:Captain	file:
f_	cola2_core/cola2_control/src/controller_node.cpp	/^  dynamic_reconfigure::Server<cola2_control::controllerConfig>::CallbackType f_;$/;"	m	class:OnlyThrustersROSController	file:
f_	cola2_core/cola2_sim/src/dynamics_node.cpp	/^  Eigen::Vector2d f_, old_f_;$/;"	m	class:Dynamics	file:
feedback_old_	cola2_core/cola2_control/include/cola2_control/low_level_controllers/pid.h	/^  double feedback_old_;$/;"	m	class:PID
fff_	cola2_core/cola2_control/include/cola2_control/low_level_controllers/pid.h	/^  double fff_;$/;"	m	class:PID
field	cola2_lib/python/cola2/io/nmea_parser.py	/^    def field(self, i):$/;"	m	class:NMEAParser
field	cola2_lib/src/cola2_lib/io/nmea_parser.cpp	/^std::string NMEAParser::field(int i) const$/;"	f	class:NMEAParser
fields_	cola2_lib/include/cola2_lib/io/nmea_parser.h	/^  std::vector<std::string> fields_;  \/\/!< Array of strings to store each parsed field$/;"	m	class:NMEAParser
file_name_	cola2_core/cola2_log/startup_processes/shutdown_logger_startup_process.cpp	/^  const std::string file_name_;$/;"	m	class:ShutdownLogger	file:
filter_init_	cola2_core/cola2_safety/include/cola2_safety/safety_rules/navigator.h	/^  bool filter_init_;$/;"	m	class:SafetyRules::Navigator
filter_updates_	cola2_core/cola2_nav/include/cola2_nav/ekf_base.h	/^  size_t filter_updates_ = 0;                     \/\/!< number of updates already done$/;"	m	class:EKFBase
fin_setpoints_	cola2_core/cola2_control/include/cola2_control/low_level_controllers/auv_controller_base.h	/^  Eigen::VectorXd fin_setpoints_;$/;"	m	class:IAUVController
final	cola2_core/cola2_nav/include/cola2_nav/ekf_position_velocity.h	/^                      const bool from_dvl = true) final;$/;"	m	class:EKFPositionVelocity
final	cola2_core/cola2_nav/include/cola2_nav/ekf_position_velocity.h	/^  Eigen::Matrix3d getAngularVelocityUncertainty() const final;$/;"	m	class:EKFPositionVelocity
final	cola2_core/cola2_nav/include/cola2_nav/ekf_position_velocity.h	/^  Eigen::Matrix3d getOrientationUncertainty() const final;$/;"	m	class:EKFPositionVelocity
final	cola2_core/cola2_nav/include/cola2_nav/ekf_position_velocity.h	/^  Eigen::Matrix3d getPositionUncertainty() const final;$/;"	m	class:EKFPositionVelocity
final	cola2_core/cola2_nav/include/cola2_nav/ekf_position_velocity.h	/^  Eigen::Matrix3d getVelocityUncertainty() const final;$/;"	m	class:EKFPositionVelocity
final	cola2_core/cola2_nav/include/cola2_nav/ekf_position_velocity.h	/^  Eigen::Vector3d getAngularVelocity() const final;$/;"	m	class:EKFPositionVelocity
final	cola2_core/cola2_nav/include/cola2_nav/ekf_position_velocity.h	/^  Eigen::Vector3d getEuler() const final;$/;"	m	class:EKFPositionVelocity
final	cola2_core/cola2_nav/include/cola2_nav/ekf_position_velocity.h	/^  Eigen::Vector3d getPosition() const final;$/;"	m	class:EKFPositionVelocity
final	cola2_core/cola2_nav/include/cola2_nav/ekf_position_velocity.h	/^  Eigen::Vector3d getVelocity() const final;$/;"	m	class:EKFPositionVelocity
final	cola2_core/cola2_nav/include/cola2_nav/ekf_position_velocity.h	/^  bool updateOrientation(const double t, const Eigen::Vector3d& rpy, const Eigen::Matrix3d& cov) final;$/;"	m	class:EKFPositionVelocity
final	cola2_core/cola2_nav/include/cola2_nav/ekf_position_velocity.h	/^  bool updateOrientationRate(const double t, const Eigen::Vector3d& rate, const Eigen::Matrix3d& cov) final;$/;"	m	class:EKFPositionVelocity
final	cola2_core/cola2_nav/include/cola2_nav/ekf_position_velocity.h	/^  bool updatePositionXY(const double t, const Eigen::Vector2d& pose_xy, const Eigen::Matrix2d& cov) final;$/;"	m	class:EKFPositionVelocity
final	cola2_core/cola2_nav/include/cola2_nav/ekf_position_velocity.h	/^  bool updatePositionZ(const double t, const Eigen::Vector1d& pose_z, const Eigen::Matrix1d& cov) final;$/;"	m	class:EKFPositionVelocity
final	cola2_core/cola2_nav/include/cola2_nav/ekf_position_velocity.h	/^  void setPositionXY(const Eigen::Vector2d& xy) final;$/;"	m	class:EKFPositionVelocity
final	cola2_core/cola2_nav/include/cola2_nav/ekf_surface_2d.h	/^                      const bool from_dvl = true) final;$/;"	m	class:EKFSurface2D
final	cola2_core/cola2_nav/include/cola2_nav/ekf_surface_2d.h	/^  Eigen::Matrix3d getAngularVelocityUncertainty() const final;$/;"	m	class:EKFSurface2D
final	cola2_core/cola2_nav/include/cola2_nav/ekf_surface_2d.h	/^  Eigen::Matrix3d getOrientationUncertainty() const final;$/;"	m	class:EKFSurface2D
final	cola2_core/cola2_nav/include/cola2_nav/ekf_surface_2d.h	/^  Eigen::Matrix3d getPositionUncertainty() const final;$/;"	m	class:EKFSurface2D
final	cola2_core/cola2_nav/include/cola2_nav/ekf_surface_2d.h	/^  Eigen::Matrix3d getVelocityUncertainty() const final;$/;"	m	class:EKFSurface2D
final	cola2_core/cola2_nav/include/cola2_nav/ekf_surface_2d.h	/^  Eigen::Vector3d getAngularVelocity() const final;$/;"	m	class:EKFSurface2D
final	cola2_core/cola2_nav/include/cola2_nav/ekf_surface_2d.h	/^  Eigen::Vector3d getEuler() const final;$/;"	m	class:EKFSurface2D
final	cola2_core/cola2_nav/include/cola2_nav/ekf_surface_2d.h	/^  Eigen::Vector3d getPosition() const final;$/;"	m	class:EKFSurface2D
final	cola2_core/cola2_nav/include/cola2_nav/ekf_surface_2d.h	/^  Eigen::Vector3d getVelocity() const final;$/;"	m	class:EKFSurface2D
final	cola2_core/cola2_nav/include/cola2_nav/ekf_surface_2d.h	/^  bool updateOrientation(const double t, const Eigen::Vector3d& rpy, const Eigen::Matrix3d& cov) final;$/;"	m	class:EKFSurface2D
final	cola2_core/cola2_nav/include/cola2_nav/ekf_surface_2d.h	/^  bool updateOrientationRate(const double t, const Eigen::Vector3d& rate, const Eigen::Matrix3d& cov) final;$/;"	m	class:EKFSurface2D
final	cola2_core/cola2_nav/include/cola2_nav/ekf_surface_2d.h	/^  bool updatePositionXY(const double t, const Eigen::Vector2d& pose_xy, const Eigen::Matrix2d& cov) final;$/;"	m	class:EKFSurface2D
final	cola2_core/cola2_nav/include/cola2_nav/ekf_surface_2d.h	/^  bool updatePositionZ(const double t, const Eigen::Vector1d& pose_z, const Eigen::Matrix1d& cov) final;$/;"	m	class:EKFSurface2D
final	cola2_core/cola2_nav/include/cola2_nav/ekf_surface_2d.h	/^  void computePredictionMatrices(const double dt) final;$/;"	m	class:EKFSurface2D
final	cola2_core/cola2_nav/include/cola2_nav/ekf_surface_2d.h	/^  void normalizeState() final;$/;"	m	class:EKFSurface2D
final	cola2_core/cola2_nav/include/cola2_nav/ekf_surface_2d.h	/^  void setPositionXY(const Eigen::Vector2d& xy) final;$/;"	m	class:EKFSurface2D
final_altitude	cola2_core/cola2_control/include/cola2_control/controllers/types.h	/^  double final_altitude;$/;"	m	class:control::Request
final_altitude_	cola2_lib/include/cola2_lib/mission/mission_goto.h	/^  double final_altitude_;     \/\/!< Final altitude in meters.$/;"	m	class:MissionGoto
final_altitude_	cola2_lib/include/cola2_lib/mission/mission_park.h	/^  double final_altitude_;     \/\/!< Final altitude in meters.$/;"	m	class:MissionPark
final_altitude_	cola2_lib/include/cola2_lib/mission/mission_section.h	/^  double final_altitude_;     \/\/!< Final altitude in meters.$/;"	m	class:MissionSection
final_depth	cola2_core/cola2_control/include/cola2_control/controllers/types.h	/^  double final_depth;$/;"	m	class:control::Request
final_depth_	cola2_lib/include/cola2_lib/mission/mission_goto.h	/^  double final_depth_;        \/\/!< Final depth in meters.$/;"	m	class:MissionGoto
final_depth_	cola2_lib/include/cola2_lib/mission/mission_park.h	/^  double final_depth_;        \/\/!< Final depth in meters.$/;"	m	class:MissionPark
final_depth_	cola2_lib/include/cola2_lib/mission/mission_section.h	/^  double final_depth_;        \/\/!< Final depth in meters.$/;"	m	class:MissionSection
final_east	cola2_core/cola2_control/include/cola2_control/controllers/types.h	/^  double final_east;$/;"	m	class:control::Request
final_latitude_	cola2_lib/include/cola2_lib/mission/mission_goto.h	/^  double final_latitude_;     \/\/!< Final latitude in decimal degrees.$/;"	m	class:MissionGoto
final_latitude_	cola2_lib/include/cola2_lib/mission/mission_park.h	/^  double final_latitude_;     \/\/!< Final latitude in decimal degrees.$/;"	m	class:MissionPark
final_latitude_	cola2_lib/include/cola2_lib/mission/mission_section.h	/^  double final_latitude_;     \/\/!< Final latitude in decimal degrees.$/;"	m	class:MissionSection
final_longitude_	cola2_lib/include/cola2_lib/mission/mission_goto.h	/^  double final_longitude_;    \/\/!< Final longitude in decimal degrees.$/;"	m	class:MissionGoto
final_longitude_	cola2_lib/include/cola2_lib/mission/mission_park.h	/^  double final_longitude_;    \/\/!< Final longitude in decimal degrees.$/;"	m	class:MissionPark
final_longitude_	cola2_lib/include/cola2_lib/mission/mission_section.h	/^  double final_longitude_;    \/\/!< Final longitude in decimal degrees.$/;"	m	class:MissionSection
final_north	cola2_core/cola2_control/include/cola2_control/controllers/types.h	/^  double final_north;$/;"	m	class:control::Request
final_yaw	cola2_core/cola2_control/include/cola2_control/controllers/types.h	/^  double final_yaw;$/;"	m	class:control::Request
final_yaw_	cola2_lib/include/cola2_lib/mission/mission_park.h	/^  double final_yaw_;          \/\/!< Final orietation w.r.t. north in radians.$/;"	m	class:MissionPark
finsCallback	cola2_core/cola2_sim/src/dynamics_node.cpp	/^void Dynamics::finsCallback(const cola2_msgs::Setpoints& msg)$/;"	f	class:Dynamics
fins_topic	cola2_core/cola2_sim/src/dynamics_node.cpp	/^    std::string fins_topic;$/;"	m	struct:Dynamics::Config	file:
first_no_altitude_	cola2_core/cola2_safety/include/cola2_safety/safety_rules/navigator.h	/^  double first_no_altitude_;$/;"	m	class:SafetyRules::Navigator
fla	cola2_lib/include/cola2_lib/wmmc/GeomagnetismHeader.h	/^    double fla; \/* flattening *\/$/;"	m	struct:__anon14
flowControlFromString	cola2_lib/src/cola2_lib/io/serial_port.cpp	/^EFlowControl SerialPort::flowControlFromString(const std::string& flowControl)$/;"	f	class:cola2::io::SerialPort
fls	stonefish_ros/include/stonefish_ros/ROSSimulationManager.h	/^		FLS* fls;$/;"	m	class:sf::FLSService
forceCallback	cola2_core/cola2_sim/src/dynamics_node.cpp	/^void Dynamics::forceCallback(const cola2_msgs::BodyForceReq& msg)$/;"	f	class:Dynamics
forceToSetpoint	cola2_core/cola2_control/src/cola2_control/low_level_controllers/only_thruster_allocator.cpp	/^Eigen::VectorXd OnlyThrusterAllocator::forceToSetpoint(Eigen::VectorXd thruster_forces)$/;"	f	class:OnlyThrusterAllocator
force_	cola2_core/cola2_sim/src/dynamics_node.cpp	/^  cola2_msgs::BodyForceReq force_;$/;"	m	class:Dynamics	file:
formatChar	cola2_core/cola2_comms/include/cppystruct/format.h	/^  char formatChar;$/;"	m	struct:pystruct::FormatType
formatChar	cola2_core/cola2_comms/include/cppystruct/format.h	/^  char formatChar;$/;"	m	struct:pystruct::RawFormatType
formatSize	cola2_core/cola2_comms/include/cppystruct/format.h	/^  size_t formatSize;$/;"	m	struct:pystruct::FormatType
format_string	cola2_core/cola2_comms/include/cppystruct/string.h	/^struct format_string$/;"	s	namespace:pystruct::internal
frame_id_	cola2_core/cola2_control/include/cola2_control/ros_controller/auv_ros_controller_base.h	/^  std::string frame_id_;$/;"	m	class:IAUVROSController
frame_vehicle_	cola2_core/cola2_nav/include/cola2_nav/ekf_base_ros.h	/^  std::string frame_vehicle_;                \/\/!< frame of the vehicle (ns\/base_link)$/;"	m	class:EKFBaseROS
frame_world_	cola2_core/cola2_nav/include/cola2_nav/ekf_base_ros.h	/^  std::string frame_world_ = "world_ned";    \/\/!< frame where AUV is located$/;"	m	class:EKFBaseROS
frequency_	cola2_core/cola2_control/include/cola2_control/ros_controller/auv_ros_controller_base.h	/^  double frequency_;$/;"	m	class:IAUVROSController
frequency_buffer_	cola2_lib_ros/include/cola2_lib_ros/diagnostic_helper.h	/^  std::deque<double> frequency_buffer_;              \/\/!< Frequency buffer.$/;"	m	class:cola2::ros::DiagnosticHelper
frequency_buffer_min_data_	cola2_lib_ros/include/cola2_lib_ros/diagnostic_helper.h	/^  std::size_t frequency_buffer_min_data_;  \/\/!< Frequency buffer min data.$/;"	m	class:cola2::ros::DiagnosticHelper
frequency_buffer_min_time_	cola2_lib_ros/include/cola2_lib_ros/diagnostic_helper.h	/^  double frequency_buffer_min_time_;       \/\/!< Frequency buffer min time.$/;"	m	class:cola2::ros::DiagnosticHelper
frequency_buffer_time_limit_	cola2_lib_ros/include/cola2_lib_ros/diagnostic_helper.h	/^  double frequency_buffer_time_limit_;     \/\/!< Frequency buffer time limit.$/;"	m	class:cola2::ros::DiagnosticHelper
future	cola2_lib/include/cola2_lib/utils/thread_pool.h	/^  auto enqueue(F&& f, Args&&... args) -> std::future<typename std::result_of<F(Args...)>::type>;$/;"	m	class:ThreadPool::std
fx_	cola2_core/cola2_nav/include/cola2_nav/ekf_base.h	/^  Eigen::VectorXd fx_;  \/\/!< State prediction function f(x) (computed in computePredictionMatrices)$/;"	m	class:EKFBase
gen	cola2_core/cola2_control/cfg/controller.cfg	/^gen = ParameterGenerator()$/;"	v
geodetic2Ecef	cola2_lib/src/cola2_lib/utils/ned.cpp	/^void NED::NED::geodetic2Ecef(const double lat, const double lon, const double height, double &x, double &y,$/;"	f	class:cola2::utils::NED::NED
geodetic2Ned	cola2_lib/src/cola2_lib/utils/ned.cpp	/^Eigen::Vector3d NED::geodetic2Ned(const Eigen::Vector3d &geodetic) const$/;"	f	class:cola2::utils::NED
geodetic2Ned	cola2_lib/src/cola2_lib/utils/ned.cpp	/^void NED::NED::geodetic2Ned(const double lat, const double lon, const double height, double &north, double &east,$/;"	f	class:cola2::utils::NED::NED
geodetic2ecef	cola2_lib/python/cola2/utils/ned.py	/^    def geodetic2ecef(self, coord):$/;"	m	class:NED
geodetic2ned	cola2_lib/python/cola2/utils/ned.py	/^    def geodetic2ned(self, coord):$/;"	m	class:NED
get	cola2_core/cola2_comms/include/cppystruct/data_view.h	/^constexpr auto get(const data_view<const char>& d)$/;"	f	namespace:pystruct::data
get	cola2_core/cola2_comms/include/cppystruct/data_view.h	/^constexpr bool get(const data_view<const char>& d)$/;"	f	namespace:pystruct::data::impl
get	cola2_core/cola2_comms/include/cppystruct/data_view.h	/^constexpr int16_t get(const data_view<const char>& d)$/;"	f	namespace:pystruct::data::impl
get	cola2_core/cola2_comms/include/cppystruct/data_view.h	/^constexpr int32_t get(const data_view<const char>& d)$/;"	f	namespace:pystruct::data::impl
get	cola2_core/cola2_comms/include/cppystruct/data_view.h	/^constexpr int64_t get(const data_view<const char>& d)$/;"	f	namespace:pystruct::data::impl
get	cola2_core/cola2_comms/include/cppystruct/data_view.h	/^constexpr int8_t get(const data_view<const char>& d)$/;"	f	namespace:pystruct::data::impl
get	cola2_core/cola2_comms/include/cppystruct/data_view.h	/^constexpr std::string_view get(const data_view<const char>& d)$/;"	f	namespace:pystruct::data::impl
get	cola2_core/cola2_comms/include/cppystruct/data_view.h	/^constexpr uint16_t get(const data_view<const char>& d)$/;"	f	namespace:pystruct::data::impl
get	cola2_core/cola2_comms/include/cppystruct/data_view.h	/^constexpr uint32_t get(const data_view<const char>& d)$/;"	f	namespace:pystruct::data::impl
get	cola2_core/cola2_comms/include/cppystruct/data_view.h	/^constexpr uint64_t get(const data_view<const char>& d)$/;"	f	namespace:pystruct::data::impl
get	cola2_core/cola2_comms/include/cppystruct/data_view.h	/^constexpr uint8_t get(const data_view<const char>& d)$/;"	f	namespace:pystruct::data::impl
get	cola2_core/cola2_comms/include/cppystruct/data_view.h	/^inline double get(const data_view<const char>& d)$/;"	f	namespace:pystruct::data::impl
get	cola2_core/cola2_comms/include/cppystruct/data_view.h	/^inline float get(const data_view<const char>& d)$/;"	f	namespace:pystruct::data::impl
getActionId	cola2_lib/src/cola2_lib/mission/mission_action.cpp	/^std::string MissionAction::getActionId() const$/;"	f	class:MissionAction
getActions	cola2_lib/src/cola2_lib/mission/mission_step.cpp	/^std::vector<MissionAction> MissionStep::getActions() const$/;"	f	class:MissionStep
getAngularVelocity	cola2_core/cola2_nav/src/cola2_nav/ekf_position_velocity.cpp	/^Eigen::Vector3d EKFPositionVelocity::getAngularVelocity() const$/;"	f	class:EKFPositionVelocity
getAngularVelocity	cola2_core/cola2_nav/src/cola2_nav/ekf_surface_2d.cpp	/^Eigen::Vector3d EKFSurface2D::getAngularVelocity() const$/;"	f	class:EKFSurface2D
getAngularVelocityUncertainty	cola2_core/cola2_nav/src/cola2_nav/ekf_position_velocity.cpp	/^Eigen::Matrix3d EKFPositionVelocity::getAngularVelocityUncertainty() const$/;"	f	class:EKFPositionVelocity
getAngularVelocityUncertainty	cola2_core/cola2_nav/src/cola2_nav/ekf_surface_2d.cpp	/^Eigen::Matrix3d EKFSurface2D::getAngularVelocityUncertainty() const$/;"	f	class:EKFSurface2D
getBaudRate	cola2_lib/src/cola2_lib/io/serial_port.cpp	/^EBaudRate SerialPort::getBaudRate() const$/;"	f	class:cola2::io::SerialPort
getBinaryOffset	cola2_core/cola2_comms/include/cppystruct/format.h	/^constexpr size_t getBinaryOffset(Fmt)$/;"	f	namespace:pystruct
getBinaryOffset	cola2_core/cola2_comms/include/cppystruct/format.h	/^constexpr size_t getBinaryOffset(Fmt, std::index_sequence<Items...>)$/;"	f	namespace:pystruct
getBit	cola2_core/cola2_safety/src/cola2_safety/safety_rules/common.cpp	/^bool getBit(const std::uint32_t status_code, const std::size_t bit)$/;"	f	namespace:SafetyRules::StatusCodeBits
getBool	cola2_core/cola2_safety/src/cola2_safety/safety_rules/common.cpp	/^SafetyRuleBaseClass::getBool(const std::string& var_name)$/;"	f	class:SafetyRules::SafetyRuleBaseClass
getCameraMsgPrototypes	stonefish_ros/src/ROSSimulationManager.cpp	/^std::map<std::string, std::pair<sensor_msgs::ImagePtr, sensor_msgs::CameraInfoPtr>>& ROSSimulationManager::getCameraMsgPrototypes()$/;"	f	class:sf::ROSSimulationManager
getChar	cola2_core/cola2_control/src/keyboard_node.cpp	/^  int getChar()$/;"	f	class:Keyboard	file:
getCharSize	cola2_lib/src/cola2_lib/io/serial_port.cpp	/^ECharacterSize SerialPort::getCharSize() const$/;"	f	class:cola2::io::SerialPort
getConfig	cola2_core/cola2_control/src/captain_node.cpp	/^bool Captain::getConfig()$/;"	f	class:Captain
getConfig	cola2_core/cola2_control/src/pilot_node.cpp	/^void Pilot::getConfig()$/;"	f	class:Pilot
getConfig	cola2_core/cola2_nav/src/cola2_nav/ekf_base_ros.cpp	/^std_srvs::TriggerResponse EKFBaseROS::getConfig(const bool show)$/;"	f	class:EKFBaseROS
getConfig	cola2_core/cola2_safety/src/safe_depth_altitude_node.cpp	/^SafeDepthAltitude::getConfig()$/;"	f	class:SafeDepthAltitude
getConfig	cola2_core/cola2_safety/src/virtual_cage_node.cpp	/^VirtualCage::getConfig()$/;"	f	class:VirtualCage
getCovarianceMatrix	cola2_core/cola2_nav/src/cola2_nav/ekf_base.cpp	/^Eigen::MatrixXd EKFBase::getCovarianceMatrix() const$/;"	f	class:EKFBase
getDefaultMissionName	cola2_core/cola2_control/src/captain_node.cpp	/^std::string Captain::getDefaultMissionName()$/;"	f	class:Captain
getDisabledAxis	cola2_core/cola2_control/src/cola2_control/low_level_controllers/request.cpp	/^std::vector<bool> Request::getDisabledAxis() const$/;"	f	class:Request
getDouble	cola2_core/cola2_safety/src/cola2_safety/safety_rules/common.cpp	/^SafetyRuleBaseClass::getDouble(const std::string& var_name)$/;"	f	class:SafetyRules::SafetyRuleBaseClass
getDynamicTransform	cola2_lib_ros/src/cola2_lib_ros/transform_handler.cpp	/^bool cola2::ros::TransformHandler::getDynamicTransform(const std::string& frame, Eigen::Affine3d& transform)$/;"	f	class:cola2::ros::TransformHandler
getDynamicTransform	cola2_lib_ros/src/cola2_lib_ros/transform_handler.cpp	/^bool cola2::ros::TransformHandler::getDynamicTransform(const std::string& frame, Eigen::Isometry3d& transform)$/;"	f	class:cola2::ros::TransformHandler
getEuler	cola2_core/cola2_nav/src/cola2_nav/ekf_position_velocity.cpp	/^Eigen::Vector3d EKFPositionVelocity::getEuler() const$/;"	f	class:EKFPositionVelocity
getEuler	cola2_core/cola2_nav/src/cola2_nav/ekf_surface_2d.cpp	/^Eigen::Vector3d EKFSurface2D::getEuler() const$/;"	f	class:EKFSurface2D
getFinSetpoints	cola2_core/cola2_control/src/cola2_control/low_level_controllers/auv_controller_base.cpp	/^Eigen::VectorXd IAUVController::getFinSetpoints() const$/;"	f	class:IAUVController
getFinalAltitude	cola2_lib/src/cola2_lib/mission/mission_goto.cpp	/^double MissionGoto::getFinalAltitude() const$/;"	f	class:MissionGoto
getFinalAltitude	cola2_lib/src/cola2_lib/mission/mission_park.cpp	/^double MissionPark::getFinalAltitude() const$/;"	f	class:MissionPark
getFinalAltitude	cola2_lib/src/cola2_lib/mission/mission_section.cpp	/^double MissionSection::getFinalAltitude() const$/;"	f	class:MissionSection
getFinalDepth	cola2_lib/src/cola2_lib/mission/mission_goto.cpp	/^double MissionGoto::getFinalDepth() const$/;"	f	class:MissionGoto
getFinalDepth	cola2_lib/src/cola2_lib/mission/mission_park.cpp	/^double MissionPark::getFinalDepth() const$/;"	f	class:MissionPark
getFinalDepth	cola2_lib/src/cola2_lib/mission/mission_section.cpp	/^double MissionSection::getFinalDepth() const$/;"	f	class:MissionSection
getFinalLatitude	cola2_lib/src/cola2_lib/mission/mission_goto.cpp	/^double MissionGoto::getFinalLatitude() const$/;"	f	class:MissionGoto
getFinalLatitude	cola2_lib/src/cola2_lib/mission/mission_park.cpp	/^double MissionPark::getFinalLatitude() const$/;"	f	class:MissionPark
getFinalLatitude	cola2_lib/src/cola2_lib/mission/mission_section.cpp	/^double MissionSection::getFinalLatitude() const$/;"	f	class:MissionSection
getFinalLongitude	cola2_lib/src/cola2_lib/mission/mission_goto.cpp	/^double MissionGoto::getFinalLongitude() const$/;"	f	class:MissionGoto
getFinalLongitude	cola2_lib/src/cola2_lib/mission/mission_park.cpp	/^double MissionPark::getFinalLongitude() const$/;"	f	class:MissionPark
getFinalLongitude	cola2_lib/src/cola2_lib/mission/mission_section.cpp	/^double MissionSection::getFinalLongitude() const$/;"	f	class:MissionSection
getFinalYaw	cola2_lib/src/cola2_lib/mission/mission_park.cpp	/^double MissionPark::getFinalYaw() const$/;"	f	class:MissionPark
getFlowControl	cola2_lib/src/cola2_lib/io/serial_port.cpp	/^EFlowControl SerialPort::getFlowControl() const$/;"	f	class:cola2::io::SerialPort
getFormatMode	cola2_core/cola2_comms/include/cppystruct/format.h	/^constexpr auto getFormatMode(Fmt)$/;"	f	namespace:pystruct
getHeaveMode	cola2_lib/src/cola2_lib/mission/mission_goto.cpp	/^MissionGoto::HeaveMode MissionGoto::getHeaveMode() const$/;"	f	class:MissionGoto
getHeaveMode	cola2_lib/src/cola2_lib/mission/mission_park.cpp	/^MissionPark::HeaveMode MissionPark::getHeaveMode() const$/;"	f	class:MissionPark
getHeaveMode	cola2_lib/src/cola2_lib/mission/mission_section.cpp	/^MissionSection::HeaveMode MissionSection::getHeaveMode() const$/;"	f	class:MissionSection
getInitLatitude	cola2_lib/src/cola2_lib/utils/ned.cpp	/^double NED::getInitLatitude() const$/;"	f	class:cola2::utils::NED
getInitLongitude	cola2_lib/src/cola2_lib/utils/ned.cpp	/^double NED::getInitLongitude() const$/;"	f	class:cola2::utils::NED
getInitialDepth	cola2_lib/src/cola2_lib/mission/mission_section.cpp	/^double MissionSection::getInitialDepth() const$/;"	f	class:MissionSection
getInitialLatitude	cola2_lib/src/cola2_lib/mission/mission_section.cpp	/^double MissionSection::getInitialLatitude() const$/;"	f	class:MissionSection
getInitialLongitude	cola2_lib/src/cola2_lib/mission/mission_section.cpp	/^double MissionSection::getInitialLongitude() const$/;"	f	class:MissionSection
getInt	cola2_core/cola2_safety/src/cola2_safety/safety_rules/common.cpp	/^SafetyRuleBaseClass::getInt(const std::string& var_name)$/;"	f	class:SafetyRules::SafetyRuleBaseClass
getIsFinAllocatorEnable	cola2_core/cola2_control/src/cola2_control/low_level_controllers/auv_controller_base.cpp	/^bool IAUVController::getIsFinAllocatorEnable() const$/;"	f	class:IAUVController
getIsPoseControllerEnable	cola2_core/cola2_control/src/cola2_control/low_level_controllers/auv_controller_base.cpp	/^bool IAUVController::getIsPoseControllerEnable() const$/;"	f	class:IAUVController
getIsThrusterAllocatorEnable	cola2_core/cola2_control/src/cola2_control/low_level_controllers/auv_controller_base.cpp	/^bool IAUVController::getIsThrusterAllocatorEnable() const$/;"	f	class:IAUVController
getIsTrigger	cola2_lib/src/cola2_lib/mission/mission_action.cpp	/^bool MissionAction::getIsTrigger() const$/;"	f	class:MissionAction
getIsVelocityControllerEnable	cola2_core/cola2_control/src/cola2_control/low_level_controllers/auv_controller_base.cpp	/^bool IAUVController::getIsVelocityControllerEnable() const$/;"	f	class:IAUVController
getLevel	cola2_core/cola2_safety/src/cola2_safety/safety_rules/common.cpp	/^SafetyRuleBaseClass::getLevel() const$/;"	f	class:SafetyRules::SafetyRuleBaseClass
getManeuverPtr	cola2_lib/src/cola2_lib/mission/mission_step.cpp	/^std::shared_ptr<MissionManeuver> MissionStep::getManeuverPtr() const$/;"	f	class:MissionStep
getManeuverType	cola2_lib/src/cola2_lib/mission/mission_maneuver.cpp	/^unsigned int MissionManeuver::getManeuverType() const$/;"	f	class:MissionManeuver
getMergedPose	cola2_core/cola2_control/src/cola2_control/low_level_controllers/auv_controller_base.cpp	/^Request IAUVController::getMergedPose() const$/;"	f	class:IAUVController
getMergedTwist	cola2_core/cola2_control/src/cola2_control/low_level_controllers/auv_controller_base.cpp	/^Request IAUVController::getMergedTwist() const$/;"	f	class:IAUVController
getMergedWrench	cola2_core/cola2_control/src/cola2_control/low_level_controllers/auv_controller_base.cpp	/^Request IAUVController::getMergedWrench() const$/;"	f	class:IAUVController
getMessage	cola2_core/cola2_safety/src/cola2_safety/safety_rules/common.cpp	/^SafetyRuleBaseClass::getMessage() const$/;"	f	class:SafetyRules::SafetyRuleBaseClass
getName	cola2_core/cola2_safety/src/cola2_safety/safety_rules/common.cpp	/^std::string SafetyLevel::getName(const std::size_t level)$/;"	f	class:SafetyRules::SafetyLevel
getNamespace	cola2_lib_ros/src/cola2_lib_ros/this_node.cpp	/^std::string cola2::ros::getNamespace()$/;"	f	class:cola2::ros
getNamespaceNoInitialDash	cola2_lib_ros/src/cola2_lib_ros/this_node.cpp	/^std::string cola2::ros::getNamespaceNoInitialDash()$/;"	f	class:cola2::ros
getNoAltitudeGoesUp	cola2_lib/src/cola2_lib/mission/mission_goto.cpp	/^bool MissionGoto::getNoAltitudeGoesUp() const$/;"	f	class:MissionGoto
getNoAltitudeGoesUp	cola2_lib/src/cola2_lib/mission/mission_park.cpp	/^bool MissionPark::getNoAltitudeGoesUp() const$/;"	f	class:MissionPark
getNoAltitudeGoesUp	cola2_lib/src/cola2_lib/mission/mission_section.cpp	/^bool MissionSection::getNoAltitudeGoesUp() const$/;"	f	class:MissionSection
getNodeHandle	stonefish_ros/src/ROSSimulationManager.cpp	/^ros::NodeHandle& ROSSimulationManager::getNodeHandle()$/;"	f	class:sf::ROSSimulationManager
getNumOfStopBits	cola2_lib/src/cola2_lib/io/serial_port.cpp	/^EStopBits SerialPort::getNumOfStopBits() const$/;"	f	class:cola2::io::SerialPort
getNumberofThrusters	cola2_core/cola2_control/src/cola2_control/low_level_controllers/only_thrusters_controller.cpp	/^unsigned int OnlyThrustersController::getNumberofThrusters() const$/;"	f	class:OnlyThrustersController
getOrientation	cola2_core/cola2_nav/src/cola2_nav/ekf_base.cpp	/^Eigen::Quaterniond EKFBase::getOrientation() const$/;"	f	class:EKFBase
getOrientationUncertainty	cola2_core/cola2_nav/src/cola2_nav/ekf_position_velocity.cpp	/^Eigen::Matrix3d EKFPositionVelocity::getOrientationUncertainty() const$/;"	f	class:EKFPositionVelocity
getOrientationUncertainty	cola2_core/cola2_nav/src/cola2_nav/ekf_surface_2d.cpp	/^Eigen::Matrix3d EKFSurface2D::getOrientationUncertainty() const$/;"	f	class:EKFSurface2D
getParam	cola2_lib_ros/include/cola2_lib_ros/param_loader.h	/^bool getParam(const std::string param_name, T& param_var)$/;"	f	namespace:cola2::ros
getParam	cola2_lib_ros/include/cola2_lib_ros/param_loader.h	/^bool getParam(const std::string param_name, T& param_var, T default_value)$/;"	f	namespace:cola2::ros
getParamMatrix3d	cola2_core/cola2_sim/src/dynamics_node.cpp	/^void getParamMatrix3d(const std::string& tname, Eigen::Matrix3d& v)$/;"	f
getParamMatrixXd	cola2_core/cola2_sim/src/dynamics_node.cpp	/^void getParamMatrixXd(const std::string& tname, Eigen::MatrixXd& v, std::size_t rows)$/;"	f
getParamVector	cola2_lib_ros/include/cola2_lib_ros/param_loader.h	/^bool getParamVector(const std::string param_name, std::vector<ParamType>& data)$/;"	f	namespace:cola2::ros
getParamVector3d	cola2_core/cola2_sim/src/dynamics_node.cpp	/^void getParamVector3d(const std::string& tname, Eigen::Vector3d& v)$/;"	f
getParamVector6d	cola2_core/cola2_sim/src/dynamics_node.cpp	/^void getParamVector6d(const std::string& tname, Eigen::Vector6d& v)$/;"	f
getParameters	cola2_lib/src/cola2_lib/mission/mission_action.cpp	/^std::vector<std::string> MissionAction::getParameters() const$/;"	f	class:MissionAction
getParity	cola2_lib/src/cola2_lib/io/serial_port.cpp	/^EParity SerialPort::getParity() const$/;"	f	class:cola2::io::SerialPort
getPosition	cola2_core/cola2_nav/src/cola2_nav/ekf_position_velocity.cpp	/^Eigen::Vector3d EKFPositionVelocity::getPosition() const$/;"	f	class:EKFPositionVelocity
getPosition	cola2_core/cola2_nav/src/cola2_nav/ekf_surface_2d.cpp	/^Eigen::Vector3d EKFSurface2D::getPosition() const$/;"	f	class:EKFSurface2D
getPositionIncrementFrom	cola2_core/cola2_nav/src/cola2_nav/ekf_base_ros.cpp	/^Eigen::Vector3d EKFBaseROS::getPositionIncrementFrom(const double time) const$/;"	f	class:EKFBaseROS
getPositionUncertainty	cola2_core/cola2_nav/src/cola2_nav/ekf_position_velocity.cpp	/^Eigen::Matrix3d EKFPositionVelocity::getPositionUncertainty() const$/;"	f	class:EKFPositionVelocity
getPositionUncertainty	cola2_core/cola2_nav/src/cola2_nav/ekf_surface_2d.cpp	/^Eigen::Matrix3d EKFSurface2D::getPositionUncertainty() const$/;"	f	class:EKFSurface2D
getPriority	cola2_core/cola2_control/src/cola2_control/low_level_controllers/request.cpp	/^unsigned int Request::getPriority() const$/;"	f	class:Request
getPublishers	stonefish_ros/src/ROSSimulationManager.cpp	/^std::map<std::string, ros::Publisher>& ROSSimulationManager::getPublishers()$/;"	f	class:sf::ROSSimulationManager
getRate	cola2_core/cola2_sim/src/dynamics_node.cpp	/^double Dynamics::getRate() const$/;"	f	class:Dynamics
getRequester	cola2_core/cola2_control/src/cola2_control/low_level_controllers/request.cpp	/^std::string Request::getRequester() const$/;"	f	class:Request
getRotation	cola2_core/cola2_nav/src/cola2_nav/ekf_base.cpp	/^Eigen::Matrix3d EKFBase::getRotation() const$/;"	f	class:EKFBase
getRuleName	cola2_core/cola2_safety/src/cola2_safety/safety_rules/common.cpp	/^SafetyRuleBaseClass::getRuleName() const$/;"	f	class:SafetyRules::SafetyRuleBaseClass
getSentence	cola2_lib/python/cola2/io/nmea_parser.py	/^    def getSentence(self):$/;"	m	class:NMEAParser
getSentence	cola2_lib/src/cola2_lib/io/nmea_parser.cpp	/^std::string NMEAParser::getSentence() const$/;"	f	class:NMEAParser
getServiceServers	stonefish_ros/src/ROSSimulationManager.cpp	/^std::map<std::string, ros::ServiceServer>& ROSSimulationManager::getServiceServers()$/;"	f	class:sf::ROSSimulationManager
getSetZeroVelocityAxes	cola2_core/cola2_control/src/cola2_control/low_level_controllers/auv_controller_base.cpp	/^std::vector<bool> IAUVController::getSetZeroVelocityAxes() const$/;"	f	class:IAUVController
getSetZeroVelocityDepth	cola2_core/cola2_control/src/cola2_control/low_level_controllers/auv_controller_base.cpp	/^double IAUVController::getSetZeroVelocityDepth() const$/;"	f	class:IAUVController
getSetZeroVelocityPriority	cola2_core/cola2_control/src/cola2_control/low_level_controllers/auv_controller_base.cpp	/^int IAUVController::getSetZeroVelocityPriority() const$/;"	f	class:IAUVController
getSimulationClock	stonefish_ros/src/ROSSimulationManager.cpp	/^uint64_t ROSSimulationManager::getSimulationClock()$/;"	f	class:sf::ROSSimulationManager
getSize	cola2_core/cola2_comms/include/cppystruct/format.h	/^constexpr size_t getSize()$/;"	f	namespace:pystruct
getSonarMsgPrototypes	stonefish_ros/src/ROSSimulationManager.cpp	/^std::map<std::string, std::pair<sensor_msgs::ImagePtr, sensor_msgs::ImagePtr>>& ROSSimulationManager::getSonarMsgPrototypes()$/;"	f	class:sf::ROSSimulationManager
getStamp	cola2_core/cola2_control/src/cola2_control/low_level_controllers/request.cpp	/^double Request::getStamp() const$/;"	f	class:Request
getState	cola2_lib/src/cola2_lib/utils/thread_safe_flag.cpp	/^bool ThreadSafeFlag::getState()$/;"	f	class:cola2::utils::ThreadSafeFlag
getStateVector	cola2_core/cola2_nav/src/cola2_nav/ekf_base.cpp	/^Eigen::VectorXd EKFBase::getStateVector() const$/;"	f	class:EKFBase
getStaticConfig	cola2_core/cola2_sim/src/dynamics_node.cpp	/^void Dynamics::getStaticConfig()$/;"	f	class:Dynamics
getStep	cola2_lib/src/cola2_lib/mission/mission.cpp	/^std::shared_ptr<MissionStep> Mission::getStep(const std::size_t i)$/;"	f	class:Mission
getSubscribers	stonefish_ros/src/ROSSimulationManager.cpp	/^std::map<std::string, ros::Subscriber>& ROSSimulationManager::getSubscribers()$/;"	f	class:sf::ROSSimulationManager
getSurgeVelocity	cola2_lib/src/cola2_lib/mission/mission_goto.cpp	/^double MissionGoto::getSurgeVelocity() const$/;"	f	class:MissionGoto
getSurgeVelocity	cola2_lib/src/cola2_lib/mission/mission_park.cpp	/^double MissionPark::getSurgeVelocity() const$/;"	f	class:MissionPark
getSurgeVelocity	cola2_lib/src/cola2_lib/mission/mission_section.cpp	/^double MissionSection::getSurgeVelocity() const$/;"	f	class:MissionSection
getSymlinkTarget	cola2_lib/src/cola2_lib/utils/filesystem.cpp	/^std::string cola2::utils::getSymlinkTarget(const std::string& path)$/;"	f	class:cola2::utils
getThrusterSetpoints	cola2_core/cola2_control/src/cola2_control/low_level_controllers/auv_controller_base.cpp	/^Eigen::VectorXd IAUVController::getThrusterSetpoints() const$/;"	f	class:IAUVController
getTime	cola2_lib/src/cola2_lib/mission/mission_park.cpp	/^double MissionPark::getTime() const$/;"	f	class:MissionPark
getTimeStamp	cola2_core/cola2_log/startup_processes/shutdown_logger_startup_process.cpp	/^  std::string getTimeStamp() const$/;"	f	class:ShutdownLogger	file:
getToleranceXY	cola2_lib/src/cola2_lib/mission/mission_goto.cpp	/^double MissionGoto::getToleranceXY() const$/;"	f	class:MissionGoto
getToleranceXY	cola2_lib/src/cola2_lib/mission/mission_section.cpp	/^double MissionSection::getToleranceXY() const$/;"	f	class:MissionSection
getTransform	cola2_core/cola2_nav/src/cola2_nav/ekf_base.cpp	/^Eigen::Isometry3d EKFBase::getTransform() const$/;"	f	class:EKFBase
getTransform	cola2_lib_ros/src/cola2_lib_ros/transform_handler.cpp	/^bool cola2::ros::TransformHandler::getTransform(const std::string& frame, Eigen::Affine3d& transform)$/;"	f	class:cola2::ros::TransformHandler
getTransform	cola2_lib_ros/src/cola2_lib_ros/transform_handler.cpp	/^bool cola2::ros::TransformHandler::getTransform(const std::string& frame, Eigen::Isometry3d& transform)$/;"	f	class:cola2::ros::TransformHandler
getTypeOfItem	cola2_core/cola2_comms/include/cppystruct/format.h	/^constexpr FormatType getTypeOfItem(Fmt)$/;"	f	namespace:pystruct
getTypeOfItem	cola2_core/cola2_comms/include/cppystruct/format.h	/^constexpr RawFormatType getTypeOfItem(std::index_sequence<Is...>)$/;"	f	namespace:pystruct
getUnresolvedNodeName	cola2_lib_ros/src/cola2_lib_ros/this_node.cpp	/^std::string cola2::ros::getUnresolvedNodeName()$/;"	f	class:cola2::ros
getUseYaw	cola2_lib/src/cola2_lib/mission/mission_park.cpp	/^bool MissionPark::getUseYaw() const$/;"	f	class:MissionPark
getValues	cola2_core/cola2_control/src/cola2_control/low_level_controllers/request.cpp	/^std::vector<double> Request::getValues() const$/;"	f	class:Request
getVariableConfig	cola2_core/cola2_sim/src/dynamics_node.cpp	/^void Dynamics::getVariableConfig()$/;"	f	class:Dynamics
getVelocity	cola2_core/cola2_nav/src/cola2_nav/ekf_position_velocity.cpp	/^Eigen::Vector3d EKFPositionVelocity::getVelocity() const$/;"	f	class:EKFPositionVelocity
getVelocity	cola2_core/cola2_nav/src/cola2_nav/ekf_surface_2d.cpp	/^Eigen::Vector3d EKFSurface2D::getVelocity() const$/;"	f	class:EKFSurface2D
getVelocityUncertainty	cola2_core/cola2_nav/src/cola2_nav/ekf_position_velocity.cpp	/^Eigen::Matrix3d EKFPositionVelocity::getVelocityUncertainty() const$/;"	f	class:EKFPositionVelocity
getVelocityUncertainty	cola2_core/cola2_nav/src/cola2_nav/ekf_surface_2d.cpp	/^Eigen::Matrix3d EKFSurface2D::getVelocityUncertainty() const$/;"	f	class:EKFSurface2D
get_action_id	cola2_lib/python/cola2/mission/mission_types.py	/^    def get_action_id(self):$/;"	m	class:MissionAction
get_action_id	cola2_lib/python/cola2/mission/mission_types_v1.py	/^    def get_action_id(self):$/;"	m	class:MissionAction
get_actions	cola2_lib/python/cola2/mission/mission_types.py	/^    def get_actions(self):$/;"	m	class:MissionStep
get_actions	cola2_lib/python/cola2/mission/mission_types_v1.py	/^    def get_actions(self):$/;"	m	class:MissionStep
get_altitude_mode	cola2_lib/python/cola2/mission/mission_types_v1.py	/^    def get_altitude_mode(self):$/;"	m	class:MissionPosition
get_config	cola2_core/cola2_control/src/logitech_fx10_to_teleoperation_node.py	/^    def get_config(self):$/;"	m	class:LogitechFX10
get_config	cola2_core/cola2_control/src/teleoperation_node.py	/^    def get_config(self):$/;"	m	class:Teleoperation
get_config	cola2_core/cola2_log/src/default_param_handler_node.py	/^    def get_config(self):$/;"	m	class:DefaultParamHandler
get_config	cola2_core/cola2_sim/src/sim_auv_nav_sensors_node.py	/^    def get_config(self):$/;"	m	class:SimAUVNavSensors
get_dynamic_transform	cola2_lib_ros/python/cola2_ros/transform_handler.py	/^    def get_dynamic_transform(self, frame):$/;"	m	class:TransformHandler
get_final_position	cola2_lib/python/cola2/mission/mission_types_v1.py	/^    def get_final_position(self):$/;"	m	class:MissionSection
get_initial_position	cola2_lib/python/cola2/mission/mission_types_v1.py	/^    def get_initial_position(self):$/;"	m	class:MissionSection
get_io_service	cola2_lib/include/cola2_lib/io/io_base.h	/^  boost::asio::io_service& get_io_service()$/;"	f	class:cola2::io::IOBase
get_latitude	cola2_lib/python/cola2/mission/mission_types_v1.py	/^    def get_latitude(self):$/;"	m	class:MissionPosition
get_length	cola2_lib/python/cola2/mission/mission_types.py	/^    def get_length(self):$/;"	m	class:Mission
get_length	cola2_lib/python/cola2/mission/mission_types_v1.py	/^    def get_length(self):$/;"	m	class:Mission
get_longitude	cola2_lib/python/cola2/mission/mission_types_v1.py	/^    def get_longitude(self):$/;"	m	class:MissionPosition
get_maneuver	cola2_lib/python/cola2/mission/mission_types.py	/^    def get_maneuver(self):$/;"	m	class:MissionStep
get_maneuver	cola2_lib/python/cola2/mission/mission_types_v1.py	/^    def get_maneuver(self):$/;"	m	class:MissionStep
get_maneuver_type	cola2_lib/python/cola2/mission/mission_types.py	/^    def get_maneuver_type(self):$/;"	m	class:MissionManeuver
get_maneuver_type	cola2_lib/python/cola2/mission/mission_types_v1.py	/^    def get_maneuver_type(self):$/;"	m	class:MissionManeuver
get_modem_time_	cola2_core/cola2_comms/src/comms_node.cpp	/^  bool get_modem_time_ = false;                           \/\/!< flag to know if modem_time_ must be updated$/;"	m	class:CommsNode	file:
get_namespace	cola2_lib_ros/python/cola2_ros/this_node.py	/^def get_namespace():$/;"	f
get_namespace_no_initial_dash	cola2_lib_ros/python/cola2_ros/this_node.py	/^def get_namespace_no_initial_dash():$/;"	f
get_parameters	cola2_lib/python/cola2/mission/mission_types.py	/^    def get_parameters(self):$/;"	m	class:MissionAction
get_parameters	cola2_lib/python/cola2/mission/mission_types_v1.py	/^    def get_parameters(self):$/;"	m	class:MissionAction
get_position	cola2_lib/python/cola2/mission/mission_types_v1.py	/^    def get_position(self):$/;"	m	class:MissionPark
get_position	cola2_lib/python/cola2/mission/mission_types_v1.py	/^    def get_position(self):$/;"	m	class:MissionSection
get_position	cola2_lib/python/cola2/mission/mission_types_v1.py	/^    def get_position(self):$/;"	m	class:MissionWaypoint
get_ros_params	cola2_lib_ros/python/cola2_ros/param_loader.py	/^def get_ros_params(obj, params):$/;"	f
get_speed	cola2_lib/python/cola2/mission/mission_types_v1.py	/^    def get_speed(self):$/;"	m	class:MissionPark
get_speed	cola2_lib/python/cola2/mission/mission_types_v1.py	/^    def get_speed(self):$/;"	m	class:MissionSection
get_speed	cola2_lib/python/cola2/mission/mission_types_v1.py	/^    def get_speed(self):$/;"	m	class:MissionWaypoint
get_step	cola2_lib/python/cola2/mission/mission_types.py	/^    def get_step(self, step_id):$/;"	m	class:Mission
get_step	cola2_lib/python/cola2/mission/mission_types_v1.py	/^    def get_step(self, step_id):$/;"	m	class:Mission
get_time	cola2_lib/python/cola2/mission/mission_types_v1.py	/^    def get_time(self):$/;"	m	class:MissionPark
get_tolerance	cola2_lib/python/cola2/mission/mission_types_v1.py	/^    def get_tolerance(self):$/;"	m	class:MissionPark
get_tolerance	cola2_lib/python/cola2/mission/mission_types_v1.py	/^    def get_tolerance(self):$/;"	m	class:MissionSection
get_tolerance	cola2_lib/python/cola2/mission/mission_types_v1.py	/^    def get_tolerance(self):$/;"	m	class:MissionWaypoint
get_transform	cola2_lib_ros/python/cola2_ros/transform_handler.py	/^    def get_transform(self, frame):$/;"	m	class:TransformHandler
get_unresolved_node_name	cola2_lib_ros/python/cola2_ros/this_node.py	/^def get_unresolved_node_name():$/;"	f
get_z	cola2_lib/python/cola2/mission/mission_types_v1.py	/^    def get_z(self):$/;"	m	class:MissionPosition
goTo	cola2_core/cola2_control/src/captain_node.cpp	/^void Captain::goTo()$/;"	f	class:Captain
goto_enabled_	cola2_core/cola2_control/src/captain_node.cpp	/^  bool goto_enabled_;$/;"	m	class:Captain	file:
goto_feedback_	cola2_core/cola2_control/src/captain_node.cpp	/^  cola2_msgs::CaptainStateFeedback goto_feedback_;$/;"	m	class:Captain	file:
gps_data_timeout_	cola2_core/cola2_safety/include/cola2_safety/safety_rules/navigator.h	/^  double gps_data_timeout_;$/;"	m	class:SafetyRules::Navigator
gps_samples_	cola2_core/cola2_nav/include/cola2_nav/ekf_base_ros.h	/^  size_t gps_samples_ = 0;                    \/\/!< number of valid GPS samples gathered$/;"	m	class:EKFBaseROS
gps_samples_to_init_	cola2_core/cola2_nav/include/cola2_nav/ekf_base_ros.h	/^    int gps_samples_to_init_;          \/\/!< number of valid GPS messages before initializing GPS$/;"	m	struct:EKFBaseROS::Config
gps_samples_wrong_before_init_	cola2_core/cola2_nav/include/cola2_nav/ekf_base_ros.h	/^  size_t gps_samples_wrong_before_init_ = 0;  \/\/!< number of invalid GPS samples before GPS init$/;"	m	class:EKFBaseROS
gradiansToRadians	cola2_lib/src/cola2_lib/utils/angles.cpp	/^double gradiansToRadians(const double value)$/;"	f	namespace:cola2::utils
gravityAndBuoyancyForce	cola2_core/cola2_sim/src/dynamics_node.cpp	/^Eigen::Vector6d Dynamics::gravityAndBuoyancyForce(const Eigen::Vector6d& pos)$/;"	f	class:Dynamics
hasBool	cola2_core/cola2_safety/src/cola2_safety/safety_rules/common.cpp	/^SafetyRuleBaseClass::hasBool(const std::string& var_name)$/;"	f	class:SafetyRules::SafetyRuleBaseClass
hasDouble	cola2_core/cola2_safety/src/cola2_safety/safety_rules/common.cpp	/^SafetyRuleBaseClass::hasDouble(const std::string& var_name)$/;"	f	class:SafetyRules::SafetyRuleBaseClass
hasInt	cola2_core/cola2_safety/src/cola2_safety/safety_rules/common.cpp	/^SafetyRuleBaseClass::hasInt(const std::string& var_name)$/;"	f	class:SafetyRules::SafetyRuleBaseClass
header	cola2_lib/python/cola2/io/nmea_parser.py	/^    def header(self):$/;"	m	class:NMEAParser
header	cola2_lib/src/cola2_lib/io/nmea_parser.cpp	/^std::string NMEAParser::header() const$/;"	f	class:NMEAParser
heave_mode	cola2_core/cola2_control/include/cola2_control/controllers/types.h	/^  std::uint64_t heave_mode;$/;"	m	class:control::Request
heave_mode_	cola2_lib/include/cola2_lib/mission/mission_goto.h	/^  HeaveMode heave_mode_;      \/\/!< Heave mode to define depth\/altitude behaviour.$/;"	m	class:MissionGoto
heave_mode_	cola2_lib/include/cola2_lib/mission/mission_park.h	/^  HeaveMode heave_mode_;      \/\/!< Heave mode to define depth\/altitude behaviour.$/;"	m	class:MissionPark
heave_mode_	cola2_lib/include/cola2_lib/mission/mission_section.h	/^  HeaveMode heave_mode_;      \/\/!< Heave mode to define depth\/altitude behaviour.$/;"	m	class:MissionSection
highlight_language	cola2_lib/doc/conf.py	/^highlight_language = 'python'$/;"	v
highlight_language	cola2_lib_ros/doc/conf.py	/^highlight_language = 'python'$/;"	v
holonomic_keep_position_config	cola2_core/cola2_control/src/pilot_node.cpp	/^    HolonomicKeepPositionControllerConfig holonomic_keep_position_config;$/;"	m	struct:Pilot::__anon4	file:
holonomic_keep_position_controller_	cola2_core/cola2_control/src/pilot_node.cpp	/^  std::shared_ptr<HolonomicKeepPositionController> holonomic_keep_position_controller_;$/;"	m	class:Pilot	file:
html_logo	stonefish_ros/docs/conf.py	/^html_logo = 'images\/logo.svg'$/;"	v
html_sidebars	cola2_lib/doc/conf.py	/^html_sidebars = {$/;"	v
html_sidebars	cola2_lib_ros/doc/conf.py	/^html_sidebars = {$/;"	v
html_static_path	stonefish_ros/docs/conf.py	/^html_static_path = ['_static']$/;"	v
html_theme	cola2_lib/doc/conf.py	/^html_theme = 'sphinx_rtd_theme'$/;"	v
html_theme	cola2_lib_ros/doc/conf.py	/^html_theme = 'sphinx_rtd_theme'$/;"	v
html_theme	stonefish_ros/docs/conf.py	/^html_theme = 'sphinx_rtd_theme'$/;"	v
html_theme_options	stonefish_ros/docs/conf.py	/^html_theme_options = {$/;"	v
htmlhelp_basename	stonefish_ros/docs/conf.py	/^htmlhelp_basename = 'stonefish_ros_doc'$/;"	v
i_limit_	cola2_core/cola2_control/include/cola2_control/low_level_controllers/pid.h	/^  double i_limit_;$/;"	m	class:PID
identifier	cola2_core/cola2_comms/src/comms_node.cpp	/^    std::string identifier;       \/\/!< letter that identifies the sender$/;"	m	struct:CommsNode::Config	file:
idle_no_altitude_goes_up	cola2_core/cola2_control/src/captain_node.cpp	/^    bool idle_no_altitude_goes_up;$/;"	m	struct:Captain::__anon3	file:
impl	cola2_core/cola2_comms/include/cppystruct/data_view.h	/^namespace impl$/;"	n	namespace:pystruct::data
imu_data_timeout_	cola2_core/cola2_safety/include/cola2_safety/safety_rules/navigator.h	/^  double imu_data_timeout_;$/;"	m	class:SafetyRules::Navigator
in_safety_keep_position_	cola2_core/cola2_safety/src/safety_supervisor_node.cpp	/^  bool in_safety_keep_position_;$/;"	m	class:SafetySupervisor	file:
init	cola2_core/cola2_control/src/controller_node.cpp	/^  void init(std::shared_ptr<OnlyThrustersController> auv_controller_ptr, const double& period)$/;"	f	class:OnlyThrustersROSController
initBase	cola2_core/cola2_control/src/cola2_control/ros_controller/auv_ros_controller.cpp	/^void IAUVROSController::initBase(std::shared_ptr<IAUVController> auv_controller_ptr, double period)$/;"	f	class:IAUVROSController
initPoseController	cola2_core/cola2_control/src/cola2_control/low_level_controllers/only_thrusters_controller.cpp	/^void OnlyThrustersController::initPoseController()$/;"	f	class:OnlyThrustersController
initTwistController	cola2_core/cola2_control/src/cola2_control/low_level_controllers/only_thrusters_controller.cpp	/^void OnlyThrustersController::initTwistController()$/;"	f	class:OnlyThrustersController
initTwistPolyController	cola2_core/cola2_control/src/cola2_control/low_level_controllers/only_thrusters_controller.cpp	/^void OnlyThrustersController::initTwistPolyController()$/;"	f	class:OnlyThrustersController
init_depth_	cola2_core/cola2_nav/include/cola2_nav/ekf_base_ros.h	/^  bool init_depth_ = false;         \/\/!< init sensor depth$/;"	m	class:EKFBaseROS
init_depth_offset_	cola2_core/cola2_nav/include/cola2_nav/ekf_base_ros.h	/^  bool init_depth_offset_ = false;  \/\/!< init depth offset$/;"	m	class:EKFBaseROS
init_dvl_	cola2_core/cola2_nav/include/cola2_nav/ekf_base_ros.h	/^  bool init_dvl_ = false;           \/\/!< init sensor dvl$/;"	m	class:EKFBaseROS
init_ecef_x_	cola2_lib/include/cola2_lib/utils/ned.h	/^  double init_ecef_x_;$/;"	m	class:cola2::utils::NED
init_ecef_y_	cola2_lib/include/cola2_lib/utils/ned.h	/^  double init_ecef_y_;$/;"	m	class:cola2::utils::NED
init_ecef_z_	cola2_lib/include/cola2_lib/utils/ned.h	/^  double init_ecef_z_;$/;"	m	class:cola2::utils::NED
init_ekf_	cola2_core/cola2_nav/include/cola2_nav/ekf_base.h	/^  bool init_ekf_ = false;                         \/\/!< filter initialized$/;"	m	class:EKFBase
init_gps_	cola2_core/cola2_nav/include/cola2_nav/ekf_base_ros.h	/^  bool init_gps_ = false;           \/\/!< init sensor gps$/;"	m	class:EKFBaseROS
init_h_	cola2_lib/include/cola2_lib/utils/ned.h	/^  double init_h_;$/;"	m	class:cola2::utils::NED
init_imu_	cola2_core/cola2_nav/include/cola2_nav/ekf_base_ros.h	/^  bool init_imu_ = false;           \/\/!< init sensor imu$/;"	m	class:EKFBaseROS
init_lat_	cola2_lib/include/cola2_lib/utils/ned.h	/^  double init_lat_;$/;"	m	class:cola2::utils::NED
init_lon_	cola2_lib/include/cola2_lib/utils/ned.h	/^  double init_lon_;$/;"	m	class:cola2::utils::NED
init_navigation_	cola2_core/cola2_comms/src/comms_node.cpp	/^  bool init_navigation_ = false;                          \/\/!< navigation arrived$/;"	m	class:CommsNode	file:
init_ned_	cola2_core/cola2_nav/include/cola2_nav/ekf_base_ros.h	/^  bool init_ned_ = false;           \/\/!< init NED$/;"	m	class:EKFBaseROS
init_time_	cola2_core/cola2_safety/src/safety_supervisor_node.cpp	/^  double init_time_;$/;"	m	class:SafetySupervisor	file:
init_time_	cola2_core/cola2_safety/src/watchdog_timer_node.cpp	/^  double init_time_;$/;"	m	class:WatchdogTimer	file:
initial_depth	cola2_core/cola2_control/include/cola2_control/controllers/types.h	/^  double initial_depth;$/;"	m	class:control::Request
initial_depth_	cola2_lib/include/cola2_lib/mission/mission_section.h	/^  double initial_depth_;      \/\/!< Initial depth in meters.$/;"	m	class:MissionSection
initial_east	cola2_core/cola2_control/include/cola2_control/controllers/types.h	/^  double initial_east;$/;"	m	class:control::Request
initial_latitude_	cola2_lib/include/cola2_lib/mission/mission_section.h	/^  double initial_latitude_;   \/\/!< Initial latitude in decimal degrees.$/;"	m	class:MissionSection
initial_longitude_	cola2_lib/include/cola2_lib/mission/mission_section.h	/^  double initial_longitude_;  \/\/!< Initial longitude in decimal degrees.$/;"	m	class:MissionSection
initial_north	cola2_core/cola2_control/include/cola2_control/controllers/types.h	/^  double initial_north;$/;"	m	class:control::Request
initial_state_covariance_	cola2_core/cola2_nav/include/cola2_nav/ekf_base_ros.h	/^    std::vector<double> initial_state_covariance_;     \/\/!< initial covariance of the filter$/;"	m	struct:EKFBaseROS::Config
initial_state_vector_size_	cola2_core/cola2_nav/include/cola2_nav/ekf_base.h	/^  const unsigned int initial_state_vector_size_;  \/\/!< size of state vector$/;"	m	class:EKFBase
initial_time_	cola2_core/cola2_safety/src/safe_depth_altitude_node.cpp	/^  double initial_time_;$/;"	m	class:SafeDepthAltitude	file:
initializeMassMatrix	cola2_core/cola2_sim/src/dynamics_node.cpp	/^void Dynamics::initializeMassMatrix()$/;"	f	class:Dynamics
initialize_depth_sensor_offset_	cola2_core/cola2_nav/include/cola2_nav/ekf_base_ros.h	/^    bool initialize_depth_sensor_offset_;   \/\/!< compute depth sensor offset when vehicle is at surface$/;"	m	struct:EKFBaseROS::Config
initialize_filter_from_gps_	cola2_core/cola2_nav/include/cola2_nav/ekf_base_ros.h	/^    bool initialize_filter_from_gps_;  \/\/!< initial filter position taken from GPS$/;"	m	struct:EKFBaseROS::Config
insert_step	cola2_lib/python/cola2/mission/mission_types.py	/^    def insert_step(self, step_id, step):$/;"	m	class:Mission
insert_step	cola2_lib/python/cola2/mission/mission_types_v1.py	/^    def insert_step(self, step_id, step):$/;"	m	class:Mission
int_vars_	cola2_core/cola2_safety/include/cola2_safety/safety_rules/common.h	/^  std::map<std::string, int> int_vars_;$/;"	m	class:SafetyRules::SafetyRuleBaseClass
internal	cola2_core/cola2_comms/include/cppystruct/pack.h	/^namespace internal$/;"	n	namespace:pystruct
internal	cola2_core/cola2_comms/include/cppystruct/string.h	/^namespace internal$/;"	n	namespace:pystruct
internal	cola2_core/cola2_comms/include/cppystruct/unpack.h	/^namespace internal$/;"	n	namespace:pystruct
inverseDynamic	cola2_core/cola2_sim/src/dynamics_node.cpp	/^Eigen::Vector6d Dynamics::inverseDynamic(const Eigen::Vector6d& pos, const Eigen::Vector6d& vel,$/;"	f	class:Dynamics
io	cola2_lib/include/cola2_lib/io/io_base.h	/^namespace io$/;"	n	namespace:cola2
io	cola2_lib/include/cola2_lib/io/serial_port.h	/^namespace io$/;"	n	namespace:cola2
io	cola2_lib/include/cola2_lib/io/tcp_socket.h	/^namespace io$/;"	n	namespace:cola2
io	cola2_lib/include/cola2_lib/io/udp_socket.h	/^namespace io$/;"	n	namespace:cola2
io	cola2_lib/src/cola2_lib/io/io_base.cpp	/^namespace io$/;"	n	namespace:cola2	file:
io	cola2_lib/src/cola2_lib/io/serial_port.cpp	/^namespace io$/;"	n	namespace:cola2	file:
io	cola2_lib/src/cola2_lib/io/tcp_socket.cpp	/^namespace io$/;"	n	namespace:cola2	file:
io	cola2_lib/src/cola2_lib/io/udp_socket.cpp	/^namespace io$/;"	n	namespace:cola2	file:
io_context_	cola2_lib/include/cola2_lib/io/serial_port.h	/^  boost::asio::io_context io_context_;$/;"	m	class:cola2::io::SerialPort
io_context_	cola2_lib/include/cola2_lib/io/tcp_socket.h	/^  boost::asio::io_context io_context_;$/;"	m	class:cola2::io::TcpSocket
io_service_	cola2_lib/include/cola2_lib/io/io_base.h	/^  boost::asio::io_service io_service_;  \/\/!< I\/O service for reading\/writing$/;"	m	class:cola2::io::IOBase
ip	cola2_lib/include/cola2_lib/io/tcp_socket.h	/^  std::string ip;     \/\/!< IP of the TCP connection.$/;"	m	struct:cola2::io::TCPConfig
ip_	cola2_lib/include/cola2_lib/io/udp_socket.h	/^  std::string ip_;     \/\/!< IP for the UDP connection.$/;"	m	class:cola2::io::udp_socket::Client
isAllDisabled	cola2_core/cola2_control/src/cola2_control/low_level_controllers/request.cpp	/^bool Request::isAllDisabled() const$/;"	f	class:Request
isBigEndian	cola2_core/cola2_comms/include/cppystruct/data_view.h	/^  bool isBigEndian;$/;"	m	struct:pystruct::data_view
isBigEndian	cola2_core/cola2_comms/include/cppystruct/format.h	/^  static constexpr bool isBigEndian()$/;"	f	struct:pystruct::FormatMode
isDigit	cola2_core/cola2_comms/include/cppystruct/string.h	/^constexpr bool isDigit(char ch)$/;"	f	namespace:pystruct::internal
isFileAccessible	cola2_lib/src/cola2_lib/utils/filesystem.cpp	/^bool cola2::utils::isFileAccessible(const std::string& path)$/;"	f	class:cola2::utils
isFinAllocatorEnable	cola2_core/cola2_control/src/cola2_control/low_level_controllers/auv_controller_base.cpp	/^bool IAUVController::isFinAllocatorEnable() const$/;"	f	class:IAUVController
isFormatChar	cola2_core/cola2_comms/include/cppystruct/format.h	/^constexpr bool isFormatChar(char formatChar)$/;"	f	namespace:pystruct
isFormatMode	cola2_core/cola2_comms/include/cppystruct/format.h	/^constexpr bool isFormatMode(char formatChar)$/;"	f	namespace:pystruct
isIdle	cola2_lib_ros/python/cola2_ros/captain_helper.py	/^    def isIdle(self):$/;"	m	class:WaitForIdleHelper
isInitialized	cola2_core/cola2_nav/src/cola2_nav/ekf_base.cpp	/^bool EKFBase::isInitialized() const$/;"	f	class:EKFBase
isNative	cola2_core/cola2_comms/include/cppystruct/format.h	/^  static constexpr bool isNative()$/;"	f	struct:pystruct::FormatMode
isOpen	cola2_lib/src/cola2_lib/io/serial_port.cpp	/^bool SerialPort::isOpen() const$/;"	f	class:cola2::io::SerialPort
isPoseControllerEnable	cola2_core/cola2_control/src/cola2_control/low_level_controllers/auv_controller_base.cpp	/^bool IAUVController::isPoseControllerEnable() const$/;"	f	class:IAUVController
isSafety	cola2_lib_ros/python/cola2_ros/captain_helper.py	/^    def isSafety(self):$/;"	m	class:WaitForIdleHelper
isString	cola2_core/cola2_comms/include/cppystruct/format.h	/^  constexpr bool isString()$/;"	f	struct:pystruct::FormatType
isString	cola2_core/cola2_comms/include/cppystruct/format.h	/^  constexpr bool isString()$/;"	f	struct:pystruct::RawFormatType
isSymlink	cola2_lib/src/cola2_lib/utils/filesystem.cpp	/^bool cola2::utils::isSymlink(const std::string& path)$/;"	f	class:cola2::utils
isThrusterAllocatorEnable	cola2_core/cola2_control/src/cola2_control/low_level_controllers/auv_controller_base.cpp	/^bool IAUVController::isThrusterAllocatorEnable() const$/;"	f	class:IAUVController
isValid	cola2_lib/python/cola2/io/nmea_parser.py	/^    def isValid(self):$/;"	m	class:NMEAParser
isValid	cola2_lib/src/cola2_lib/io/nmea_parser.cpp	/^bool NMEAParser::isValid() const$/;"	f	class:NMEAParser
isVelocityControllerEnable	cola2_core/cola2_control/src/cola2_control/low_level_controllers/auv_controller_base.cpp	/^bool IAUVController::isVelocityControllerEnable() const$/;"	f	class:IAUVController
is_fin_allocator_enable_	cola2_core/cola2_control/include/cola2_control/low_level_controllers/auv_controller_base.h	/^  bool is_fin_allocator_enable_;$/;"	m	class:IAUVController
is_init_	cola2_core/cola2_control/include/cola2_control/low_level_controllers/only_thruster_allocator.h	/^  bool is_init_;$/;"	m	class:OnlyThrusterAllocator
is_pilot_actionlib_running_	cola2_core/cola2_control/src/captain_node.cpp	/^  bool is_pilot_actionlib_running_;$/;"	m	class:Captain	file:
is_pose_controller_enable_	cola2_core/cola2_control/include/cola2_control/low_level_controllers/auv_controller_base.h	/^  bool is_pose_controller_enable_;$/;"	m	class:IAUVController
is_thruster_allocator_enable_	cola2_core/cola2_control/include/cola2_control/low_level_controllers/auv_controller_base.h	/^  bool is_thruster_allocator_enable_;$/;"	m	class:IAUVController
is_trigger_	cola2_lib/include/cola2_lib/mission/mission_action.h	/^  bool is_trigger_;                      \/\/!< Flag to store if the service is a trigger service.$/;"	m	class:MissionAction
is_velocity_controller_enable_	cola2_core/cola2_control/include/cola2_control/low_level_controllers/auv_controller_base.h	/^  bool is_velocity_controller_enable_;$/;"	m	class:IAUVController
iterate	cola2_core/cola2_control/src/cola2_control/joystickbase.py	/^    def iterate(self, event):$/;"	m	class:JoystickBase
iterate	cola2_core/cola2_log/src/computer_logger_node.py	/^    def iterate(self, event):$/;"	m	class:ComputerLogger
iterate	cola2_core/cola2_sim/src/dynamics_node.cpp	/^void Dynamics::iterate()$/;"	f	class:Dynamics
iteration	cola2_core/cola2_control/src/cola2_control/low_level_controllers/only_thrusters_controller.cpp	/^void OnlyThrustersController::iteration(double current_time)$/;"	f	class:OnlyThrustersController
join	cola2_lib/src/cola2_lib/io/udp_socket.cpp	/^Server& Server::join()$/;"	f	class:cola2::io::udp_socket::Server
joyCallback	cola2_core/cola2_control/src/open_loop_node.cpp	/^OpenLoop::joyCallback(const sensor_msgs::Joy& msg)$/;"	f	class:OpenLoop
k_cd_fins	cola2_core/cola2_sim/src/dynamics_node.cpp	/^    double k_cd_fins;$/;"	m	struct:Dynamics::Config	file:
k_cl_fins	cola2_core/cola2_sim/src/dynamics_node.cpp	/^    double k_cl_fins;$/;"	m	struct:Dynamics::Config	file:
keepPosition	cola2_core/cola2_control/src/captain_node.cpp	/^void Captain::keepPosition()$/;"	f	class:Captain
keep_position_feedback_	cola2_core/cola2_control/src/captain_node.cpp	/^  cola2_msgs::CaptainStateFeedback keep_position_feedback_;$/;"	m	class:Captain	file:
keyboardStopHandler	cola2_core/cola2_control/src/keyboard_node.cpp	/^void keyboardStopHandler(int)$/;"	f
keyboard_requested_shutdown	cola2_core/cola2_control/src/keyboard_node.cpp	/^sig_atomic_t volatile keyboard_requested_shutdown = 0;$/;"	v
kinematics	cola2_core/cola2_sim/src/dynamics_node.cpp	/^Eigen::Vector6d Dynamics::kinematics(const Eigen::Vector6d& pos, const Eigen::Vector6d& vel)$/;"	f	class:Dynamics
kp	cola2_core/cola2_control/include/cola2_control/controllers/anchor.h	/^  double kp;$/;"	m	struct:__anon5
kp_	cola2_core/cola2_control/include/cola2_control/low_level_controllers/pid.h	/^  double kp_;$/;"	m	class:PID
lambda	cola2_lib/include/cola2_lib/wmmc/GeomagnetismHeader.h	/^    double lambda; \/* longitude *\/$/;"	m	struct:__anon15
lambda	cola2_lib/include/cola2_lib/wmmc/GeomagnetismHeader.h	/^    double lambda; \/* longitude*\/$/;"	m	struct:__anon16
language	cola2_lib/doc/conf.py	/^language = None$/;"	v
language	cola2_lib_ros/doc/conf.py	/^language = None$/;"	v
language	stonefish_ros/docs/conf.py	/^language = None$/;"	v
last_ack_	cola2_core/cola2_safety/include/cola2_safety/safety_rules/teleoperation.h	/^  double last_ack_;$/;"	m	class:SafetyRules::Teleoperation
last_active	cola2_core/cola2_control/src/captain_node.cpp	/^    ros::Time last_active;$/;"	m	struct:Captain::MissionWithState	file:
last_altitude_	cola2_core/cola2_control/include/cola2_control/ros_controller/auv_ros_controller_base.h	/^  double last_altitude_;$/;"	m	class:IAUVROSController
last_altitude_age_	cola2_core/cola2_control/include/cola2_control/ros_controller/auv_ros_controller_base.h	/^  double last_altitude_age_;$/;"	m	class:IAUVROSController
last_altitude_data_	cola2_core/cola2_safety/include/cola2_safety/safety_rules/navigator.h	/^  double last_altitude_data_;$/;"	m	class:SafetyRules::Navigator
last_altitude_time_	cola2_core/cola2_nav/include/cola2_nav/ekf_base_ros.h	/^  double last_altitude_time_ = 0.0;           \/\/!< last time altitude received$/;"	m	class:EKFBaseROS
last_altitude_wwr_	cola2_core/cola2_safety/include/cola2_safety/safety_rules/navigator.h	/^  double last_altitude_wwr_;$/;"	m	class:SafetyRules::Navigator
last_autonomous_	cola2_core/cola2_safety/include/cola2_safety/safety_rules/teleoperation.h	/^  double last_autonomous_;$/;"	m	class:SafetyRules::Teleoperation
last_captain_status_	cola2_core/cola2_safety/include/cola2_safety/safety_rules/teleoperation.h	/^  double last_captain_status_;$/;"	m	class:SafetyRules::Teleoperation
last_captain_status_time_	cola2_core/cola2_safety/src/safety_supervisor_node.cpp	/^  double last_captain_status_time_;$/;"	m	class:SafetySupervisor	file:
last_curent_step_	cola2_core/cola2_safety/include/cola2_safety/safety_rules/captain.h	/^  double last_curent_step_;$/;"	m	class:SafetyRules::Captain
last_data_	cola2_lib_ros/include/cola2_lib_ros/diagnostic_helper.h	/^  double last_data_;                                 \/\/!< Last data.$/;"	m	class:cola2::ros::DiagnosticHelper
last_depth_	cola2_core/cola2_control/include/cola2_control/ros_controller/auv_ros_controller_base.h	/^  double last_depth_;$/;"	m	class:IAUVROSController
last_depth_data_	cola2_core/cola2_safety/include/cola2_safety/safety_rules/navigator.h	/^  double last_depth_data_;$/;"	m	class:SafetyRules::Navigator
last_depth_time_	cola2_core/cola2_nav/include/cola2_nav/ekf_base_ros.h	/^  double last_depth_time_ = 0.0;              \/\/!< last time depth received$/;"	m	class:EKFBaseROS
last_diagnostic_	cola2_core/cola2_safety/include/cola2_safety/safety_rules/common.h	/^  double last_diagnostic_;$/;"	m	class:SafetyRules::SafetyRuleBaseClass
last_diagnostics_level_	cola2_core/cola2_comms/src/comms_node.cpp	/^  std::size_t last_diagnostics_level_ = 0;                \/\/!< this stores the last level reported by the modem$/;"	m	class:CommsNode	file:
last_dvl_data_	cola2_core/cola2_safety/include/cola2_safety/safety_rules/navigator.h	/^  double last_dvl_data_;$/;"	m	class:SafetyRules::Navigator
last_dvl_time_	cola2_core/cola2_nav/include/cola2_nav/ekf_base_ros.h	/^  double last_dvl_time_ = 0.0;                \/\/!< last time dvl received$/;"	m	class:EKFBaseROS
last_ekf_init_time_	cola2_core/cola2_nav/include/cola2_nav/ekf_base_ros.h	/^  double last_ekf_init_time_ = 0.0;           \/\/!< last time ekf initialized$/;"	m	class:EKFBaseROS
last_emergency_surface_	cola2_core/cola2_safety/src/safety_supervisor_checker_node.cpp	/^  double last_emergency_surface_;$/;"	m	class:SafetySupervisorChecker	file:
last_emergency_surface_time_	cola2_core/cola2_safety/src/safety_supervisor_node.cpp	/^  double last_emergency_surface_time_;$/;"	m	class:SafetySupervisor	file:
last_fins_setpoint_sec_	cola2_core/cola2_sim/src/dynamics_node.cpp	/^  double last_thrusters_setpoint_sec_, last_fins_setpoint_sec_;$/;"	m	class:Dynamics	file:
last_good_data_	cola2_core/cola2_safety/include/cola2_safety/safety_rules/navigator.h	/^  double last_good_data_;$/;"	m	class:SafetyRules::Navigator
last_gps_data_	cola2_core/cola2_safety/include/cola2_safety/safety_rules/navigator.h	/^  double last_gps_data_;$/;"	m	class:SafetyRules::Navigator
last_gps_sample_time_	cola2_core/cola2_nav/include/cola2_nav/ekf_base_ros.h	/^  double last_gps_sample_time_ = 0.0;         \/\/!< last time of GPS valid sample$/;"	m	class:EKFBaseROS
last_gps_time_	cola2_core/cola2_nav/include/cola2_nav/ekf_base_ros.h	/^  double last_gps_time_ = 0.0;                \/\/!< last time gps received$/;"	m	class:EKFBaseROS
last_imu_data_	cola2_core/cola2_safety/include/cola2_safety/safety_rules/navigator.h	/^  double last_imu_data_;$/;"	m	class:SafetyRules::Navigator
last_imu_time_	cola2_core/cola2_nav/include/cola2_nav/ekf_base_ros.h	/^  double last_imu_time_ = 0.0;                \/\/!< last time imu received$/;"	m	class:EKFBaseROS
last_keep_position_duration_	cola2_core/cola2_control/src/captain_node.cpp	/^  double last_keep_position_duration_;$/;"	m	class:Captain	file:
last_keep_position_holonomic_	cola2_core/cola2_control/src/captain_node.cpp	/^  bool last_keep_position_holonomic_;$/;"	m	class:Captain	file:
last_keep_position_time_	cola2_core/cola2_control/src/captain_node.cpp	/^  double last_keep_position_time_;$/;"	m	class:Captain	file:
last_level_	cola2_core/cola2_safety/src/safety_supervisor_node.cpp	/^  std::size_t last_level_;$/;"	m	class:SafetySupervisor	file:
last_message_	cola2_core/cola2_comms/src/comms_node.cpp	/^  std::string last_message_ = "";                         \/\/!< last received message$/;"	m	class:CommsNode	file:
last_message_	cola2_core/cola2_safety/src/safety_supervisor_node.cpp	/^  std::string last_message_;$/;"	m	class:SafetySupervisor	file:
last_message_rosout_time_	cola2_core/cola2_safety/src/safety_supervisor_node.cpp	/^  double last_message_rosout_time_;$/;"	m	class:SafetySupervisor	file:
last_modem_data_	cola2_core/cola2_safety/include/cola2_safety/safety_rules/comms.h	/^  double last_modem_data_, modem_data_timeout_;$/;"	m	class:SafetyRules::Comms
last_nav_	cola2_core/cola2_safety/src/virtual_cage_node.cpp	/^  double nav_north_, nav_east_, last_nav_;$/;"	m	class:VirtualCage	file:
last_nav_data_	cola2_core/cola2_safety/include/cola2_safety/safety_rules/navigator.h	/^  double last_nav_data_;$/;"	m	class:SafetyRules::Navigator
last_nav_received_	cola2_core/cola2_control/src/captain_node.cpp	/^  double last_nav_received_;$/;"	m	class:Captain	file:
last_nav_received_	cola2_core/cola2_control/src/pilot_node.cpp	/^  double last_nav_received_;$/;"	m	class:Pilot	file:
last_nav_received_	cola2_core/cola2_safety/src/safe_depth_altitude_node.cpp	/^  double last_nav_received_;$/;"	m	class:SafeDepthAltitude	file:
last_prediction_	cola2_core/cola2_nav/include/cola2_nav/ekf_base.h	/^  double last_prediction_ = 0.0;                  \/\/!< time of last prediction$/;"	m	class:EKFBase
last_publication_time_	cola2_core/cola2_nav/include/cola2_nav/ekf_base_ros.h	/^  double last_publication_time_ = 0.0;  \/\/!< Last time navigation was published$/;"	m	class:EKFBaseROS
last_running_mission_	cola2_core/cola2_control/src/captain_node.cpp	/^  std::string last_running_mission_;$/;"	m	class:Captain	file:
last_sss_	cola2_core/cola2_safety/src/safety_supervisor_checker_node.cpp	/^  double last_sss_;$/;"	m	class:SafetySupervisorChecker	file:
last_surfaced_	cola2_core/cola2_safety/include/cola2_safety/safety_rules/navigator.h	/^  double last_surfaced_;$/;"	m	class:SafetyRules::Navigator
last_thrusters_setpoint_sec_	cola2_core/cola2_sim/src/dynamics_node.cpp	/^  double last_thrusters_setpoint_sec_, last_fins_setpoint_sec_;$/;"	m	class:Dynamics	file:
last_usbl_positions_	cola2_core/cola2_nav/include/cola2_nav/ekf_base_ros.h	/^  std::vector<StampedPosition> last_usbl_positions_;  \/\/!< delayed USBL$/;"	m	class:EKFBaseROS
last_usbl_time_	cola2_core/cola2_nav/include/cola2_nav/ekf_base_ros.h	/^  double last_usbl_time_ = 0.0;               \/\/!< last time usbl received$/;"	m	class:EKFBaseROS
last_valid_config_	cola2_core/cola2_safety/include/cola2_safety/safety_rules/common.h	/^  double last_valid_config_;$/;"	m	class:SafetyRules::SafetyRuleBaseClass
last_valid_data_	cola2_lib_ros/include/cola2_lib_ros/diagnostic_helper.h	/^  double last_valid_data_;                           \/\/!< Last valid data.$/;"	m	class:cola2::ros::DiagnosticHelper
last_valid_diagnostics_data_	cola2_core/cola2_safety/include/cola2_safety/safety_rules/common.h	/^  double last_valid_diagnostics_data_;$/;"	m	class:SafetyRules::SafetyRuleBaseClass
latex_documents	stonefish_ros/docs/conf.py	/^latex_documents = [$/;"	v
latex_elements	stonefish_ros/docs/conf.py	/^latex_elements = {$/;"	v
launch	cola2_lib/src/cola2_lib/io/udp_socket.cpp	/^Server& Server::launch()$/;"	f	class:cola2::io::udp_socket::Server
level_	cola2_core/cola2_safety/include/cola2_safety/safety_rules/common.h	/^  std::size_t level_;$/;"	m	class:SafetyRules::SafetyRuleBaseClass
level_if_not_enabled_	cola2_core/cola2_safety/include/cola2_safety/safety_rules/check_enabled.h	/^  SafetyLevel::Type level_if_not_enabled_;$/;"	m	class:SafetyRules::CheckEnabled
linear	cola2_core/cola2_control/include/cola2_control/controllers/types.h	/^  control::Point linear;$/;"	m	struct:control::Velocity
linearVelocity	cola2_core/cola2_nav/src/cola2_nav/transformations.cpp	/^Eigen::Vector3d linearVelocity(const Eigen::Vector3d& measured_linear_velocity,$/;"	f	namespace:transforms
linearVelocityCovariance	cola2_core/cola2_nav/src/cola2_nav/transformations.cpp	/^Eigen::Matrix3d linearVelocityCovariance(const Eigen::Matrix3d& measured_linear_velocity_covariance,$/;"	f	namespace:transforms
loadAction	cola2_lib/src/cola2_lib/mission/mission.cpp	/^void Mission::loadAction(TiXmlHandle hDoc, MissionAction* action)$/;"	f	class:Mission
loadConfigFromParamServer	cola2_core/cola2_safety/src/cola2_safety/safety_rules/battery_level.cpp	/^BatteryLevel::loadConfigFromParamServer()$/;"	f	class:SafetyRules::BatteryLevel
loadConfigFromParamServer	cola2_core/cola2_safety/src/cola2_safety/safety_rules/check_enabled.cpp	/^CheckEnabled::loadConfigFromParamServer()$/;"	f	class:SafetyRules::CheckEnabled
loadConfigFromParamServer	cola2_core/cola2_safety/src/cola2_safety/safety_rules/combined_water_inside.cpp	/^CombinedWaterInside::loadConfigFromParamServer()$/;"	f	class:SafetyRules::CombinedWaterInside
loadConfigFromParamServer	cola2_core/cola2_safety/src/cola2_safety/safety_rules/common.cpp	/^SafetyRuleBaseClass::loadConfigFromParamServer()$/;"	f	class:SafetyRules::SafetyRuleBaseClass
loadConfigFromParamServer	cola2_core/cola2_safety/src/cola2_safety/safety_rules/comms.cpp	/^Comms::loadConfigFromParamServer()$/;"	f	class:SafetyRules::Comms
loadConfigFromParamServer	cola2_core/cola2_safety/src/cola2_safety/safety_rules/navigator.cpp	/^Navigator::loadConfigFromParamServer()$/;"	f	class:SafetyRules::Navigator
loadConfigFromParamServer	cola2_core/cola2_safety/src/cola2_safety/safety_rules/teleoperation.cpp	/^Teleoperation::loadConfigFromParamServer()$/;"	f	class:SafetyRules::Teleoperation
loadConfigFromParamServer	cola2_core/cola2_safety/src/cola2_safety/safety_rules/temperature.cpp	/^Temperature::loadConfigFromParamServer()$/;"	f	class:SafetyRules::Temperature
loadConfigFromParamServer	cola2_core/cola2_safety/src/cola2_safety/safety_rules/virtual_cage.cpp	/^VirtualCage::loadConfigFromParamServer()$/;"	f	class:SafetyRules::VirtualCage
loadConfigFromParamServer	cola2_core/cola2_safety/src/cola2_safety/safety_rules/watchdog_timer.cpp	/^WatchdogTimer::loadConfigFromParamServer()$/;"	f	class:SafetyRules::WatchdogTimer
loadManeuverGoto	cola2_lib/src/cola2_lib/mission/mission.cpp	/^void Mission::loadManeuverGoto(TiXmlHandle hDoc, std::shared_ptr<MissionGoto> mission_goto_ptr)$/;"	f	class:Mission
loadManeuverPark	cola2_lib/src/cola2_lib/mission/mission.cpp	/^void Mission::loadManeuverPark(TiXmlHandle hDoc, std::shared_ptr<MissionPark> mission_park_ptr)$/;"	f	class:Mission
loadManeuverSection	cola2_lib/src/cola2_lib/mission/mission.cpp	/^void Mission::loadManeuverSection(TiXmlHandle hDoc, std::shared_ptr<MissionSection> mission_section_ptr)$/;"	f	class:Mission
loadMission	cola2_lib/src/cola2_lib/mission/mission.cpp	/^void Mission::loadMission(const std::string& mission_file_name)$/;"	f	class:Mission
loadParams	cola2_core/cola2_comms/src/comms_node.cpp	/^bool CommsNode::loadParams()$/;"	f	class:CommsNode
loadStep	cola2_lib/src/cola2_lib/mission/mission.cpp	/^void Mission::loadStep(TiXmlHandle hDoc, std::shared_ptr<MissionStep> step_ptr)$/;"	f	class:Mission
loadTranformsFromFile	cola2_core/cola2_nav/src/cola2_nav/ekf_base_ros.cpp	/^void EKFBaseROS::loadTranformsFromFile(const std::string& fname)$/;"	f	class:EKFBaseROS
load_action	cola2_lib/python/cola2/mission/mission_types.py	/^    def load_action(self, action_element):$/;"	m	class:MissionStep
load_action	cola2_lib/python/cola2/mission/mission_types_v1.py	/^    def load_action(self, action_element):$/;"	m	class:MissionStep
load_configuration	cola2_lib/python/cola2/mission/mission_types_v1.py	/^    def load_configuration(self, config_element):$/;"	m	class:MissionStep
load_goto_maneuver	cola2_lib/python/cola2/mission/mission_types.py	/^    def load_goto_maneuver(self, goto_maneuver):$/;"	m	class:MissionStep
load_mission	cola2_lib/python/cola2/mission/mission_types.py	/^    def load_mission(self, mission_file_name):$/;"	m	class:Mission
load_mission	cola2_lib/python/cola2/mission/mission_types_v1.py	/^    def load_mission(self, mission_file_name):$/;"	m	class:Mission
load_park_maneuver	cola2_lib/python/cola2/mission/mission_types.py	/^    def load_park_maneuver(self, park_maneuver):$/;"	m	class:MissionStep
load_park_maneuver	cola2_lib/python/cola2/mission/mission_types_v1.py	/^    def load_park_maneuver(self, park_maneuver):$/;"	m	class:MissionStep
load_position	cola2_lib/python/cola2/mission/mission_types_v1.py	/^    def load_position(self, xml_position):$/;"	m	class:MissionStep
load_section_maneuver	cola2_lib/python/cola2/mission/mission_types.py	/^    def load_section_maneuver(self, section_maneuver):$/;"	m	class:MissionStep
load_section_maneuver	cola2_lib/python/cola2/mission/mission_types_v1.py	/^    def load_section_maneuver(self, sector_maneuver):$/;"	m	class:MissionStep
load_tolerance	cola2_lib/python/cola2/mission/mission_types_v1.py	/^    def load_tolerance(self, xml_tolerance):$/;"	m	class:MissionStep
load_waypoint_maneuver	cola2_lib/python/cola2/mission/mission_types_v1.py	/^    def load_waypoint_maneuver(self, waypoint_maneuver):$/;"	m	class:MissionStep
loaded_missions_	cola2_core/cola2_control/src/captain_node.cpp	/^  std::map<std::string, MissionWithState> loaded_missions_;$/;"	m	class:Captain	file:
log	cola2_core/cola2_log/src/bag_recorder_node.py	/^    log = LogBag()$/;"	v
logger	cola2_lib/python/cola2/mission/mission_types.py	/^logger = logging.getLogger(__name__)$/;"	v
logger	cola2_lib/python/cola2/mission/mission_types_v1.py	/^logger = logging.getLogger(__name__)$/;"	v
mahalanobisDistance	cola2_core/cola2_nav/src/cola2_nav/ekf_base.cpp	/^double EKFBase::mahalanobisDistance(const Eigen::VectorXd& innovation, const Eigen::MatrixXd& R,$/;"	f	class:EKFBase
main	cola2_core/cola2_comms/src/comms_node.cpp	/^int main(int argc, char **argv)$/;"	f
main	cola2_core/cola2_control/src/captain_node.cpp	/^int main(int argc, char** argv)$/;"	f
main	cola2_core/cola2_control/src/controller_node.cpp	/^int main(int argc, char** argv)$/;"	f
main	cola2_core/cola2_control/src/keyboard_node.cpp	/^int main(int argc, char **argv)$/;"	f
main	cola2_core/cola2_control/src/open_loop_node.cpp	/^int main(int argc, char **argv)$/;"	f
main	cola2_core/cola2_control/src/pilot_node.cpp	/^int main(int argc, char** argv)$/;"	f
main	cola2_core/cola2_log/startup_processes/shutdown_logger_startup_process.cpp	/^int main(int argc, char* argv[])$/;"	f
main	cola2_core/cola2_nav/src/navigator_node.cpp	/^int main(int argc, char** argv)$/;"	f
main	cola2_core/cola2_nav/src/navigator_surface_node.cpp	/^int main(int argc, char** argv)$/;"	f
main	cola2_core/cola2_safety/src/safe_depth_altitude_node.cpp	/^int main(int argc, char** argv)$/;"	f
main	cola2_core/cola2_safety/src/safety_supervisor_checker_node.cpp	/^int main(int argc, char** argv)$/;"	f
main	cola2_core/cola2_safety/src/safety_supervisor_node.cpp	/^int main(int argc, char** argv)$/;"	f
main	cola2_core/cola2_safety/src/virtual_cage_node.cpp	/^int main(int argc, char** argv)$/;"	f
main	cola2_core/cola2_safety/src/watchdog_timer_node.cpp	/^int main(int argc, char** argv)$/;"	f
main	cola2_core/cola2_safety/test/test_battery_control_board_rule.cpp	/^int main(int argc, char** argv)$/;"	f
main	cola2_core/cola2_safety/test/test_battery_level_rule.cpp	/^int main(int argc, char** argv)$/;"	f
main	cola2_core/cola2_safety/test/test_captain_rule.cpp	/^int main(int argc, char** argv)$/;"	f
main	cola2_core/cola2_safety/test/test_check_enabled_rule.cpp	/^int main(int argc, char** argv)$/;"	f
main	cola2_core/cola2_safety/test/test_combined_water_inside_rule.cpp	/^int main(int argc, char** argv)$/;"	f
main	cola2_core/cola2_safety/test/test_common.cpp	/^int main(int argc, char** argv)$/;"	f
main	cola2_core/cola2_safety/test/test_comms_rule.cpp	/^int main(int argc, char** argv)$/;"	f
main	cola2_core/cola2_safety/test/test_manual_rule.cpp	/^int main(int argc, char** argv)$/;"	f
main	cola2_core/cola2_safety/test/test_navigator_rule.cpp	/^int main(int argc, char** argv)$/;"	f
main	cola2_core/cola2_safety/test/test_teleoperation_rule.cpp	/^int main(int argc, char** argv)$/;"	f
main	cola2_core/cola2_safety/test/test_temperature_rule.cpp	/^int main(int argc, char** argv)$/;"	f
main	cola2_core/cola2_safety/test/test_virtual_cage_rule.cpp	/^int main(int argc, char** argv)$/;"	f
main	cola2_core/cola2_safety/test/test_watchdog_timer_rule.cpp	/^int main(int argc, char** argv)$/;"	f
main	cola2_core/cola2_safety/test/test_water_inside_rule.cpp	/^int main(int argc, char** argv)$/;"	f
main	cola2_core/cola2_sim/src/dynamics_node.cpp	/^int main(int argc, char* argv[])$/;"	f
main	cola2_core/cola2_sim/src/sim_internal_sensors_node.cpp	/^int main(int argc, char* argv[])$/;"	f
main	stonefish_ros/src/parsed_simulator.cpp	/^int main(int argc, char **argv)$/;"	f
main	stonefish_ros/src/parsed_simulator_nogpu.cpp	/^int main(int argc, char **argv)$/;"	f
mainIteration	cola2_core/cola2_control/src/captain_node.cpp	/^void Captain::mainIteration()$/;"	f	class:Captain
mainTimer	cola2_core/cola2_control/src/captain_node.cpp	/^void Captain::mainTimer(const ros::TimerEvent&)$/;"	f	class:Captain
mainTimerCallback	cola2_core/cola2_safety/src/safety_supervisor_checker_node.cpp	/^SafetySupervisorChecker::mainTimerCallback(const ros::TimerEvent&)$/;"	f	class:SafetySupervisorChecker
mainTimerCallback	cola2_core/cola2_safety/src/safety_supervisor_node.cpp	/^SafetySupervisor::mainTimerCallback(const ros::TimerEvent& event)$/;"	f	class:SafetySupervisor
mainTimerCallback	cola2_core/cola2_safety/src/virtual_cage_node.cpp	/^VirtualCage::mainTimerCallback(const ros::TimerEvent& event)$/;"	f	class:VirtualCage
mainTimerCallback	cola2_core/cola2_safety/src/watchdog_timer_node.cpp	/^WatchdogTimer::mainTimerCallback(const ros::TimerEvent& event)$/;"	f	class:WatchdogTimer
main_timer_	cola2_core/cola2_control/src/captain_node.cpp	/^  ros::Timer main_timer_;$/;"	m	class:Captain	file:
main_timer_	cola2_core/cola2_safety/src/safety_supervisor_checker_node.cpp	/^  ros::Timer main_timer_;$/;"	m	class:SafetySupervisorChecker	file:
main_timer_	cola2_core/cola2_safety/src/safety_supervisor_node.cpp	/^  ros::Timer main_timer_;$/;"	m	class:SafetySupervisor	file:
main_timer_	cola2_core/cola2_safety/src/virtual_cage_node.cpp	/^  ros::Timer main_timer_;$/;"	m	class:VirtualCage	file:
main_timer_	cola2_core/cola2_safety/src/watchdog_timer_node.cpp	/^  ros::Timer main_timer_;$/;"	m	class:WatchdogTimer	file:
makePrediction	cola2_core/cola2_nav/src/cola2_nav/ekf_base.cpp	/^bool EKFBase::makePrediction(const double now)$/;"	f	class:EKFBase
man_pages	stonefish_ros/docs/conf.py	/^man_pages = [$/;"	v
maneuver_	cola2_lib/include/cola2_lib/mission/mission_step.h	/^  std::shared_ptr<MissionManeuver> maneuver_;  \/\/!< List of maneuvers.$/;"	m	class:MissionStep
maneuver_type_	cola2_lib/include/cola2_lib/mission/mission_maneuver.h	/^  unsigned int maneuver_type_;  \/\/!< Type of maneuver.$/;"	m	class:MissionManeuver
marker_divisions_	cola2_core/cola2_safety/src/virtual_cage_node.cpp	/^  const unsigned int marker_divisions_;$/;"	m	class:VirtualCage	file:
mass	cola2_core/cola2_sim/src/dynamics_node.cpp	/^    double mass;$/;"	m	struct:Dynamics::Config	file:
master_doc	cola2_lib/doc/conf.py	/^master_doc = 'index'$/;"	v
master_doc	cola2_lib/doc/conf.py	/^master_doc = 'python\/cola2'$/;"	v
master_doc	cola2_lib_ros/doc/conf.py	/^master_doc = 'index'$/;"	v
master_doc	cola2_lib_ros/doc/conf.py	/^master_doc = 'python\/cola2_ros'$/;"	v
master_doc	stonefish_ros/docs/conf.py	/^master_doc = 'index'$/;"	v
matchDisabledAxis	cola2_core/cola2_control/src/cola2_control/low_level_controllers/request.cpp	/^bool Request::matchDisabledAxis(std::vector<bool> axis)$/;"	f	class:Request
max_depth_	cola2_core/cola2_safety/src/safe_depth_altitude_node.cpp	/^  double max_depth_, min_altitude_;$/;"	m	class:SafeDepthAltitude	file:
max_distance_to_waypoint	cola2_core/cola2_control/src/captain_node.cpp	/^    double max_distance_to_waypoint;$/;"	m	struct:Captain::__anon3	file:
max_fins_angle	cola2_core/cola2_sim/src/dynamics_node.cpp	/^    double max_fins_angle;$/;"	m	struct:Dynamics::Config	file:
max_force_thruster_negative_v_	cola2_core/cola2_control/include/cola2_control/low_level_controllers/only_thruster_allocator.h	/^  std::vector<double> max_force_thruster_negative_v_;$/;"	m	class:OnlyThrusterAllocator
max_force_thruster_positive_v_	cola2_core/cola2_control/include/cola2_control/low_level_controllers/only_thruster_allocator.h	/^  std::vector<double> max_force_thruster_positive_v_;$/;"	m	class:OnlyThrusterAllocator
max_message_size	cola2_core/cola2_comms/src/comms_node.cpp	/^    int max_message_size;         \/\/!< max message size (defined by modem)$/;"	m	struct:CommsNode::Config	file:
max_surge_velocity	cola2_core/cola2_control/include/cola2_control/controllers/anchor.h	/^  double max_surge_velocity;$/;"	m	struct:__anon5
max_surge_velocity	cola2_core/cola2_control/include/cola2_control/controllers/section.h	/^  double max_surge_velocity;$/;"	m	struct:__anon6
max_temperature_	cola2_core/cola2_safety/include/cola2_safety/safety_rules/temperature.h	/^  double temperature_, max_temperature_;$/;"	m	class:SafetyRules::Temperature
max_velocity_	cola2_core/cola2_control/include/cola2_control/low_level_controllers/auv_controller_base.h	/^  std::vector<double> max_velocity_;$/;"	m	class:IAUVController
max_wrench_	cola2_core/cola2_control/include/cola2_control/low_level_controllers/auv_controller_base.h	/^  std::vector<double> max_wrench_;$/;"	m	class:IAUVController
max_wrench_heave_	cola2_core/cola2_control/src/open_loop_node.cpp	/^  double max_wrench_surge_, max_wrench_sway_, max_wrench_heave_, max_wrench_yaw_;$/;"	m	class:OpenLoop	file:
max_wrench_surge_	cola2_core/cola2_control/src/open_loop_node.cpp	/^  double max_wrench_surge_, max_wrench_sway_, max_wrench_heave_, max_wrench_yaw_;$/;"	m	class:OpenLoop	file:
max_wrench_sway_	cola2_core/cola2_control/src/open_loop_node.cpp	/^  double max_wrench_surge_, max_wrench_sway_, max_wrench_heave_, max_wrench_yaw_;$/;"	m	class:OpenLoop	file:
max_wrench_yaw_	cola2_core/cola2_control/src/open_loop_node.cpp	/^  double max_wrench_surge_, max_wrench_sway_, max_wrench_heave_, max_wrench_yaw_;$/;"	m	class:OpenLoop	file:
merge	cola2_core/cola2_control/src/cola2_control/low_level_controllers/merge.cpp	/^Request Merge::merge(double current_time)$/;"	f	class:Merge
merged_pose_	cola2_core/cola2_control/include/cola2_control/low_level_controllers/auv_controller_base.h	/^  Request merged_pose_;$/;"	m	class:IAUVController
merged_twist_	cola2_core/cola2_control/include/cola2_control/low_level_controllers/auv_controller_base.h	/^  Request merged_twist_;$/;"	m	class:IAUVController
merged_wrench_	cola2_core/cola2_control/include/cola2_control/low_level_controllers/auv_controller_base.h	/^  Request merged_wrench_;$/;"	m	class:IAUVController
message_	cola2_core/cola2_safety/include/cola2_safety/safety_rules/common.h	/^  std::string message_;$/;"	m	class:SafetyRules::SafetyRuleBaseClass
message_	cola2_lib/include/cola2_lib/io/udp_socket.h	/^  std::string message_;                          \/\/!< Message to write to the UDP socket.$/;"	m	class:cola2::io::udp_socket::Server
message_mutex_	cola2_lib/include/cola2_lib/io/udp_socket.h	/^  boost::mutex message_mutex_;                   \/\/!< Mutex for avoding changing the message while it is being sent.$/;"	m	class:cola2::io::udp_socket::Server
messages_	cola2_core/cola2_control/include/cola2_control/low_level_controllers/merge.h	/^  std::vector<Request> messages_;$/;"	m	class:Merge
messages_	cola2_lib_ros/include/cola2_lib_ros/diagnostic_helper.h	/^  std::set<std::string> messages_;                   \/\/!< Set of messages.$/;"	m	class:cola2::ros::DiagnosticHelper
metersToBars	cola2_lib/src/cola2_lib/utils/pressure.cpp	/^double cola2::utils::metersToBars(const double meters, const double water_density)$/;"	f	class:cola2::utils
metersToPascals	cola2_lib/src/cola2_lib/utils/pressure.cpp	/^double cola2::utils::metersToPascals(const double meters, const double water_density)$/;"	f	class:cola2::utils
min_altitude_	cola2_core/cola2_safety/src/safe_depth_altitude_node.cpp	/^  double max_depth_, min_altitude_;$/;"	m	class:SafeDepthAltitude	file:
min_charge_	cola2_core/cola2_safety/include/cola2_safety/safety_rules/battery_level.h	/^  double charge_, voltage_, min_charge_, min_voltage_;$/;"	m	class:SafetyRules::BatteryLevel
min_diagnostics_frequency_	cola2_core/cola2_nav/include/cola2_nav/ekf_base_ros.h	/^    double min_diagnostics_frequency_;  \/\/!< minimum frequency required by diagnostic messages$/;"	m	struct:EKFBaseROS::Config
min_frequency_	cola2_core/cola2_safety/include/cola2_safety/safety_rules/navigator.h	/^  double min_frequency_;$/;"	m	class:SafetyRules::Navigator
min_surge_velocity	cola2_core/cola2_control/include/cola2_control/controllers/anchor.h	/^  double min_surge_velocity;$/;"	m	struct:__anon5
min_surge_velocity	cola2_core/cola2_control/include/cola2_control/controllers/section.h	/^  double min_surge_velocity;$/;"	m	struct:__anon6
min_voltage_	cola2_core/cola2_safety/include/cola2_safety/safety_rules/battery_level.h	/^  double charge_, voltage_, min_charge_, min_voltage_;$/;"	m	class:SafetyRules::BatteryLevel
mission	cola2_core/cola2_control/src/captain_node.cpp	/^    Mission mission;$/;"	m	struct:Captain::MissionWithState	file:
mission	cola2_core/cola2_control/src/captain_node.cpp	/^void Captain::mission()$/;"	f	class:Captain
missionHasFinished	cola2_core/cola2_control/src/captain_node.cpp	/^bool Captain::missionHasFinished()$/;"	f	class:Captain
mission_	cola2_lib/include/cola2_lib/mission/mission.h	/^  std::vector<std::shared_ptr<MissionStep> > mission_;  \/\/!< List of mission steps.$/;"	m	class:Mission
mission_feedback_	cola2_core/cola2_control/src/captain_node.cpp	/^  cola2_msgs::CaptainStateFeedback mission_feedback_;$/;"	m	class:Captain	file:
modem_data_timeout_	cola2_core/cola2_safety/include/cola2_safety/safety_rules/comms.h	/^  double last_modem_data_, modem_data_timeout_;$/;"	m	class:SafetyRules::Comms
modem_time_	cola2_core/cola2_comms/src/comms_node.cpp	/^  double modem_time_ = 0.0;                               \/\/!< time since last message from modem$/;"	m	class:CommsNode	file:
msis	stonefish_ros/include/stonefish_ros/ROSSimulationManager.h	/^		MSIS* msis;$/;"	m	class:sf::MSISService
mtx_	cola2_lib/include/cola2_lib/utils/thread_safe_flag.h	/^  std::mutex mtx_;$/;"	m	class:cola2::utils::ThreadSafeFlag
mtx_	cola2_lib_ros/include/cola2_lib_ros/diagnostic_helper.h	/^  std::mutex mtx_;                                   \/\/!< Mutex.$/;"	m	class:cola2::ros::DiagnosticHelper
nMax	cola2_lib/include/cola2_lib/wmmc/GeomagnetismHeader.h	/^    int nMax; \/* Maximum degree of spherical harmonic model *\/$/;"	m	struct:__anon13
nMaxSecVar	cola2_lib/include/cola2_lib/wmmc/GeomagnetismHeader.h	/^    int nMaxSecVar; \/* Maximum degree of spherical harmonic secular model *\/$/;"	m	struct:__anon13
nRe	cola2_lib/src/cola2_lib/utils/ned.cpp	/^Eigen::Matrix3d NED::NED::nRe(const double lat_rad, const double lon_rad) const$/;"	f	class:cola2::utils::NED::NED
n_dof_	cola2_core/cola2_control/include/cola2_control/low_level_controllers/auv_controller_base.h	/^  unsigned int n_dof_;$/;"	m	class:IAUVController
n_dof_	cola2_core/cola2_control/include/cola2_control/low_level_controllers/ndof_controller.h	/^  unsigned int n_dof_;$/;"	m	class:NDofController
n_dof_	cola2_core/cola2_control/include/cola2_control/low_level_controllers/request.h	/^  unsigned int n_dof_;$/;"	m	class:Request
n_thrusters_	cola2_core/cola2_control/include/cola2_control/low_level_controllers/only_thruster_allocator.h	/^  std::size_t n_thrusters_;$/;"	m	class:OnlyThrusterAllocator
n_thrusters_	cola2_core/cola2_control/include/cola2_control/low_level_controllers/only_thrusters_controller.h	/^  unsigned int n_thrusters_;$/;"	m	class:OnlyThrustersController
name_	cola2_core/cola2_control/include/cola2_control/low_level_controllers/controller_base.h	/^  std::string name_;$/;"	m	class:IController
name_	cola2_core/cola2_control/include/cola2_control/low_level_controllers/merge.h	/^  std::string name_;$/;"	m	class:Merge
name_	cola2_core/cola2_control/include/cola2_control/ros_controller/auv_ros_controller_base.h	/^  std::string name_;$/;"	m	class:IAUVROSController
nativeSize	cola2_core/cola2_comms/include/cppystruct/format.h	/^  static constexpr size_t nativeSize()$/;"	f	struct:pystruct::BigEndianFormat
navCallback	cola2_core/cola2_control/src/pilot_node.cpp	/^void Pilot::navCallback(const cola2_msgs::NavSts& data)$/;"	f	class:Pilot
navCallback	cola2_core/cola2_safety/src/cola2_safety/safety_rules/navigator.cpp	/^Navigator::navCallback(const cola2_msgs::NavSts& nav)$/;"	f	class:SafetyRules::Navigator
navCallback	cola2_core/cola2_safety/src/safe_depth_altitude_node.cpp	/^SafeDepthAltitude::navCallback(const cola2_msgs::NavSts& nav)$/;"	f	class:SafeDepthAltitude
navCallback	cola2_core/cola2_safety/src/virtual_cage_node.cpp	/^VirtualCage::navCallback(const cola2_msgs::NavSts& nav)$/;"	f	class:VirtualCage
nav_	cola2_core/cola2_control/src/captain_node.cpp	/^  cola2_msgs::NavSts nav_;$/;"	m	class:Captain	file:
nav_data_timeout_	cola2_core/cola2_safety/include/cola2_safety/safety_rules/navigator.h	/^  double nav_data_timeout_;$/;"	m	class:SafetyRules::Navigator
nav_east_	cola2_core/cola2_safety/src/virtual_cage_node.cpp	/^  double nav_north_, nav_east_, last_nav_;$/;"	m	class:VirtualCage	file:
nav_north_	cola2_core/cola2_safety/src/virtual_cage_node.cpp	/^  double nav_north_, nav_east_, last_nav_;$/;"	m	class:VirtualCage	file:
nav_sts_update	cola2_core/cola2_control/src/teleoperation_node.py	/^    def nav_sts_update(self, data):$/;"	m	class:Teleoperation
navigation_	cola2_core/cola2_comms/src/comms_node.cpp	/^  cola2_msgs::NavSts navigation_ = cola2_msgs::NavSts();  \/\/!< navigation received$/;"	m	class:CommsNode	file:
navigation_filter_init_	cola2_core/cola2_safety/src/safety_supervisor_node.cpp	/^  bool navigation_filter_init_;$/;"	m	class:SafetySupervisor	file:
navigation_filter_init_time_	cola2_core/cola2_safety/src/safety_supervisor_node.cpp	/^  double navigation_filter_init_time_;$/;"	m	class:SafetySupervisor	file:
ned2Ecef	cola2_lib/src/cola2_lib/utils/ned.cpp	/^void NED::NED::ned2Ecef(const double north, const double east, const double depth, double &x, double &y,$/;"	f	class:cola2::utils::NED::NED
ned2Geodetic	cola2_lib/src/cola2_lib/utils/ned.cpp	/^Eigen::Vector3d NED::ned2Geodetic(const Eigen::Vector3d &ned) const$/;"	f	class:cola2::utils::NED
ned2Geodetic	cola2_lib/src/cola2_lib/utils/ned.cpp	/^void NED::NED::ned2Geodetic(const double north, const double east, const double depth, double &lat, double &lon,$/;"	f	class:cola2::utils::NED::NED
ned2ecef	cola2_lib/python/cola2/utils/ned.py	/^    def ned2ecef(self, ned):$/;"	m	class:NED
ned2geodetic	cola2_lib/python/cola2/utils/ned.py	/^    def ned2geodetic(self, ned):$/;"	m	class:NED
ned_	cola2_core/cola2_nav/include/cola2_nav/ekf_base_ros.h	/^  cola2::utils::NED ned_;  \/\/!< reference frame where the AUV is$/;"	m	class:EKFBaseROS
ned_error_	cola2_core/cola2_nav/include/cola2_nav/ekf_base_ros.h	/^  bool ned_error_ = false;          \/\/!< not enough good smaples to init NED from GPS$/;"	m	class:EKFBaseROS
ned_latitude_	cola2_core/cola2_nav/include/cola2_nav/ekf_base_ros.h	/^    double ned_latitude_;   \/\/!< manually fixed NED origin latitude$/;"	m	struct:EKFBaseROS::Config
ned_longitude_	cola2_core/cola2_nav/include/cola2_nav/ekf_base_ros.h	/^    double ned_longitude_;  \/\/!< manually fixed NED origin longitude$/;"	m	struct:EKFBaseROS::Config
ned_origin_latitude	cola2_core/cola2_control/include/cola2_control/controllers/types.h	/^  double ned_origin_latitude;$/;"	m	class:control::NED
ned_origin_latitude	cola2_core/cola2_control/include/cola2_control/controllers/types.h	/^  double ned_origin_latitude;$/;"	m	class:control::Nav
ned_origin_latitude	cola2_core/cola2_control/include/cola2_control/controllers/types.h	/^  double ned_origin_latitude;$/;"	m	class:control::Request
ned_origin_longitude	cola2_core/cola2_control/include/cola2_control/controllers/types.h	/^  double ned_origin_longitude;$/;"	m	class:control::NED
ned_origin_longitude	cola2_core/cola2_control/include/cola2_control/controllers/types.h	/^  double ned_origin_longitude;$/;"	m	class:control::Nav
ned_origin_longitude	cola2_core/cola2_control/include/cola2_control/controllers/types.h	/^  double ned_origin_longitude;$/;"	m	class:control::Request
ned_to_ecef_matrix_	cola2_lib/include/cola2_lib/utils/ned.h	/^  Eigen::Matrix3d ned_to_ecef_matrix_;$/;"	m	class:cola2::utils::NED
newForceToSetpoint	cola2_core/cola2_control/src/open_loop_node.cpp	/^  std::vector<double> newForceToSetpoint(const std::vector<double>& input)$/;"	f	class:ThrusterAllocatorWrapper
newWrenchToThrusterForces	cola2_core/cola2_control/src/open_loop_node.cpp	/^  std::vector<double> newWrenchToThrusterForces(const std::vector<double>& input)$/;"	f	class:ThrusterAllocatorWrapper
nh	stonefish_ros/include/stonefish_ros/ROSSimulationManager.h	/^		ros::NodeHandle nh;$/;"	m	class:sf::ROSSimulationManager
nh_	cola2_core/cola2_comms/src/comms_node.cpp	/^  ros::NodeHandle nh_;  \/\/!< node handler$/;"	m	class:CommsNode	file:
nh_	cola2_core/cola2_control/include/cola2_control/ros_controller/auv_ros_controller_base.h	/^  ros::NodeHandle nh_;$/;"	m	class:IAUVROSController
nh_	cola2_core/cola2_control/src/captain_node.cpp	/^  ros::NodeHandle nh_;$/;"	m	class:Captain	file:
nh_	cola2_core/cola2_control/src/keyboard_node.cpp	/^  ros::NodeHandle nh_;$/;"	m	class:Keyboard	file:
nh_	cola2_core/cola2_control/src/open_loop_node.cpp	/^  ros::NodeHandle nh_;$/;"	m	class:OpenLoop	file:
nh_	cola2_core/cola2_control/src/pilot_node.cpp	/^  ros::NodeHandle nh_;$/;"	m	class:Pilot	file:
nh_	cola2_core/cola2_nav/include/cola2_nav/ekf_base_ros.h	/^  ros::NodeHandle nh_ = ros::NodeHandle("~");  \/\/!< ROS node handler$/;"	m	class:EKFBaseROS
nh_	cola2_core/cola2_safety/src/safe_depth_altitude_node.cpp	/^  ros::NodeHandle nh_;$/;"	m	class:SafeDepthAltitude	file:
nh_	cola2_core/cola2_safety/src/safety_supervisor_checker_node.cpp	/^  ros::NodeHandle nh_;$/;"	m	class:SafetySupervisorChecker	file:
nh_	cola2_core/cola2_safety/src/safety_supervisor_node.cpp	/^  ros::NodeHandle nh_;$/;"	m	class:SafetySupervisor	file:
nh_	cola2_core/cola2_safety/src/virtual_cage_node.cpp	/^  ros::NodeHandle nh_;$/;"	m	class:VirtualCage	file:
nh_	cola2_core/cola2_safety/src/watchdog_timer_node.cpp	/^  ros::NodeHandle nh_;$/;"	m	class:WatchdogTimer	file:
nh_	cola2_core/cola2_sim/src/dynamics_node.cpp	/^  ros::NodeHandle nh_;$/;"	m	class:Dynamics	file:
nh_	cola2_core/cola2_sim/src/sim_internal_sensors_node.cpp	/^  ros::NodeHandle nh_;$/;"	m	class:SimInternalSensors	file:
no_altitude_goes_up_	cola2_core/cola2_safety/src/safe_depth_altitude_node.cpp	/^  bool no_altitude_goes_up_;$/;"	m	class:SafeDepthAltitude	file:
no_altitude_goes_up_	cola2_lib/include/cola2_lib/mission/mission_goto.h	/^  bool no_altitude_goes_up_;  \/\/!< Behaviour when no altitude is avalable.$/;"	m	class:MissionGoto
no_altitude_goes_up_	cola2_lib/include/cola2_lib/mission/mission_park.h	/^  bool no_altitude_goes_up_;  \/\/!< Behaviour when no altitude is avalable.$/;"	m	class:MissionPark
no_altitude_goes_up_	cola2_lib/include/cola2_lib/mission/mission_section.h	/^  bool no_altitude_goes_up_;  \/\/!< Behaviour when no altitude is avalable.$/;"	m	class:MissionSection
no_params	cola2_core/cola2_control/include/cola2_control/controllers/holonomic_keep_position.h	/^  double no_params;$/;"	m	struct:__anon7
node	cola2_core/cola2_sim/src/sim_auv_nav_sensors_node.py	/^    node = SimAUVNavSensors()$/;"	v	class:SimAUVNavSensors
node	cola2_lib_ros/python/cola2_ros/transform_handler.py	/^    node = TransformHandler()$/;"	v	class:TransformHandler
noexcept	cola2_core/cola2_nav/include/cola2_nav/ekf_base_ros.h	/^  virtual ~EKFBaseROS() noexcept;$/;"	m	class:EKFBaseROS
normalizeState	cola2_core/cola2_nav/src/cola2_nav/ekf_position_velocity.cpp	/^void EKFPositionVelocity::normalizeState()$/;"	f	class:EKFPositionVelocity
normalizeState	cola2_core/cola2_nav/src/cola2_nav/ekf_surface_2d.cpp	/^void EKFSurface2D::normalizeState()$/;"	f	class:EKFSurface2D
north	cola2_core/cola2_control/include/cola2_control/controllers/types.h	/^  double north;$/;"	m	class:control::NED
north	cola2_core/cola2_control/include/cola2_control/controllers/types.h	/^  double north;$/;"	m	class:control::Nav
now	cola2_lib/doc/conf.py	/^now = datetime.datetime.now()$/;"	v
now	cola2_lib_ros/doc/conf.py	/^now = datetime.datetime.now()$/;"	v
ns_	cola2_core/cola2_control/src/open_loop_node.cpp	/^  const std::string ns_;$/;"	m	class:OpenLoop	file:
ns_	cola2_core/cola2_nav/include/cola2_nav/ekf_base_ros.h	/^  std::string ns_;                           \/\/!< namespace we are in$/;"	m	class:EKFBaseROS
ns_	cola2_core/cola2_safety/src/safe_depth_altitude_node.cpp	/^  const std::string ns_;$/;"	m	class:SafeDepthAltitude	file:
ns_	cola2_core/cola2_safety/src/safety_supervisor_checker_node.cpp	/^  std::string ns_;$/;"	m	class:SafetySupervisorChecker	file:
ns_	cola2_core/cola2_safety/src/safety_supervisor_node.cpp	/^  std::string ns_;$/;"	m	class:SafetySupervisor	file:
numOfStopBitsFromInteger	cola2_lib/src/cola2_lib/io/serial_port.cpp	/^EStopBits SerialPort::numOfStopBitsFromInteger(const unsigned int stopBits)$/;"	f	class:cola2::io::SerialPort
ofh_	cola2_core/cola2_nav/include/cola2_nav/ekf_base_ros.h	/^  std::ofstream ofh_;  \/\/!< output file for debug purposes$/;"	m	class:EKFBaseROS
old_f_	cola2_core/cola2_sim/src/dynamics_node.cpp	/^  Eigen::Vector2d f_, old_f_;$/;"	m	class:Dynamics	file:
old_u_	cola2_core/cola2_sim/src/dynamics_node.cpp	/^  Eigen::VectorXd u_, old_u_;$/;"	m	class:Dynamics	file:
online_	cola2_core/cola2_nav/include/cola2_nav/ekf_base_ros.h	/^  bool online_;                                \/\/!< navigator running online$/;"	m	class:EKFBaseROS
open	cola2_lib/src/cola2_lib/io/serial_port.cpp	/^void SerialPort::open()$/;"	f	class:cola2::io::SerialPort
open	cola2_lib/src/cola2_lib/io/serial_port.cpp	/^void SerialPort::open(const std::string& port)$/;"	f	class:cola2::io::SerialPort
open	cola2_lib/src/cola2_lib/io/tcp_socket.cpp	/^void TcpSocket::open()$/;"	f	class:cola2::io::TcpSocket
operator ()	stonefish_ros/src/ROSSimulationManager.cpp	/^bool FLSService::operator()(stonefish_ros::SonarSettings::Request& req, stonefish_ros::SonarSettings::Response& res)$/;"	f	class:sf::FLSService
operator ()	stonefish_ros/src/ROSSimulationManager.cpp	/^bool MSISService::operator()(stonefish_ros::SonarSettings2::Request& req, stonefish_ros::SonarSettings2::Response& res)$/;"	f	class:sf::MSISService
operator ()	stonefish_ros/src/ROSSimulationManager.cpp	/^bool SSSService::operator()(stonefish_ros::SonarSettings::Request& req, stonefish_ros::SonarSettings::Response& res)$/;"	f	class:sf::SSSService
operator ()	stonefish_ros/src/ROSSimulationManager.cpp	/^void ActuatorOriginCallback::operator()(const geometry_msgs::TransformConstPtr& msg)$/;"	f	class:sf::ActuatorOriginCallback
operator ()	stonefish_ros/src/ROSSimulationManager.cpp	/^void JetVFCallback::operator()(const std_msgs::Float64ConstPtr& msg)$/;"	f	class:sf::JetVFCallback
operator ()	stonefish_ros/src/ROSSimulationManager.cpp	/^void PropellersCallback::operator()(const cola2_msgs::SetpointsConstPtr& msg)$/;"	f	class:sf::PropellersCallback
operator ()	stonefish_ros/src/ROSSimulationManager.cpp	/^void RuddersCallback::operator()(const cola2_msgs::SetpointsConstPtr& msg)$/;"	f	class:sf::RuddersCallback
operator ()	stonefish_ros/src/ROSSimulationManager.cpp	/^void SensorOriginCallback::operator()(const geometry_msgs::TransformConstPtr& msg)$/;"	f	class:sf::SensorOriginCallback
operator ()	stonefish_ros/src/ROSSimulationManager.cpp	/^void ServosCallback::operator()(const sensor_msgs::JointStateConstPtr& msg)$/;"	f	class:sf::ServosCallback
operator ()	stonefish_ros/src/ROSSimulationManager.cpp	/^void ThrustersCallback::operator()(const cola2_msgs::SetpointsConstPtr& msg)$/;"	f	class:sf::ThrustersCallback
operator ()	stonefish_ros/src/ROSSimulationManager.cpp	/^void TrajectoryCallback::operator()(const nav_msgs::OdometryConstPtr& msg)$/;"	f	class:sf::TrajectoryCallback
operator ()	stonefish_ros/src/ROSSimulationManager.cpp	/^void UniformVFCallback::operator()(const geometry_msgs::Vector3ConstPtr& msg)$/;"	f	class:sf::UniformVFCallback
operator ()	stonefish_ros/src/ROSSimulationManager.cpp	/^void VBSCallback::operator()(const std_msgs::Float64ConstPtr& msg)$/;"	f	class:sf::VBSCallback
operator <	cola2_core/cola2_control/src/cola2_control/low_level_controllers/request.cpp	/^bool Request::operator<(const Request& rhs) const$/;"	f	class:Request
operator <<	cola2_core/cola2_control/src/cola2_control/low_level_controllers/request.cpp	/^std::ostream& operator<<(std::ostream& out, Request r)$/;"	f
operator =	cola2_core/cola2_control/src/cola2_control/low_level_controllers/request.cpp	/^void Request::operator=(const Request& rhs)$/;"	f	class:Request
operator ==	cola2_core/cola2_control/src/cola2_control/low_level_controllers/request.cpp	/^bool Request::operator==(const Request& rhs) const$/;"	f	class:Request
operator []	cola2_lib/src/cola2_lib/io/nmea_parser.cpp	/^std::string NMEAParser::operator[](int i) const$/;"	f	class:NMEAParser
orientation	cola2_core/cola2_control/include/cola2_control/controllers/types.h	/^  control::RPY orientation;$/;"	m	class:control::Pose
orientation	cola2_core/cola2_nav/include/cola2_nav/ekf_base_ros.h	/^    Eigen::Vector3d orientation;$/;"	m	struct:EKFBaseROS::StampedPosition
orientation	cola2_core/cola2_nav/src/cola2_nav/transformations.cpp	/^Eigen::Quaterniond orientation(const Eigen::Quaterniond& measured_orientation,$/;"	f	namespace:transforms
orientationCovariance	cola2_core/cola2_nav/src/cola2_nav/transformations.cpp	/^Eigen::Matrix3d orientationCovariance(const Eigen::Matrix3d& measured_orientation_covariance,$/;"	f	namespace:transforms
output_callback	cola2_core/cola2_control/src/teleoperation_node.py	/^    def output_callback(self, data):$/;"	m	class:Teleoperation
override	cola2_core/cola2_nav/include/cola2_nav/ekf_position_velocity.h	/^  void computePredictionMatrices(const double dt) override;$/;"	m	class:EKFPositionVelocity
override	cola2_core/cola2_nav/include/cola2_nav/ekf_position_velocity.h	/^  void normalizeState() override;$/;"	m	class:EKFPositionVelocity
p0	cola2_core/cola2_sim/src/dynamics_node.cpp	/^    Eigen::Vector6d p0;$/;"	m	struct:Dynamics::Config	file:
p_	cola2_core/cola2_sim/src/dynamics_node.cpp	/^  Eigen::Vector6d p_, p_dot_;$/;"	m	class:Dynamics	file:
p_dot_	cola2_core/cola2_sim/src/dynamics_node.cpp	/^  Eigen::Vector6d p_, p_dot_;$/;"	m	class:Dynamics	file:
p_heave_	cola2_core/cola2_control/include/cola2_control/low_level_controllers/only_thrusters_controller.h	/^  std::shared_ptr<PID> p_heave_;$/;"	m	class:OnlyThrustersController
p_pitch_	cola2_core/cola2_control/include/cola2_control/low_level_controllers/only_thrusters_controller.h	/^  std::shared_ptr<PID> p_pitch_;$/;"	m	class:OnlyThrustersController
p_roll_	cola2_core/cola2_control/include/cola2_control/low_level_controllers/only_thrusters_controller.h	/^  std::shared_ptr<PID> p_roll_;$/;"	m	class:OnlyThrustersController
p_surge_	cola2_core/cola2_control/include/cola2_control/low_level_controllers/only_thrusters_controller.h	/^  std::shared_ptr<PID> p_surge_;$/;"	m	class:OnlyThrustersController
p_sway_	cola2_core/cola2_control/include/cola2_control/low_level_controllers/only_thrusters_controller.h	/^  std::shared_ptr<PID> p_sway_;$/;"	m	class:OnlyThrustersController
p_yaw_	cola2_core/cola2_control/include/cola2_control/low_level_controllers/only_thrusters_controller.h	/^  std::shared_ptr<PID> p_yaw_;$/;"	m	class:OnlyThrustersController
pack	cola2_core/cola2_comms/include/cppystruct/pack.h	/^constexpr auto pack(Fmt, Args&&... args)$/;"	f	namespace:pystruct
pack	cola2_core/cola2_comms/include/cppystruct/pack.h	/^constexpr auto pack(std::index_sequence<Items...>, Args&&... args)$/;"	f	namespace:pystruct::internal
packElement	cola2_core/cola2_comms/include/cppystruct/pack.h	/^constexpr int packElement(char* data, bool bigEndian, FormatType format, RepType elem)$/;"	f	namespace:pystruct::internal
package_dir	cola2_core/cola2_control/setup.py	/^    package_dir={'': 'src'},$/;"	v
package_dir	cola2_lib_ros/setup.py	/^    package_dir={'': 'python'},$/;"	v
packages	cola2_core/cola2_control/setup.py	/^    packages=['cola2_control'],$/;"	v
packages	cola2_lib_ros/setup.py	/^    packages=['cola2_ros'],$/;"	v
param_server_	cola2_core/cola2_control/src/controller_node.cpp	/^  dynamic_reconfigure::Server<cola2_control::controllerConfig> param_server_;$/;"	m	class:OnlyThrustersROSController	file:
parameters_	cola2_lib/include/cola2_lib/mission/mission_action.h	/^  std::vector<std::string> parameters_;  \/\/!< Parameters of the service to call if is_trigger_ is false.$/;"	m	class:MissionAction
parityFromString	cola2_lib/src/cola2_lib/io/serial_port.cpp	/^EParity SerialPort::parityFromString(const std::string& parity)$/;"	f	class:cola2::io::SerialPort
parseDiagnostics	cola2_core/cola2_safety/src/cola2_safety/safety_rules/battery_control_board.cpp	/^BatteryControlBoard::parseDiagnostics()$/;"	f	class:SafetyRules::BatteryControlBoard
parseDiagnostics	cola2_core/cola2_safety/src/cola2_safety/safety_rules/battery_level.cpp	/^BatteryLevel::parseDiagnostics()$/;"	f	class:SafetyRules::BatteryLevel
parseDiagnostics	cola2_core/cola2_safety/src/cola2_safety/safety_rules/combined_water_inside.cpp	/^CombinedWaterInside::parseDiagnostics()$/;"	f	class:SafetyRules::CombinedWaterInside
parseDiagnostics	cola2_core/cola2_safety/src/cola2_safety/safety_rules/common.cpp	/^SafetyRuleBaseClass::parseDiagnostics()$/;"	f	class:SafetyRules::SafetyRuleBaseClass
parseDiagnostics	cola2_core/cola2_safety/src/cola2_safety/safety_rules/navigator.cpp	/^Navigator::parseDiagnostics()$/;"	f	class:SafetyRules::Navigator
parseDiagnostics	cola2_core/cola2_safety/src/cola2_safety/safety_rules/teleoperation.cpp	/^Teleoperation::parseDiagnostics()$/;"	f	class:SafetyRules::Teleoperation
parseDiagnostics	cola2_core/cola2_safety/src/cola2_safety/safety_rules/temperature.cpp	/^Temperature::parseDiagnostics()$/;"	f	class:SafetyRules::Temperature
parseDiagnostics	cola2_core/cola2_safety/src/cola2_safety/safety_rules/virtual_cage.cpp	/^VirtualCage::parseDiagnostics()$/;"	f	class:SafetyRules::VirtualCage
parseDiagnostics	cola2_core/cola2_safety/src/cola2_safety/safety_rules/watchdog_timer.cpp	/^WatchdogTimer::parseDiagnostics()$/;"	f	class:SafetyRules::WatchdogTimer
parseDiagnostics	cola2_core/cola2_safety/src/cola2_safety/safety_rules/water_inside.cpp	/^WaterInside::parseDiagnostics()$/;"	f	class:SafetyRules::WaterInside
parseDiagnostics	cola2_core/cola2_safety/test/test_common.cpp	/^Common::parseDiagnostics()$/;"	f	class:Common
parse_list_	cola2_core/cola2_safety/include/cola2_safety/safety_rules/common.h	/^  ParseListWithHwId parse_list_;$/;"	m	class:SafetyRules::SafetyRuleBaseClass
pascalsToBars	cola2_lib/src/cola2_lib/utils/pressure.cpp	/^double cola2::utils::pascalsToBars(const double pascals)$/;"	f	class:cola2::utils
pascalsToMeters	cola2_lib/src/cola2_lib/utils/pressure.cpp	/^double cola2::utils::pascalsToMeters(const double pascals, const double water_density)$/;"	f	class:cola2::utils
pauseMissionSrv	cola2_core/cola2_control/src/captain_node.cpp	/^bool Captain::pauseMissionSrv(std_srvs::Trigger::Request&, std_srvs::Trigger::Response& res)$/;"	f	class:Captain
pause_mission_srv_	cola2_core/cola2_control/src/captain_node.cpp	/^  ros::ServiceServer pause_mission_srv_;$/;"	m	class:Captain	file:
period	cola2_core/cola2_sim/src/dynamics_node.cpp	/^    double period;$/;"	m	struct:Dynamics::Config	file:
periodicUpdate	cola2_core/cola2_safety/src/cola2_safety/safety_rules/battery_control_board.cpp	/^BatteryControlBoard::periodicUpdate(const ros::Time& stamp, std::uint32_t* status_code_ptr)$/;"	f	class:SafetyRules::BatteryControlBoard
periodicUpdate	cola2_core/cola2_safety/src/cola2_safety/safety_rules/battery_level.cpp	/^BatteryLevel::periodicUpdate(const ros::Time& stamp, std::uint32_t* status_code_ptr)$/;"	f	class:SafetyRules::BatteryLevel
periodicUpdate	cola2_core/cola2_safety/src/cola2_safety/safety_rules/captain.cpp	/^Captain::periodicUpdate(const ros::Time& stamp, std::uint32_t* status_code_ptr)$/;"	f	class:SafetyRules::Captain
periodicUpdate	cola2_core/cola2_safety/src/cola2_safety/safety_rules/check_enabled.cpp	/^CheckEnabled::periodicUpdate(const ros::Time& stamp, std::uint32_t*)$/;"	f	class:SafetyRules::CheckEnabled
periodicUpdate	cola2_core/cola2_safety/src/cola2_safety/safety_rules/combined_water_inside.cpp	/^CombinedWaterInside::periodicUpdate(const ros::Time& stamp, std::uint32_t* status_code_ptr)$/;"	f	class:SafetyRules::CombinedWaterInside
periodicUpdate	cola2_core/cola2_safety/src/cola2_safety/safety_rules/common.cpp	/^SafetyRuleBaseClass::periodicUpdate(const ros::Time&, std::uint32_t*)$/;"	f	class:SafetyRules::SafetyRuleBaseClass
periodicUpdate	cola2_core/cola2_safety/src/cola2_safety/safety_rules/comms.cpp	/^Comms::periodicUpdate(const ros::Time&, std::uint32_t*)$/;"	f	class:SafetyRules::Comms
periodicUpdate	cola2_core/cola2_safety/src/cola2_safety/safety_rules/navigator.cpp	/^Navigator::periodicUpdate(const ros::Time& stamp, std::uint32_t* status_code_ptr)$/;"	f	class:SafetyRules::Navigator
periodicUpdate	cola2_core/cola2_safety/src/cola2_safety/safety_rules/teleoperation.cpp	/^Teleoperation::periodicUpdate(const ros::Time& stamp, std::uint32_t*)$/;"	f	class:SafetyRules::Teleoperation
periodicUpdate	cola2_core/cola2_safety/src/cola2_safety/safety_rules/temperature.cpp	/^Temperature::periodicUpdate(const ros::Time& stamp, std::uint32_t* status_code_ptr)$/;"	f	class:SafetyRules::Temperature
periodicUpdate	cola2_core/cola2_safety/src/cola2_safety/safety_rules/virtual_cage.cpp	/^VirtualCage::periodicUpdate(const ros::Time& stamp, std::uint32_t*)$/;"	f	class:SafetyRules::VirtualCage
periodicUpdate	cola2_core/cola2_safety/src/cola2_safety/safety_rules/watchdog_timer.cpp	/^WatchdogTimer::periodicUpdate(const ros::Time& stamp, std::uint32_t* status_code_ptr)$/;"	f	class:SafetyRules::WatchdogTimer
periodicUpdate	cola2_core/cola2_safety/src/cola2_safety/safety_rules/water_inside.cpp	/^WaterInside::periodicUpdate(const ros::Time& stamp, std::uint32_t* status_code_ptr)$/;"	f	class:SafetyRules::WaterInside
phi	cola2_lib/include/cola2_lib/wmmc/GeomagnetismHeader.h	/^    double phi; \/* geodetic latitude *\/$/;"	m	struct:__anon15
phig	cola2_lib/include/cola2_lib/wmmc/GeomagnetismHeader.h	/^    double phig; \/* geocentric latitude*\/$/;"	m	struct:__anon16
pilotHasFinished	cola2_core/cola2_control/src/captain_node.cpp	/^bool Captain::pilotHasFinished()$/;"	f	class:Captain
pilotServerCallback	cola2_core/cola2_control/src/pilot_node.cpp	/^void Pilot::pilotServerCallback(const cola2_msgs::PilotGoalConstPtr& data)$/;"	f	class:Pilot
pilot_actionlib_	cola2_core/cola2_control/src/captain_node.cpp	/^  actionlib::SimpleActionClient<cola2_msgs::PilotAction> pilot_actionlib_;$/;"	m	class:Captain	file:
pilot_section_max_surge_velocity	cola2_core/cola2_control/src/captain_node.cpp	/^    double pilot_section_max_surge_velocity;$/;"	m	struct:Captain::__anon3	file:
pilot_server_	cola2_core/cola2_control/src/pilot_node.cpp	/^  std::shared_ptr<actionlib::SimpleActionServer<cola2_msgs::PilotAction> > pilot_server_;$/;"	m	class:Pilot	file:
pitch	cola2_core/cola2_control/include/cola2_control/controllers/types.h	/^  double pitch;$/;"	m	class:control::Nav
pitch	cola2_core/cola2_control/include/cola2_control/controllers/types.h	/^  double pitch;$/;"	m	class:control::RPY
pitch	cola2_core/cola2_control/include/cola2_control/controllers/types.h	/^  double pitch;$/;"	m	class:control::Vector6d
points_list	cola2_core/cola2_control/include/cola2_control/controllers/types.h	/^  std::vector<control::Point> points_list;$/;"	m	struct:control::PointsList
poly_heave_	cola2_core/cola2_control/src/open_loop_node.cpp	/^  Poly poly_surge_, poly_sway_, poly_heave_, poly_yaw_;$/;"	m	class:OpenLoop	file:
poly_negative_v_	cola2_core/cola2_control/include/cola2_control/low_level_controllers/only_thruster_allocator.h	/^  std::vector<Poly> poly_negative_v_;$/;"	m	class:OnlyThrusterAllocator
poly_positive_v_	cola2_core/cola2_control/include/cola2_control/low_level_controllers/only_thruster_allocator.h	/^  std::vector<Poly> poly_positive_v_;$/;"	m	class:OnlyThrusterAllocator
poly_surge_	cola2_core/cola2_control/src/open_loop_node.cpp	/^  Poly poly_surge_, poly_sway_, poly_heave_, poly_yaw_;$/;"	m	class:OpenLoop	file:
poly_sway_	cola2_core/cola2_control/src/open_loop_node.cpp	/^  Poly poly_surge_, poly_sway_, poly_heave_, poly_yaw_;$/;"	m	class:OpenLoop	file:
poly_yaw_	cola2_core/cola2_control/src/open_loop_node.cpp	/^  Poly poly_surge_, poly_sway_, poly_heave_, poly_yaw_;$/;"	m	class:OpenLoop	file:
port	cola2_lib/include/cola2_lib/io/tcp_socket.h	/^  unsigned int port;  \/\/!< Port of the TCP connection.$/;"	m	struct:cola2::io::TCPConfig
port_	cola2_lib/include/cola2_lib/io/udp_socket.h	/^  std::string port_;                             \/\/!< Port of the UDP server socket.$/;"	m	class:cola2::io::udp_socket::Server
port_	cola2_lib/include/cola2_lib/io/udp_socket.h	/^  std::string port_;   \/\/!< Port for the UDP connection.$/;"	m	class:cola2::io::udp_socket::Client
pose	cola2_core/cola2_control/include/cola2_control/controllers/types.h	/^  control::Pose pose;$/;"	m	struct:control::State
poseError	cola2_core/cola2_control/src/cola2_control/low_level_controllers/only_thrusters_controller.cpp	/^void OnlyThrustersController::poseError(const std::vector<double> setpoint, const std::vector<double> feedback,$/;"	f	class:OnlyThrustersController
poseOverwriteCallback	cola2_core/cola2_sim/src/dynamics_node.cpp	/^void Dynamics::poseOverwriteCallback(const nav_msgs::Odometry& msg)$/;"	f	class:Dynamics
pose_controller_	cola2_core/cola2_control/include/cola2_control/low_level_controllers/only_thrusters_controller.h	/^  NDofController pose_controller_;$/;"	m	class:OnlyThrustersController
pose_feedback_	cola2_core/cola2_control/include/cola2_control/low_level_controllers/auv_controller_base.h	/^  std::vector<double> pose_feedback_;$/;"	m	class:IAUVController
pose_merge_	cola2_core/cola2_control/include/cola2_control/low_level_controllers/auv_controller_base.h	/^  Merge pose_merge_;$/;"	m	class:IAUVController
position	cola2_core/cola2_control/include/cola2_control/controllers/types.h	/^  control::NED position;$/;"	m	class:control::Pose
position	cola2_core/cola2_nav/include/cola2_nav/ekf_base_ros.h	/^    Eigen::Vector3d position;$/;"	m	struct:EKFBaseROS::StampedPosition
position	cola2_core/cola2_nav/src/cola2_nav/transformations.cpp	/^Eigen::Vector3d position(const Eigen::Vector3d& measured_position, const Eigen::Quaterniond& body_orientation,$/;"	f	namespace:transforms
positionCovariance	cola2_core/cola2_nav/src/cola2_nav/transformations.cpp	/^Eigen::Matrix3d positionCovariance(const Eigen::Matrix3d& measured_position_covariance,$/;"	f	namespace:transforms
position_checking_east_	cola2_core/cola2_control/src/captain_node.cpp	/^  double position_checking_east_;$/;"	m	class:Captain	file:
position_checking_north_	cola2_core/cola2_control/src/captain_node.cpp	/^  double position_checking_north_;$/;"	m	class:Captain	file:
position_checking_time_	cola2_core/cola2_control/src/captain_node.cpp	/^  double position_checking_time_;$/;"	m	class:Captain	file:
prediction_model_covariance_	cola2_core/cola2_nav/include/cola2_nav/ekf_base_ros.h	/^    std::vector<double> prediction_model_covariance_;  \/\/!< prediction covariance (Q in the prediction equations)$/;"	m	struct:EKFBaseROS::Config
pressure_meters_	cola2_core/cola2_nav/include/cola2_nav/ekf_base_ros.h	/^  double pressure_meters_ = 0.0;    \/\/!< last measured pressure$/;"	m	class:EKFBaseROS
priority	cola2_core/cola2_control/include/cola2_control/controllers/types.h	/^  std::uint64_t priority;$/;"	m	class:control::Request
priority_	cola2_core/cola2_control/include/cola2_control/low_level_controllers/request.h	/^  unsigned int priority_;$/;"	m	class:Request
priority_list_	cola2_lib_ros/include/cola2_lib_ros/setpoints_selector.h	/^  std::vector<std::tuple<std::string, double>> priority_list_;  \/\/<! Priority list.$/;"	m	class:cola2::ros::SetpointsSelector
project	cola2_lib/doc/conf.py	/^project = u'cola2_lib (Python API)'$/;"	v
project	cola2_lib_ros/doc/conf.py	/^project = u'cola2_lib_ros (Python API)'$/;"	v
project	stonefish_ros/docs/conf.py	/^project = u'Stonefish ROS'$/;"	v
propellerSetpoints	stonefish_ros/include/stonefish_ros/ROSSimulationManager.h	/^		std::vector<Scalar> propellerSetpoints;$/;"	m	struct:sf::ROSRobot
pubBatCallback	cola2_core/cola2_sim/src/sim_internal_sensors_node.cpp	/^SimInternalSensors::pubBatCallback(const ros::TimerEvent& event)$/;"	f	class:SimInternalSensors
pubBatSCallback	cola2_core/cola2_sim/src/sim_internal_sensors_node.cpp	/^SimInternalSensors::pubBatSCallback(const ros::TimerEvent& event)$/;"	f	class:SimInternalSensors
pubPCCallback	cola2_core/cola2_sim/src/sim_internal_sensors_node.cpp	/^SimInternalSensors::pubPCCallback(const ros::TimerEvent& event)$/;"	f	class:SimInternalSensors
pub_	cola2_core/cola2_control/src/keyboard_node.cpp	/^  ros::Publisher pub_;$/;"	m	class:Keyboard	file:
pub_bat_humidity_	cola2_core/cola2_sim/src/sim_internal_sensors_node.cpp	/^  ros::Publisher pub_bat_humidity_, pub_bat_pressure_, pub_bat_temperature_, pub_bat_water_detected_;$/;"	m	class:SimInternalSensors	file:
pub_bat_pressure_	cola2_core/cola2_sim/src/sim_internal_sensors_node.cpp	/^  ros::Publisher pub_bat_humidity_, pub_bat_pressure_, pub_bat_temperature_, pub_bat_water_detected_;$/;"	m	class:SimInternalSensors	file:
pub_bat_status_	cola2_core/cola2_sim/src/sim_internal_sensors_node.cpp	/^  ros::Publisher pub_bat_status_;$/;"	m	class:SimInternalSensors	file:
pub_bat_temperature_	cola2_core/cola2_sim/src/sim_internal_sensors_node.cpp	/^  ros::Publisher pub_bat_humidity_, pub_bat_pressure_, pub_bat_temperature_, pub_bat_water_detected_;$/;"	m	class:SimInternalSensors	file:
pub_bat_water_detected_	cola2_core/cola2_sim/src/sim_internal_sensors_node.cpp	/^  ros::Publisher pub_bat_humidity_, pub_bat_pressure_, pub_bat_temperature_, pub_bat_water_detected_;$/;"	m	class:SimInternalSensors	file:
pub_bvr_	cola2_core/cola2_control/src/pilot_node.cpp	/^  ros::Publisher pub_bvr_;$/;"	m	class:Pilot	file:
pub_bvr_	cola2_core/cola2_safety/src/safe_depth_altitude_node.cpp	/^  ros::Publisher pub_bvr_;$/;"	m	class:SafeDepthAltitude	file:
pub_captain_state_feedback_	cola2_core/cola2_control/src/captain_node.cpp	/^  ros::Publisher pub_captain_state_feedback_;$/;"	m	class:Captain	file:
pub_captain_status_	cola2_core/cola2_control/src/captain_node.cpp	/^  ros::Publisher pub_captain_status_;$/;"	m	class:Captain	file:
pub_custom_output_	cola2_core/cola2_comms/src/comms_node.cpp	/^  ros::Publisher pub_custom_output_;  \/\/!< binarized user specific output$/;"	m	class:CommsNode	file:
pub_elapsed_	cola2_core/cola2_safety/src/watchdog_timer_node.cpp	/^  ros::Publisher pub_elapsed_;$/;"	m	class:WatchdogTimer	file:
pub_fins_setpoint_	cola2_core/cola2_control/include/cola2_control/ros_controller/auv_ros_controller_base.h	/^  ros::Publisher pub_fins_setpoint_;$/;"	m	class:IAUVROSController
pub_goal_	cola2_core/cola2_control/src/pilot_node.cpp	/^  ros::Publisher pub_goal_;$/;"	m	class:Pilot	file:
pub_gps_ned_	cola2_core/cola2_nav/include/cola2_nav/ekf_base_ros.h	/^  ros::Publisher pub_gps_ned_;          \/\/!< GPS projected in current NED$/;"	m	class:EKFBaseROS
pub_marker_	cola2_core/cola2_control/src/pilot_node.cpp	/^  ros::Publisher pub_marker_;$/;"	m	class:Pilot	file:
pub_marker_	cola2_core/cola2_safety/src/virtual_cage_node.cpp	/^  ros::Publisher pub_marker_;$/;"	m	class:VirtualCage	file:
pub_merged_pose_	cola2_core/cola2_control/include/cola2_control/ros_controller/auv_ros_controller_base.h	/^  ros::Publisher pub_merged_pose_;$/;"	m	class:IAUVROSController
pub_merged_twist_	cola2_core/cola2_control/include/cola2_control/ros_controller/auv_ros_controller_base.h	/^  ros::Publisher pub_merged_twist_;$/;"	m	class:IAUVROSController
pub_nav_	cola2_core/cola2_nav/include/cola2_nav/ekf_base_ros.h	/^  ros::Publisher pub_nav_;              \/\/!< custom navigation message$/;"	m	class:EKFBaseROS
pub_odom_	cola2_core/cola2_nav/include/cola2_nav/ekf_base_ros.h	/^  ros::Publisher pub_odom_;             \/\/!< odometry message$/;"	m	class:EKFBaseROS
pub_odom_	cola2_core/cola2_sim/src/dynamics_node.cpp	/^  ros::Publisher pub_odom_, pub_odom_gazebo_;$/;"	m	class:Dynamics	file:
pub_odom_gazebo_	cola2_core/cola2_sim/src/dynamics_node.cpp	/^  ros::Publisher pub_odom_, pub_odom_gazebo_;$/;"	m	class:Dynamics	file:
pub_path_	cola2_core/cola2_control/src/captain_node.cpp	/^  ros::Publisher pub_path_;$/;"	m	class:Captain	file:
pub_pc_humidity_	cola2_core/cola2_sim/src/sim_internal_sensors_node.cpp	/^  ros::Publisher pub_pc_humidity_, pub_pc_pressure_, pub_pc_temperature_, pub_pc_water_detected_;$/;"	m	class:SimInternalSensors	file:
pub_pc_pressure_	cola2_core/cola2_sim/src/sim_internal_sensors_node.cpp	/^  ros::Publisher pub_pc_humidity_, pub_pc_pressure_, pub_pc_temperature_, pub_pc_water_detected_;$/;"	m	class:SimInternalSensors	file:
pub_pc_temperature_	cola2_core/cola2_sim/src/sim_internal_sensors_node.cpp	/^  ros::Publisher pub_pc_humidity_, pub_pc_pressure_, pub_pc_temperature_, pub_pc_water_detected_;$/;"	m	class:SimInternalSensors	file:
pub_pc_water_detected_	cola2_core/cola2_sim/src/sim_internal_sensors_node.cpp	/^  ros::Publisher pub_pc_humidity_, pub_pc_pressure_, pub_pc_temperature_, pub_pc_water_detected_;$/;"	m	class:SimInternalSensors	file:
pub_ra_	cola2_core/cola2_safety/src/safety_supervisor_node.cpp	/^  ros::Publisher pub_sss_, pub_ra_, pub_thrusters_;$/;"	m	class:SafetySupervisor	file:
pub_sss_	cola2_core/cola2_safety/src/safety_supervisor_node.cpp	/^  ros::Publisher pub_sss_, pub_ra_, pub_thrusters_;$/;"	m	class:SafetySupervisor	file:
pub_thrusters_	cola2_core/cola2_control/src/open_loop_node.cpp	/^  ros::Publisher pub_thrusters_;$/;"	m	class:OpenLoop	file:
pub_thrusters_	cola2_core/cola2_safety/src/safety_supervisor_checker_node.cpp	/^  ros::Publisher pub_thrusters_;$/;"	m	class:SafetySupervisorChecker	file:
pub_thrusters_	cola2_core/cola2_safety/src/safety_supervisor_node.cpp	/^  ros::Publisher pub_sss_, pub_ra_, pub_thrusters_;$/;"	m	class:SafetySupervisor	file:
pub_thrusters_setpoint_	cola2_core/cola2_control/include/cola2_control/ros_controller/auv_ros_controller_base.h	/^  ros::Publisher pub_thrusters_setpoint_;$/;"	m	class:IAUVROSController
pub_to_modem_	cola2_core/cola2_comms/src/comms_node.cpp	/^  ros::Publisher pub_to_modem_;       \/\/!< message to be sent by the modem$/;"	m	class:CommsNode	file:
pub_ts_	cola2_lib_ros/include/cola2_lib_ros/setpoints_selector.h	/^  ::ros::Publisher pub_ts_;                                     \/\/<! Setpoints selector publisher.$/;"	m	class:cola2::ros::SetpointsSelector
pub_usbl_	cola2_core/cola2_comms/src/comms_node.cpp	/^  ros::Publisher pub_usbl_;           \/\/!< usbl update received from modem$/;"	m	class:CommsNode	file:
pub_usbl_ned_	cola2_core/cola2_nav/include/cola2_nav/ekf_base_ros.h	/^  ros::Publisher pub_usbl_ned_;         \/\/!< USBL projected in current NED$/;"	m	class:EKFBaseROS
pub_wrench_	cola2_core/cola2_control/include/cola2_control/ros_controller/auv_ros_controller_base.h	/^  ros::Publisher pub_wrench_;$/;"	m	class:IAUVROSController
pub_wwr_	cola2_core/cola2_control/src/pilot_node.cpp	/^  ros::Publisher pub_wwr_;$/;"	m	class:Pilot	file:
publish	cola2_core/cola2_log/src/param_logger_node.py	/^    def publish(self):$/;"	m	class:ParamLoggerNode
publish	cola2_lib_ros/python/cola2_ros/diagnostic_helper.py	/^    def publish(self, stamp=None):$/;"	m	class:DiagnosticHelper
publish	cola2_lib_ros/src/cola2_lib_ros/diagnostic_helper.cpp	/^DiagnosticHelper::publish(const ::ros::Time stamp)$/;"	f	class:cola2::ros::DiagnosticHelper
publishBaseLinkTransform	stonefish_ros/include/stonefish_ros/ROSSimulationManager.h	/^		bool publishBaseLinkTransform;$/;"	m	struct:sf::ROSRobot
publishControlCommands	cola2_core/cola2_control/src/pilot_node.cpp	/^void Pilot::publishControlCommands(const control::State& controller_output,$/;"	f	class:Pilot
publishFeedback	cola2_core/cola2_control/src/pilot_node.cpp	/^void Pilot::publishFeedback(const control::Feedback& feedback) const$/;"	f	class:Pilot
publishGPSNED	cola2_core/cola2_nav/src/cola2_nav/ekf_base_ros.cpp	/^void EKFBaseROS::publishGPSNED(const ros::Time& stamp, const Eigen::Vector3d& ned) const$/;"	f	class:EKFBaseROS
publishGoal	cola2_core/cola2_control/src/pilot_node.cpp	/^void Pilot::publishGoal(const double x, const double y, const double z) const$/;"	f	class:Pilot
publishMarker	cola2_core/cola2_control/src/pilot_node.cpp	/^void Pilot::publishMarker(const double north, const double east, const double depth) const$/;"	f	class:Pilot
publishMarkerSections	cola2_core/cola2_control/src/pilot_node.cpp	/^void Pilot::publishMarkerSections(const control::PointsList points) const$/;"	f	class:Pilot
publishMergedPose	cola2_core/cola2_control/src/cola2_control/ros_controller/auv_ros_controller.cpp	/^void IAUVROSController::publishMergedPose(const Request pose, const ros::Time now)$/;"	f	class:IAUVROSController
publishMergedTwist	cola2_core/cola2_control/src/cola2_control/ros_controller/auv_ros_controller.cpp	/^void IAUVROSController::publishMergedTwist(const Request twist, const ros::Time now)$/;"	f	class:IAUVROSController
publishMergedWrench	cola2_core/cola2_control/src/cola2_control/ros_controller/auv_ros_controller.cpp	/^void IAUVROSController::publishMergedWrench(const Request response, const ros::Time now)$/;"	f	class:IAUVROSController
publishNavigation	cola2_core/cola2_nav/src/cola2_nav/ekf_base_ros.cpp	/^void EKFBaseROS::publishNavigation(const ros::Time& stamp)$/;"	f	class:EKFBaseROS
publishOdometry	cola2_core/cola2_sim/src/dynamics_node.cpp	/^void Dynamics::publishOdometry()$/;"	f	class:Dynamics
publishThrusterSetpoint	cola2_core/cola2_control/src/cola2_control/ros_controller/auv_ros_controller.cpp	/^void IAUVROSController::publishThrusterSetpoint(const Eigen::VectorXd setpoint, const ros::Time now)$/;"	f	class:IAUVROSController
publishUSBLNED	cola2_core/cola2_nav/src/cola2_nav/ekf_base_ros.cpp	/^void EKFBaseROS::publishUSBLNED(const ros::Time& stamp, const Eigen::Vector3d& ned) const$/;"	f	class:EKFBaseROS
publish_depth	cola2_core/cola2_sim/src/sim_auv_nav_sensors_node.py	/^    def publish_depth(self, event):$/;"	m	class:SimAUVNavSensors
publish_dvl	cola2_core/cola2_sim/src/sim_auv_nav_sensors_node.py	/^    def publish_dvl(self, event):$/;"	m	class:SimAUVNavSensors
publish_gps	cola2_core/cola2_sim/src/sim_auv_nav_sensors_node.py	/^    def publish_gps(self, event):$/;"	m	class:SimAUVNavSensors
publish_imu	cola2_core/cola2_sim/src/sim_auv_nav_sensors_node.py	/^    def publish_imu(self, event):$/;"	m	class:SimAUVNavSensors
publish_usbl	cola2_core/cola2_sim/src/sim_auv_nav_sensors_node.py	/^    def publish_usbl(self, event):$/;"	m	class:SimAUVNavSensors
pubs	stonefish_ros/include/stonefish_ros/ROSSimulationManager.h	/^		std::map<std::string, ros::Publisher> pubs;$/;"	m	class:sf::ROSSimulationManager
pygments_style	cola2_lib/doc/conf.py	/^pygments_style = 'sphinx'$/;"	v
pygments_style	cola2_lib_ros/doc/conf.py	/^pygments_style = 'sphinx'$/;"	v
pygments_style	stonefish_ros/docs/conf.py	/^pygments_style = None$/;"	v
pystruct	cola2_core/cola2_comms/include/cppystruct/calcsize.h	/^namespace pystruct$/;"	n
pystruct	cola2_core/cola2_comms/include/cppystruct/data_view.h	/^namespace pystruct$/;"	n
pystruct	cola2_core/cola2_comms/include/cppystruct/format.h	/^namespace pystruct$/;"	n
pystruct	cola2_core/cola2_comms/include/cppystruct/pack.h	/^namespace pystruct$/;"	n
pystruct	cola2_core/cola2_comms/include/cppystruct/string.h	/^namespace pystruct$/;"	n
pystruct	cola2_core/cola2_comms/include/cppystruct/unpack.h	/^namespace pystruct$/;"	n
quadratic_damping	cola2_core/cola2_sim/src/dynamics_node.cpp	/^    Eigen::Vector6d quadratic_damping;$/;"	m	struct:Dynamics::Config	file:
quaternion2euler	cola2_lib/src/cola2_lib/utils/angles.cpp	/^Eigen::Vector3d quaternion2euler(const Eigen::Quaterniond &quat, unsigned int solution_number)$/;"	f	namespace:cola2::utils
queue_mutex	cola2_lib/include/cola2_lib/utils/thread_pool.h	/^  std::mutex queue_mutex;$/;"	m	class:ThreadPool
r	cola2_lib/include/cola2_lib/wmmc/GeomagnetismHeader.h	/^    double r; \/* distance from the center of the ellipsoid*\/$/;"	m	struct:__anon16
radiansToDegrees	cola2_lib/src/cola2_lib/utils/angles.cpp	/^double radiansToDegrees(const double radians)$/;"	f	namespace:cola2::utils
radiansToGradians	cola2_lib/src/cola2_lib/utils/angles.cpp	/^double radiansToGradians(const double value)$/;"	f	namespace:cola2::utils
radius	cola2_core/cola2_control/include/cola2_control/controllers/anchor.h	/^  double radius;$/;"	m	struct:__anon5
radius	cola2_core/cola2_sim/src/dynamics_node.cpp	/^    double radius;$/;"	m	struct:Dynamics::Config	file:
rate	cola2_core/cola2_sim/src/dynamics_node.cpp	/^    double rate;$/;"	m	struct:Dynamics::Config	file:
re	cola2_lib/include/cola2_lib/wmmc/GeomagnetismHeader.h	/^    double re; \/* mean radius of  ellipsoid*\/$/;"	m	struct:__anon14
read	cola2_lib/src/cola2_lib/io/serial_port.cpp	/^void SerialPort::read(DataBuffer& dataBuffer, const unsigned int numOfBytes, const unsigned int msTimeout)$/;"	f	class:cola2::io::SerialPort
read	cola2_lib/src/cola2_lib/io/tcp_socket.cpp	/^void TcpSocket::read(DataBuffer& dataBuffer, const unsigned int numOfBytes, const unsigned int msTimeout)$/;"	f	class:cola2::io::TcpSocket
read	cola2_lib/src/cola2_lib/io/udp_socket.cpp	/^std::string Client::read()$/;"	f	class:cola2::io::udp_socket::Client
readByte	cola2_lib/src/cola2_lib/io/serial_port.cpp	/^unsigned char SerialPort::readByte(const unsigned int msTimeout)$/;"	f	class:cola2::io::SerialPort
readByte	cola2_lib/src/cola2_lib/io/tcp_socket.cpp	/^unsigned char TcpSocket::readByte(const unsigned int msTimeout)$/;"	f	class:cola2::io::TcpSocket
readKeyboardHits	cola2_core/cola2_control/src/keyboard_node.cpp	/^  void readKeyboardHits()$/;"	f	class:Keyboard
readLine	cola2_lib/src/cola2_lib/io/serial_port.cpp	/^std::string SerialPort::readLine(const unsigned int msTimeout, const unsigned char lineTerminator)$/;"	f	class:cola2::io::SerialPort
readLine	cola2_lib/src/cola2_lib/io/tcp_socket.cpp	/^std::string TcpSocket::readLine(const unsigned int msTimeout, const unsigned char lineTerminator)$/;"	f	class:cola2::io::TcpSocket
readUntil	cola2_lib/src/cola2_lib/io/serial_port.cpp	/^void SerialPort::readUntil(DataBuffer& dataBuffer, const unsigned char delimiter, const unsigned int msTimeout)$/;"	f	class:cola2::io::SerialPort
readUntil	cola2_lib/src/cola2_lib/io/tcp_socket.cpp	/^void TcpSocket::readUntil(DataBuffer& dataBuffer, const unsigned char delimiter, const unsigned int msTimeout)$/;"	f	class:cola2::io::TcpSocket
reconnect	cola2_lib/src/cola2_lib/io/tcp_socket.cpp	/^void TcpSocket::reconnect()$/;"	f	class:cola2::io::TcpSocket
release	cola2_lib/doc/conf.py	/^release = version$/;"	v
release	cola2_lib_ros/doc/conf.py	/^release = version$/;"	v
release	stonefish_ros/docs/conf.py	/^release = u'1.3.0'$/;"	v
reloadConfigServiceCallback	cola2_core/cola2_sim/src/dynamics_node.cpp	/^bool Dynamics::reloadConfigServiceCallback(std_srvs::Trigger::Request&, std_srvs::Trigger::Response& res)$/;"	f	class:Dynamics
reloadParamsCallback	cola2_core/cola2_control/src/captain_node.cpp	/^bool Captain::reloadParamsCallback(std_srvs::Trigger::Request&, std_srvs::Trigger::Response& res)$/;"	f	class:Captain
reloadParamsCallback	cola2_core/cola2_control/src/pilot_node.cpp	/^bool Pilot::reloadParamsCallback(std_srvs::Trigger::Request&, std_srvs::Trigger::Response& res)$/;"	f	class:Pilot
reloadParamsCallback	cola2_core/cola2_safety/src/safe_depth_altitude_node.cpp	/^SafeDepthAltitude::reloadParamsCallback(std_srvs::Trigger::Request&, std_srvs::Trigger::Response& res)$/;"	f	class:SafeDepthAltitude
reloadParamsCallback	cola2_core/cola2_safety/src/virtual_cage_node.cpp	/^VirtualCage::reloadParamsCallback(std_srvs::Trigger::Request&, std_srvs::Trigger::Response& res)$/;"	f	class:VirtualCage
reload_params_srv_callback	cola2_core/cola2_control/src/teleoperation_node.py	/^    def reload_params_srv_callback(self, req):$/;"	m	class:Teleoperation
removeKeyValue	cola2_lib_ros/src/cola2_lib_ros/diagnostic_helper.cpp	/^DiagnosticHelper::removeKeyValue(const std::string& key)$/;"	f	class:cola2::ros::DiagnosticHelper
removeKeyValueImpl	cola2_lib_ros/src/cola2_lib_ros/diagnostic_helper.cpp	/^DiagnosticHelper::removeKeyValueImpl(const std::string& key)$/;"	f	class:cola2::ros::DiagnosticHelper
remove_action	cola2_lib/python/cola2/mission/mission_types.py	/^    def remove_action(self, id_action):$/;"	m	class:MissionStep
remove_action	cola2_lib/python/cola2/mission/mission_types_v1.py	/^    def remove_action(self, id_action):$/;"	m	class:MissionStep
remove_key_value	cola2_lib_ros/python/cola2_ros/diagnostic_helper.py	/^    def remove_key_value(self, key):$/;"	m	class:DiagnosticHelper
remove_namespace	cola2_core/cola2_log/src/default_param_handler_node.py	/^    def remove_namespace(self, text):$/;"	m	class:DefaultParamHandler
remove_step	cola2_lib/python/cola2/mission/mission_types.py	/^    def remove_step(self, step_id):$/;"	m	class:Mission
remove_step	cola2_lib/python/cola2/mission/mission_types_v1.py	/^    def remove_step(self, step_id):$/;"	m	class:Mission
repeat	cola2_core/cola2_comms/include/cppystruct/format.h	/^  size_t repeat;$/;"	m	struct:pystruct::RawFormatType
reportData	cola2_lib_ros/src/cola2_lib_ros/diagnostic_helper.cpp	/^DiagnosticHelper::reportData(const ::ros::Time stamp)$/;"	f	class:cola2::ros::DiagnosticHelper
reportValidData	cola2_lib_ros/src/cola2_lib_ros/diagnostic_helper.cpp	/^DiagnosticHelper::reportValidData(const ::ros::Time stamp)$/;"	f	class:cola2::ros::DiagnosticHelper
report_data	cola2_lib_ros/python/cola2_ros/diagnostic_helper.py	/^    def report_data(self, stamp=None):  # When the checksum is ok$/;"	m	class:DiagnosticHelper
report_valid_data	cola2_lib_ros/python/cola2_ros/diagnostic_helper.py	/^    def report_valid_data(self, stamp=None):  # When the data can be used$/;"	m	class:DiagnosticHelper
requester	cola2_core/cola2_control/include/cola2_control/controllers/types.h	/^  std::string requester;$/;"	m	class:control::Request
requester_	cola2_core/cola2_control/include/cola2_control/low_level_controllers/merge.h	/^  std::string requester_;$/;"	m	class:Merge
requester_	cola2_core/cola2_control/include/cola2_control/low_level_controllers/request.h	/^  std::string requester_;$/;"	m	class:Request
requires	cola2_core/cola2_control/setup.py	/^    requires=['std_msgs', 'rospy'])$/;"	v
requires	cola2_lib_ros/setup.py	/^    requires=['std_msgs', 'rospy'])$/;"	v
reset	cola2_core/cola2_control/src/cola2_control/low_level_controllers/controller_base.cpp	/^void IController::reset()$/;"	f	class:IController
reset	cola2_core/cola2_control/src/cola2_control/low_level_controllers/ndof_controller.cpp	/^void NDofController::reset()$/;"	f	class:NDofController
reset	cola2_core/cola2_control/src/cola2_control/low_level_controllers/only_thrusters_controller.cpp	/^void OnlyThrustersController::reset()$/;"	f	class:OnlyThrustersController
reset	cola2_core/cola2_control/src/cola2_control/low_level_controllers/pid.cpp	/^void PID::reset()$/;"	f	class:PID
reset	cola2_core/cola2_control/src/cola2_control/low_level_controllers/poly.cpp	/^void Poly::reset()$/;"	f	class:Poly
resetFilter	cola2_core/cola2_nav/src/cola2_nav/ekf_base_ros.cpp	/^void EKFBaseROS::resetFilter()$/;"	f	class:EKFBaseROS
resetKeepPositionSrv	cola2_core/cola2_control/src/captain_node.cpp	/^bool Captain::resetKeepPositionSrv(ros::ServiceEvent<std_srvs::Trigger::Request, std_srvs::Trigger::Response>& event)$/;"	f	class:Captain
resetManeuverFlags	cola2_core/cola2_control/src/captain_node.cpp	/^void Captain::resetManeuverFlags()$/;"	f	class:Captain
resetTimeoutCallback	cola2_core/cola2_safety/src/watchdog_timer_node.cpp	/^WatchdogTimer::resetTimeoutCallback(std_srvs::Trigger::Request&, std_srvs::Trigger::Response& res)$/;"	f	class:WatchdogTimer
reset_keep_position_srv_	cola2_core/cola2_control/src/captain_node.cpp	/^  ros::ServiceServer reset_keep_position_srv_;$/;"	m	class:Captain	file:
resumeMissionSrv	cola2_core/cola2_control/src/captain_node.cpp	/^bool Captain::resumeMissionSrv(cola2_msgs::Mission::Request& req, cola2_msgs::Mission::Response& res)$/;"	f	class:Captain
resume_mission_srv_	cola2_core/cola2_control/src/captain_node.cpp	/^  ros::ServiceServer resume_mission_srv_;$/;"	m	class:Captain	file:
robot	stonefish_ros/include/stonefish_ros/ROSSimulationManager.h	/^		ROSRobot* robot;$/;"	m	class:sf::PropellersCallback
robot	stonefish_ros/include/stonefish_ros/ROSSimulationManager.h	/^		ROSRobot* robot;$/;"	m	class:sf::RuddersCallback
robot	stonefish_ros/include/stonefish_ros/ROSSimulationManager.h	/^		ROSRobot* robot;$/;"	m	class:sf::ServosCallback
robot	stonefish_ros/include/stonefish_ros/ROSSimulationManager.h	/^		ROSRobot* robot;$/;"	m	class:sf::ThrustersCallback
robot	stonefish_ros/include/stonefish_ros/ROSSimulationManager.h	/^		Robot* robot;$/;"	m	struct:sf::ROSRobot
roll	cola2_core/cola2_control/include/cola2_control/controllers/types.h	/^  double roll;$/;"	m	class:control::Nav
roll	cola2_core/cola2_control/include/cola2_control/controllers/types.h	/^  double roll;$/;"	m	class:control::RPY
roll	cola2_core/cola2_control/include/cola2_control/controllers/types.h	/^  double roll;$/;"	m	class:control::Vector6d
ros	cola2_lib_ros/include/cola2_lib_ros/diagnostic_helper.h	/^namespace ros$/;"	n	namespace:cola2
ros	cola2_lib_ros/include/cola2_lib_ros/param_loader.h	/^namespace ros$/;"	n	namespace:cola2
ros	cola2_lib_ros/include/cola2_lib_ros/serviceclient_helper.h	/^namespace ros$/;"	n	namespace:cola2
ros	cola2_lib_ros/include/cola2_lib_ros/setpoints_selector.h	/^namespace ros$/;"	n	namespace:cola2
ros	cola2_lib_ros/include/cola2_lib_ros/this_node.h	/^namespace ros$/;"	n	namespace:cola2
ros	cola2_lib_ros/include/cola2_lib_ros/transform_handler.h	/^namespace ros$/;"	n	namespace:cola2
ros	cola2_lib_ros/src/cola2_lib_ros/diagnostic_helper.cpp	/^namespace ros$/;"	n	namespace:cola2	file:
ros	cola2_lib_ros/src/cola2_lib_ros/setpoints_selector.cpp	/^namespace ros$/;"	n	namespace:cola2	file:
rosRobots	stonefish_ros/include/stonefish_ros/ROSSimulationManager.h	/^		std::vector<ROSRobot*> rosRobots;$/;"	m	class:sf::ROSSimulationManager
rosutils	cola2_lib_ros/include/cola2_lib_ros/captain_helper.h	/^namespace rosutils$/;"	n	namespace:cola2
rosutils	cola2_lib_ros/src/cola2_lib_ros/captain_helper.cpp	/^namespace rosutils$/;"	n	namespace:cola2	file:
rotation2euler	cola2_lib/src/cola2_lib/utils/angles.cpp	/^Eigen::Vector3d rotation2euler(const Eigen::Matrix3d &rotation, unsigned int solution_number)$/;"	f	namespace:cola2::utils
rpy_	cola2_core/cola2_nav/include/cola2_nav/ekf_position_velocity.h	/^  Eigen::Vector3d rpy_ = Eigen::Vector3d::Zero();                    \/\/!< Current filter orientation$/;"	m	class:EKFPositionVelocity
rpy_	cola2_core/cola2_nav/include/cola2_nav/ekf_surface_2d.h	/^  Eigen::Vector3d rpy_ = Eigen::Vector3d::Zero();$/;"	m	class:EKFSurface2D
rpy_cov_	cola2_core/cola2_nav/include/cola2_nav/ekf_position_velocity.h	/^  Eigen::Matrix3d rpy_cov_ = 0.1 * Eigen::Matrix3d::Identity();      \/\/!< Current filter orientation covariance$/;"	m	class:EKFPositionVelocity
rpy_cov_	cola2_core/cola2_nav/include/cola2_nav/ekf_surface_2d.h	/^  Eigen::Matrix3d rpy_cov_ = 0.1 * Eigen::Matrix3d::Identity();$/;"	m	class:EKFSurface2D
rudderSetpoints	stonefish_ros/include/stonefish_ros/ROSSimulationManager.h	/^		std::vector<Scalar> rudderSetpoints;$/;"	m	struct:sf::ROSRobot
rule_name_	cola2_core/cola2_safety/include/cola2_safety/safety_rules/common.h	/^  const std::string rule_name_;$/;"	m	class:SafetyRules::SafetyRuleBaseClass
rules_	cola2_core/cola2_safety/src/safety_supervisor_node.cpp	/^  std::vector<SafetyRules::SafetyRuleBaseClass*> rules_;$/;"	m	class:SafetySupervisor	file:
run	cola2_lib/src/cola2_lib/io/udp_socket.cpp	/^Server& Server::run()$/;"	f	class:cola2::io::udp_socket::Server
safetyKeepPosition	cola2_core/cola2_control/src/captain_node.cpp	/^void Captain::safetyKeepPosition()$/;"	f	class:Captain
safety_keep_position_feedback_	cola2_core/cola2_control/src/captain_node.cpp	/^  cola2_msgs::CaptainStateFeedback safety_keep_position_feedback_;$/;"	m	class:Captain	file:
saturate	cola2_lib/src/cola2_lib/utils/saturate.cpp	/^double cola2::utils::saturate(const double x, const double min_max)$/;"	f	class:cola2::utils
saturate	cola2_lib/src/cola2_lib/utils/saturate.cpp	/^void cola2::utils::saturate(double& value, const double max_value, const double min_value)$/;"	f	class:cola2::utils
saturate_value	cola2_lib/python/cola2/utils/saturate.py	/^def saturate_value(values, min_max):$/;"	f
saturate_value_float	cola2_lib/python/cola2/utils/saturate.py	/^def saturate_value_float(v, min_max):$/;"	f
saturate_vector	cola2_lib/python/cola2/utils/saturate.py	/^def saturate_vector(values, min_max):$/;"	f
scnFilePath	stonefish_ros/include/stonefish_ros/ROSSimulationManager.h	/^		std::string scnFilePath;$/;"	m	class:sf::ROSSimulationManager
section	cola2_core/cola2_control/src/captain_node.cpp	/^void Captain::section()$/;"	f	class:Captain
section_config	cola2_core/cola2_control/src/pilot_node.cpp	/^    SectionControllerConfig section_config;$/;"	m	struct:Pilot::__anon4	file:
section_controller_	cola2_core/cola2_control/src/pilot_node.cpp	/^  std::shared_ptr<SectionController> section_controller_;$/;"	m	class:Pilot	file:
section_enabled_	cola2_core/cola2_control/src/captain_node.cpp	/^  bool section_enabled_;$/;"	m	class:Captain	file:
section_feedback_	cola2_core/cola2_control/src/captain_node.cpp	/^  cola2_msgs::CaptainStateFeedback section_feedback_;$/;"	m	class:Captain	file:
section_req_	cola2_core/cola2_control/src/captain_node.cpp	/^  cola2_msgs::Section::Request section_req_;$/;"	m	class:Captain	file:
sendBreak	cola2_lib/src/cola2_lib/io/serial_port.cpp	/^void SerialPort::sendBreak()$/;"	f	class:cola2::io::SerialPort
sendMessage	cola2_core/cola2_comms/src/comms_node.cpp	/^void CommsNode::sendMessage(const ros::TimerEvent &event)$/;"	f	class:CommsNode
send_to_modem_period	cola2_core/cola2_comms/src/comms_node.cpp	/^    double send_to_modem_period;  \/\/!< time between messages sent to modem$/;"	m	struct:CommsNode::Config	file:
sens	stonefish_ros/include/stonefish_ros/ROSSimulationManager.h	/^		Sensor* sens;$/;"	m	class:sf::SensorOriginCallback
serialPort_	cola2_lib/include/cola2_lib/io/serial_port.h	/^  mutable boost::asio::serial_port serialPort_;  \/\/!< Handler for the boost object that provides serial port$/;"	m	class:cola2::io::SerialPort
serviceCallback	cola2_core/cola2_safety/src/cola2_safety/safety_rules/manual.cpp	/^Manual::serviceCallback(cola2_msgs::Recovery::Request& req, cola2_msgs::Recovery::Response& res)$/;"	f	class:SafetyRules::Manual
servoSetpoints	stonefish_ros/include/stonefish_ros/ROSSimulationManager.h	/^		std::map<std::string, Scalar> servoSetpoints;$/;"	m	struct:sf::ROSRobot
servoVelocityMode	stonefish_ros/include/stonefish_ros/ROSSimulationManager.h	/^		bool servoVelocityMode;$/;"	m	struct:sf::ROSRobot
set	cola2_lib/python/cola2/mission/mission_types.py	/^    def set(self, action_id, parameters):$/;"	m	class:MissionAction
set	cola2_lib/python/cola2/mission/mission_types_v1.py	/^    def set(self, action_id, parameters):$/;"	m	class:MissionAction
set	cola2_lib/python/cola2/mission/mission_types_v1.py	/^    def set(self, initial_position, final_position, speed, tolerance):$/;"	m	class:MissionSection
set	cola2_lib/python/cola2/mission/mission_types_v1.py	/^    def set(self, key, value):$/;"	m	class:MissionConfiguration
set	cola2_lib/python/cola2/mission/mission_types_v1.py	/^    def set(self, latitude, longitude, z, altitude_mode):$/;"	m	class:MissionPosition
set	cola2_lib/python/cola2/mission/mission_types_v1.py	/^    def set(self, position, speed, time, tolerance):$/;"	m	class:MissionPark
set	cola2_lib/python/cola2/mission/mission_types_v1.py	/^    def set(self, position, speed, tolerance):$/;"	m	class:MissionWaypoint
set	cola2_lib/python/cola2/mission/mission_types_v1.py	/^    def set(self, x, y, z):$/;"	m	class:MissionTolerance
setActionId	cola2_lib/src/cola2_lib/mission/mission_action.cpp	/^void MissionAction::setActionId(const std::string& action_id)$/;"	f	class:MissionAction
setBaudRate	cola2_lib/src/cola2_lib/io/serial_port.cpp	/^void SerialPort::setBaudRate(const EBaudRate baudRate)$/;"	f	class:cola2::io::SerialPort
setBit	cola2_core/cola2_safety/src/cola2_safety/safety_rules/common.cpp	/^void setBit(std::uint32_t* status_code_ptr, const std::size_t bit, const bool state)$/;"	f	namespace:SafetyRules::StatusCodeBits
setCharSize	cola2_lib/src/cola2_lib/io/serial_port.cpp	/^void SerialPort::setCharSize(const ECharacterSize charSize)$/;"	f	class:cola2::io::SerialPort
setConfig	cola2_core/cola2_control/src/cola2_control/controllers/anchor.cpp	/^void AnchorController::setConfig(const AnchorControllerConfig& config)$/;"	f	class:AnchorController
setConfig	cola2_core/cola2_control/src/cola2_control/controllers/holonomic_keep_position.cpp	/^void HolonomicKeepPositionController::setConfig(const HolonomicKeepPositionControllerConfig& config)$/;"	f	class:HolonomicKeepPositionController
setConfig	cola2_core/cola2_control/src/cola2_control/controllers/section.cpp	/^void SectionController::setConfig(const SectionControllerConfig& config)$/;"	f	class:SectionController
setConfig	cola2_lib/src/cola2_lib/io/serial_port.cpp	/^void SerialPort::setConfig(const SPConfig config, bool do_configure)$/;"	f	class:cola2::io::SerialPort
setControllerParams	cola2_core/cola2_control/src/cola2_control/low_level_controllers/ndof_controller.cpp	/^void NDofController::setControllerParams(std::vector<std::map<std::string, double> > params)$/;"	f	class:NDofController
setControllerParams	cola2_core/cola2_control/src/cola2_control/low_level_controllers/only_thrusters_controller.cpp	/^void OnlyThrustersController::setControllerParams(const std::vector<std::map<std::string, double> > p_params,$/;"	f	class:OnlyThrustersController
setDisabledAxis	cola2_core/cola2_control/src/cola2_control/low_level_controllers/request.cpp	/^void Request::setDisabledAxis(std::vector<bool> values)$/;"	f	class:Request
setEnabled	cola2_lib_ros/src/cola2_lib_ros/diagnostic_helper.cpp	/^DiagnosticHelper::setEnabled(const bool enabled)$/;"	f	class:cola2::ros::DiagnosticHelper
setField	cola2_lib/python/cola2/io/nmea_parser.py	/^    def setField(self, i, text):$/;"	m	class:NMEAParser
setField	cola2_lib/src/cola2_lib/io/nmea_parser.cpp	/^void NMEAParser::setField(int i, const std::string& text)$/;"	f	class:NMEAParser
setFields	cola2_lib/python/cola2/io/nmea_parser.py	/^    def setFields(self, data):$/;"	m	class:NMEAParser
setFields	cola2_lib/src/cola2_lib/io/nmea_parser.cpp	/^int NMEAParser::setFields(std::string t)$/;"	f	class:NMEAParser
setFinAllocator	cola2_core/cola2_control/src/cola2_control/low_level_controllers/auv_controller_base.cpp	/^void IAUVController::setFinAllocator(const bool is_enabled)$/;"	f	class:IAUVController
setFinalAltitude	cola2_lib/src/cola2_lib/mission/mission_goto.cpp	/^void MissionGoto::setFinalAltitude(const double final_altitude)$/;"	f	class:MissionGoto
setFinalAltitude	cola2_lib/src/cola2_lib/mission/mission_park.cpp	/^void MissionPark::setFinalAltitude(const double final_altitude)$/;"	f	class:MissionPark
setFinalAltitude	cola2_lib/src/cola2_lib/mission/mission_section.cpp	/^void MissionSection::setFinalAltitude(const double final_altitude)$/;"	f	class:MissionSection
setFinalDepth	cola2_lib/src/cola2_lib/mission/mission_goto.cpp	/^void MissionGoto::setFinalDepth(const double final_depth)$/;"	f	class:MissionGoto
setFinalDepth	cola2_lib/src/cola2_lib/mission/mission_park.cpp	/^void MissionPark::setFinalDepth(const double final_depth)$/;"	f	class:MissionPark
setFinalDepth	cola2_lib/src/cola2_lib/mission/mission_section.cpp	/^void MissionSection::setFinalDepth(const double final_depth)$/;"	f	class:MissionSection
setFinalLatitude	cola2_lib/src/cola2_lib/mission/mission_goto.cpp	/^void MissionGoto::setFinalLatitude(const double final_latitude)$/;"	f	class:MissionGoto
setFinalLatitude	cola2_lib/src/cola2_lib/mission/mission_park.cpp	/^void MissionPark::setFinalLatitude(const double final_latitude)$/;"	f	class:MissionPark
setFinalLatitude	cola2_lib/src/cola2_lib/mission/mission_section.cpp	/^void MissionSection::setFinalLatitude(const double final_latitude)$/;"	f	class:MissionSection
setFinalLongitude	cola2_lib/src/cola2_lib/mission/mission_goto.cpp	/^void MissionGoto::setFinalLongitude(const double final_longitude)$/;"	f	class:MissionGoto
setFinalLongitude	cola2_lib/src/cola2_lib/mission/mission_park.cpp	/^void MissionPark::setFinalLongitude(const double final_longitude)$/;"	f	class:MissionPark
setFinalLongitude	cola2_lib/src/cola2_lib/mission/mission_section.cpp	/^void MissionSection::setFinalLongitude(const double final_longitude)$/;"	f	class:MissionSection
setFinalYaw	cola2_lib/src/cola2_lib/mission/mission_park.cpp	/^void MissionPark::setFinalYaw(const double final_yaw)$/;"	f	class:MissionPark
setFlowControl	cola2_lib/src/cola2_lib/io/serial_port.cpp	/^void SerialPort::setFlowControl(const EFlowControl flowControl)$/;"	f	class:cola2::io::SerialPort
setFrequencyBufferMinData	cola2_lib_ros/src/cola2_lib_ros/diagnostic_helper.cpp	/^DiagnosticHelper::setFrequencyBufferMinData(const std::size_t frequency_buffer_min_data)$/;"	f	class:cola2::ros::DiagnosticHelper
setFrequencyBufferMinTime	cola2_lib_ros/src/cola2_lib_ros/diagnostic_helper.cpp	/^DiagnosticHelper::setFrequencyBufferMinTime(const double frequency_buffer_min_time)$/;"	f	class:cola2::ros::DiagnosticHelper
setFrequencyBufferTimeLimit	cola2_lib_ros/src/cola2_lib_ros/diagnostic_helper.cpp	/^DiagnosticHelper::setFrequencyBufferTimeLimit(const double frequency_buffer_time_limit)$/;"	f	class:cola2::ros::DiagnosticHelper
setHeaveMode	cola2_lib/src/cola2_lib/mission/mission_goto.cpp	/^void MissionGoto::setHeaveMode(const MissionGoto::HeaveMode heave_mode)$/;"	f	class:MissionGoto
setHeaveMode	cola2_lib/src/cola2_lib/mission/mission_park.cpp	/^void MissionPark::setHeaveMode(const MissionPark::HeaveMode heave_mode)$/;"	f	class:MissionPark
setHeaveMode	cola2_lib/src/cola2_lib/mission/mission_section.cpp	/^void MissionSection::setHeaveMode(const MissionSection::HeaveMode heave_mode)$/;"	f	class:MissionSection
setInitialDepth	cola2_lib/src/cola2_lib/mission/mission_section.cpp	/^void MissionSection::setInitialDepth(const double initial_depth)$/;"	f	class:MissionSection
setInitialLatitude	cola2_lib/src/cola2_lib/mission/mission_section.cpp	/^void MissionSection::setInitialLatitude(const double initial_latitude)$/;"	f	class:MissionSection
setInitialLongitude	cola2_lib/src/cola2_lib/mission/mission_section.cpp	/^void MissionSection::setInitialLongitude(const double initial_longitude)$/;"	f	class:MissionSection
setIp	cola2_lib/src/cola2_lib/io/udp_socket.cpp	/^Client& Client::setIp(const std::string& ip)$/;"	f	class:cola2::io::udp_socket::Client
setIsFinAllocatorEnable	cola2_core/cola2_control/src/cola2_control/low_level_controllers/auv_controller_base.cpp	/^void IAUVController::setIsFinAllocatorEnable(const bool& value)$/;"	f	class:IAUVController
setIsPoseControllerEnable	cola2_core/cola2_control/src/cola2_control/low_level_controllers/auv_controller_base.cpp	/^void IAUVController::setIsPoseControllerEnable(const bool& value)$/;"	f	class:IAUVController
setIsThrusterAllocatorEnable	cola2_core/cola2_control/src/cola2_control/low_level_controllers/auv_controller_base.cpp	/^void IAUVController::setIsThrusterAllocatorEnable(const bool& value)$/;"	f	class:IAUVController
setIsVelocityControllerEnable	cola2_core/cola2_control/src/cola2_control/low_level_controllers/auv_controller_base.cpp	/^void IAUVController::setIsVelocityControllerEnable(const bool& value)$/;"	f	class:IAUVController
setKeyValue	cola2_core/cola2_control/src/captain_node.cpp	/^void setKeyValue(cola2_msgs::CaptainStateFeedback* feedback, const std::string& key, const std::string& value)$/;"	f
setLevelAndMessage	cola2_lib_ros/src/cola2_lib_ros/diagnostic_helper.cpp	/^DiagnosticHelper::setLevelAndMessage(const std::uint8_t level, const std::string& message)$/;"	f	class:cola2::ros::DiagnosticHelper
setManeuverPtr	cola2_lib/src/cola2_lib/mission/mission_step.cpp	/^void MissionStep::setManeuverPtr(std::shared_ptr<MissionManeuver> maneuver)$/;"	f	class:MissionStep
setMaxVelocity	cola2_core/cola2_control/src/cola2_control/low_level_controllers/auv_controller_base.cpp	/^void IAUVController::setMaxVelocity(std::vector<double> max_velocity)$/;"	f	class:IAUVController
setMaxWrench	cola2_core/cola2_control/src/cola2_control/low_level_controllers/auv_controller_base.cpp	/^void IAUVController::setMaxWrench(std::vector<double> max_wrench)$/;"	f	class:IAUVController
setMergedWrench	cola2_core/cola2_control/src/cola2_control/low_level_controllers/auv_controller_base.cpp	/^void IAUVController::setMergedWrench(const Request wrench)$/;"	f	class:IAUVController
setMessage	cola2_lib_ros/src/cola2_lib_ros/diagnostic_helper.cpp	/^DiagnosticHelper::setMessage(const std::string& message)$/;"	f	class:cola2::ros::DiagnosticHelper
setNoAltitudeGoesUp	cola2_lib/src/cola2_lib/mission/mission_goto.cpp	/^void MissionGoto::setNoAltitudeGoesUp(const bool no_altitude_goes_up)$/;"	f	class:MissionGoto
setNoAltitudeGoesUp	cola2_lib/src/cola2_lib/mission/mission_park.cpp	/^void MissionPark::setNoAltitudeGoesUp(const bool no_altitude_goes_up)$/;"	f	class:MissionPark
setNoAltitudeGoesUp	cola2_lib/src/cola2_lib/mission/mission_section.cpp	/^void MissionSection::setNoAltitudeGoesUp(const bool no_altitude_goes_up)$/;"	f	class:MissionSection
setNumOfStopBits	cola2_lib/src/cola2_lib/io/serial_port.cpp	/^void SerialPort::setNumOfStopBits(const EStopBits stopBits)$/;"	f	class:cola2::io::SerialPort
setParameters	cola2_core/cola2_control/src/cola2_control/low_level_controllers/controller_base.cpp	/^bool IController::setParameters(std::map<std::string, double>)$/;"	f	class:IController
setParameters	cola2_core/cola2_control/src/cola2_control/low_level_controllers/pid.cpp	/^bool PID::setParameters(std::map<std::string, double> params)$/;"	f	class:PID
setParameters	cola2_core/cola2_control/src/cola2_control/low_level_controllers/poly.cpp	/^bool Poly::setParameters(std::map<std::string, double> params)$/;"	f	class:Poly
setParams	cola2_core/cola2_control/src/cola2_control/low_level_controllers/only_thruster_allocator.cpp	/^void OnlyThrusterAllocator::setParams(const std::vector<double>& max_force_thruster_positive_v,$/;"	f	class:OnlyThrusterAllocator
setParams	cola2_core/cola2_control/src/controller_node.cpp	/^  void setParams(cola2_control::controllerConfig& config, uint32_t)$/;"	f	class:OnlyThrustersROSController
setParity	cola2_lib/src/cola2_lib/io/serial_port.cpp	/^void SerialPort::setParity(const EParity parity)$/;"	f	class:cola2::io::SerialPort
setParseList	cola2_core/cola2_safety/src/cola2_safety/safety_rules/common.cpp	/^SafetyRuleBaseClass::setParseList(const ParseList& parse_list)$/;"	f	class:SafetyRules::SafetyRuleBaseClass
setParseListWithHwId	cola2_core/cola2_safety/src/cola2_safety/safety_rules/common.cpp	/^SafetyRuleBaseClass::setParseListWithHwId(const ParseListWithHwId& parse_list)$/;"	f	class:SafetyRules::SafetyRuleBaseClass
setPort	cola2_lib/src/cola2_lib/io/udp_socket.cpp	/^Client& Client::setPort(const std::string& port)$/;"	f	class:cola2::io::udp_socket::Client
setPort	cola2_lib/src/cola2_lib/io/udp_socket.cpp	/^Server& Server::setPort(const std::string& port)$/;"	f	class:cola2::io::udp_socket::Server
setPoseController	cola2_core/cola2_control/src/cola2_control/low_level_controllers/auv_controller_base.cpp	/^void IAUVController::setPoseController(const bool is_enabled)$/;"	f	class:IAUVController
setPositionXY	cola2_core/cola2_nav/src/cola2_nav/ekf_position_velocity.cpp	/^void EKFPositionVelocity::setPositionXY(const Eigen::Vector2d& xy)$/;"	f	class:EKFPositionVelocity
setPositionXY	cola2_core/cola2_nav/src/cola2_nav/ekf_surface_2d.cpp	/^void EKFSurface2D::setPositionXY(const Eigen::Vector2d& xy)$/;"	f	class:EKFSurface2D
setPositionXYasGPSinit	cola2_core/cola2_nav/src/cola2_nav/ekf_base_ros.cpp	/^void EKFBaseROS::setPositionXYasGPSinit(const Eigen::Vector2d& xy)$/;"	f	class:EKFBaseROS
setPriority	cola2_core/cola2_control/src/cola2_control/low_level_controllers/request.cpp	/^void Request::setPriority(const unsigned int priority)$/;"	f	class:Request
setRequester	cola2_core/cola2_control/src/cola2_control/low_level_controllers/request.cpp	/^void Request::setRequester(std::string name)$/;"	f	class:Request
setSetZeroVelocityAxes	cola2_core/cola2_control/src/cola2_control/low_level_controllers/auv_controller_base.cpp	/^void IAUVController::setSetZeroVelocityAxes(const std::vector<bool>& axes)$/;"	f	class:IAUVController
setSetZeroVelocityDepth	cola2_core/cola2_control/src/cola2_control/low_level_controllers/auv_controller_base.cpp	/^void IAUVController::setSetZeroVelocityDepth(const double depth)$/;"	f	class:IAUVController
setSetZeroVelocityPriority	cola2_core/cola2_control/src/cola2_control/low_level_controllers/auv_controller_base.cpp	/^void IAUVController::setSetZeroVelocityPriority(const int priority)$/;"	f	class:IAUVController
setState	cola2_lib/src/cola2_lib/utils/thread_safe_flag.cpp	/^void ThreadSafeFlag::setState(const bool state)$/;"	f	class:cola2::utils::ThreadSafeFlag
setSurgeVelocity	cola2_lib/src/cola2_lib/mission/mission_goto.cpp	/^void MissionGoto::setSurgeVelocity(const double surge_velocity)$/;"	f	class:MissionGoto
setSurgeVelocity	cola2_lib/src/cola2_lib/mission/mission_park.cpp	/^void MissionPark::setSurgeVelocity(const double surge_velocity)$/;"	f	class:MissionPark
setSurgeVelocity	cola2_lib/src/cola2_lib/mission/mission_section.cpp	/^void MissionSection::setSurgeVelocity(const double surge_velocity)$/;"	f	class:MissionSection
setThrusterAllocator	cola2_core/cola2_control/src/cola2_control/low_level_controllers/auv_controller_base.cpp	/^void IAUVController::setThrusterAllocator(const bool is_enabled)$/;"	f	class:IAUVController
setTime	cola2_lib/src/cola2_lib/mission/mission_park.cpp	/^void MissionPark::setTime(const double t)$/;"	f	class:MissionPark
setToleranceXY	cola2_lib/src/cola2_lib/mission/mission_goto.cpp	/^void MissionGoto::setToleranceXY(const double tolerance_xy)$/;"	f	class:MissionGoto
setToleranceXY	cola2_lib/src/cola2_lib/mission/mission_section.cpp	/^void MissionSection::setToleranceXY(const double tolerance_xy)$/;"	f	class:MissionSection
setTransformManually	cola2_lib_ros/src/cola2_lib_ros/transform_handler.cpp	/^void cola2::ros::TransformHandler::setTransformManually(const std::string& frame, const double x, const double y,$/;"	f	class:cola2::ros::TransformHandler
setUseYaw	cola2_lib/src/cola2_lib/mission/mission_park.cpp	/^void MissionPark::setUseYaw(const bool use_yaw)$/;"	f	class:MissionPark
setValues	cola2_core/cola2_control/src/cola2_control/low_level_controllers/request.cpp	/^void Request::setValues(std::vector<double> values)$/;"	f	class:Request
setVelocityController	cola2_core/cola2_control/src/cola2_control/low_level_controllers/auv_controller_base.cpp	/^void IAUVController::setVelocityController(const bool is_enabled)$/;"	f	class:IAUVController
set_axes_velocity	cola2_core/cola2_control/src/teleoperation_node.py	/^    def set_axes_velocity(self, req):$/;"	m	class:Teleoperation
set_enabled	cola2_lib_ros/python/cola2_ros/diagnostic_helper.py	/^    def set_enabled(self, enabled):$/;"	m	class:DiagnosticHelper
set_frequency_buffer_min_data	cola2_lib_ros/python/cola2_ros/diagnostic_helper.py	/^    def set_frequency_buffer_min_data(self, frequency_buffer_min_data):$/;"	m	class:DiagnosticHelper
set_frequency_buffer_min_time	cola2_lib_ros/python/cola2_ros/diagnostic_helper.py	/^    def set_frequency_buffer_min_time(self, frequency_buffer_min_time):$/;"	m	class:DiagnosticHelper
set_frequency_buffer_time_limit	cola2_lib_ros/python/cola2_ros/diagnostic_helper.py	/^    def set_frequency_buffer_time_limit(self, frequency_buffer_time_limit):$/;"	m	class:DiagnosticHelper
set_lat_lon	cola2_lib/python/cola2/mission/mission_types_v1.py	/^    def set_lat_lon(self, latitude, longitude):$/;"	m	class:MissionPosition
set_level_and_message	cola2_lib_ros/python/cola2_ros/diagnostic_helper.py	/^    def set_level_and_message(self, level, message=""):$/;"	m	class:DiagnosticHelper
set_level_called_	cola2_lib_ros/include/cola2_lib_ros/diagnostic_helper.h	/^  bool set_level_called_;                            \/\/!< Level has been set.$/;"	m	class:cola2::ros::DiagnosticHelper
set_max_joy_vel	cola2_core/cola2_control/src/teleoperation_node.py	/^    def set_max_joy_vel(self, req):$/;"	m	class:Teleoperation
set_message	cola2_lib_ros/python/cola2_ros/diagnostic_helper.py	/^    def set_message(self, message):$/;"	m	class:DiagnosticHelper
set_position	cola2_lib/python/cola2/mission/mission_types_v1.py	/^    def set_position(self, position):$/;"	m	class:MissionWaypoint
set_zero_velocity_axes_	cola2_core/cola2_control/include/cola2_control/low_level_controllers/auv_controller_base.h	/^  std::vector<bool> set_zero_velocity_axes_;$/;"	m	class:IAUVController
set_zero_velocity_depth_	cola2_core/cola2_control/include/cola2_control/low_level_controllers/auv_controller_base.h	/^  double set_zero_velocity_depth_;$/;"	m	class:IAUVController
set_zero_velocity_priority_	cola2_core/cola2_control/include/cola2_control/low_level_controllers/auv_controller_base.h	/^  int set_zero_velocity_priority_;$/;"	m	class:IAUVController
setpoint_coefs_	cola2_core/cola2_control/include/cola2_control/low_level_controllers/poly.h	/^  std::vector<double> setpoint_coefs_;$/;"	m	class:Poly
setpoints_selector_	cola2_core/cola2_sim/src/dynamics_node.cpp	/^  cola2::ros::SetpointsSelector setpoints_selector_;$/;"	m	class:Dynamics	file:
setpoints_sent_	cola2_core/cola2_control/src/open_loop_node.cpp	/^  std::size_t setpoints_sent_;$/;"	m	class:OpenLoop	file:
setup_args	cola2_core/cola2_control/setup.py	/^setup_args = generate_distutils_setup($/;"	v
setup_args	cola2_lib_ros/setup.py	/^setup_args = generate_distutils_setup($/;"	v
sf	stonefish_ros/include/stonefish_ros/ROSInterface.h	/^namespace sf$/;"	n
sf	stonefish_ros/include/stonefish_ros/ROSScenarioParser.h	/^namespace sf$/;"	n
sf	stonefish_ros/include/stonefish_ros/ROSSimulationManager.h	/^namespace sf$/;"	n
sf	stonefish_ros/src/ROSInterface.cpp	/^namespace sf$/;"	n	file:
sf	stonefish_ros/src/ROSScenarioParser.cpp	/^namespace sf$/;"	n	file:
sf	stonefish_ros/src/ROSSimulationManager.cpp	/^namespace sf$/;"	n	file:
shouldPad	cola2_core/cola2_comms/include/cppystruct/format.h	/^  static constexpr bool shouldPad()$/;"	f	struct:pystruct::FormatMode
showInfoOrWarning	cola2_core/cola2_nav/src/cola2_nav/ekf_base_ros.cpp	/^void showInfoOrWarning(const char* text, const bool use_info)$/;"	f
showStateVector	cola2_core/cola2_nav/src/cola2_nav/ekf_base.cpp	/^void EKFBase::showStateVector() const$/;"	f	class:EKFBase
shrinkFrequencyBuffer	cola2_lib_ros/src/cola2_lib_ros/diagnostic_helper.cpp	/^DiagnosticHelper::shrinkFrequencyBuffer(const double now)$/;"	f	class:cola2::ros::DiagnosticHelper
shutdown_requested	cola2_core/cola2_log/startup_processes/shutdown_logger_startup_process.cpp	/^sig_atomic_t volatile shutdown_requested = 0;$/;"	v
sin_mlambda	cola2_lib/include/cola2_lib/wmmc/GeomagnetismHeader.h	/^    double *sin_mlambda; \/* sp(m)  - sine of (m*spherical coord. longitude) *\/$/;"	m	struct:__anon20
size	cola2_core/cola2_comms/include/cppystruct/data_view.h	/^  size_t size = 0;$/;"	m	struct:pystruct::data_view
size	cola2_core/cola2_comms/include/cppystruct/format.h	/^  size_t size;$/;"	m	struct:pystruct::FormatType
size	cola2_core/cola2_comms/include/cppystruct/format.h	/^  static constexpr size_t size()$/;"	f	struct:pystruct::BigEndianFormat
size	cola2_lib/python/cola2/io/nmea_parser.py	/^    def size(self):$/;"	m	class:NMEAParser
size	cola2_lib/python/cola2/mission/mission_types.py	/^    def size(self):$/;"	m	class:Mission
size	cola2_lib/python/cola2/mission/mission_types_v1.py	/^    def size(self):$/;"	m	class:Mission
size	cola2_lib/src/cola2_lib/io/nmea_parser.cpp	/^int NMEAParser::size()$/;"	f	class:NMEAParser
size	cola2_lib/src/cola2_lib/mission/mission.cpp	/^std::size_t Mission::size()$/;"	f	class:Mission
sm	stonefish_ros/include/stonefish_ros/ROSSimulationManager.h	/^		ROSSimulationManager* sm;$/;"	m	class:sf::PropellersCallback
sm	stonefish_ros/include/stonefish_ros/ROSSimulationManager.h	/^		ROSSimulationManager* sm;$/;"	m	class:sf::RuddersCallback
sm	stonefish_ros/include/stonefish_ros/ROSSimulationManager.h	/^		ROSSimulationManager* sm;$/;"	m	class:sf::ServosCallback
sm	stonefish_ros/include/stonefish_ros/ROSSimulationManager.h	/^		ROSSimulationManager* sm;$/;"	m	class:sf::ThrustersCallback
socket_	cola2_lib/include/cola2_lib/io/tcp_socket.h	/^  boost::asio::ip::tcp::socket socket_;  \/\/!< Handler for the boost object that provides TCP socket functionality$/;"	m	class:cola2::io::TcpSocket
sonarMsgPrototypes	stonefish_ros/include/stonefish_ros/ROSSimulationManager.h	/^		std::map<std::string, std::pair<sensor_msgs::ImagePtr, sensor_msgs::ImagePtr>> sonarMsgPrototypes;$/;"	m	class:sf::ROSSimulationManager
sound_velocity_	cola2_core/cola2_nav/include/cola2_nav/ekf_base_ros.h	/^  double sound_velocity_ = 1500.0;  \/\/!< sound velocity$/;"	m	class:EKFBaseROS
source_suffix	cola2_lib/doc/conf.py	/^source_suffix = '.rst'$/;"	v
source_suffix	cola2_lib_ros/doc/conf.py	/^source_suffix = '.rst'$/;"	v
source_suffix	stonefish_ros/docs/conf.py	/^source_suffix = '.rst'$/;"	v
sp_baud_rate	cola2_lib/include/cola2_lib/io/serial_port.h	/^  int sp_baud_rate;             \/\/!< Baud rate.$/;"	m	struct:cola2::io::SPConfig
sp_char_size	cola2_lib/include/cola2_lib/io/serial_port.h	/^  int sp_char_size;             \/\/!< Char size.$/;"	m	struct:cola2::io::SPConfig
sp_flow_control	cola2_lib/include/cola2_lib/io/serial_port.h	/^  std::string sp_flow_control;  \/\/!< Flow control.$/;"	m	struct:cola2::io::SPConfig
sp_parity	cola2_lib/include/cola2_lib/io/serial_port.h	/^  std::string sp_parity;        \/\/!< Parity.$/;"	m	struct:cola2::io::SPConfig
sp_path	cola2_lib/include/cola2_lib/io/serial_port.h	/^  std::string sp_path;          \/\/!< Path.$/;"	m	struct:cola2::io::SPConfig
sp_stop_bits	cola2_lib/include/cola2_lib/io/serial_port.h	/^  int sp_stop_bits;             \/\/!< Stop bits.$/;"	m	struct:cola2::io::SPConfig
sp_timeout	cola2_lib/include/cola2_lib/io/serial_port.h	/^  int sp_timeout;               \/\/!< Timeout.$/;"	m	struct:cola2::io::SPConfig
srvDCurrents	stonefish_ros/include/stonefish_ros/ROSSimulationManager.h	/^		ros::ServiceServer srvECurrents, srvDCurrents;$/;"	m	class:sf::ROSSimulationManager
srvECurrents	stonefish_ros/include/stonefish_ros/ROSSimulationManager.h	/^		ros::ServiceServer srvECurrents, srvDCurrents;$/;"	m	class:sf::ROSSimulationManager
srvReloadNED	cola2_core/cola2_nav/src/cola2_nav/ekf_base_ros.cpp	/^bool EKFBaseROS::srvReloadNED(std_srvs::Trigger::Request&, std_srvs::Trigger::Response& res)$/;"	f	class:EKFBaseROS
srvReloadParams	cola2_core/cola2_comms/src/comms_node.cpp	/^bool CommsNode::srvReloadParams(std_srvs::Trigger::Request &, std_srvs::Trigger::Response &res)$/;"	f	class:CommsNode
srvReloadParams	cola2_core/cola2_safety/src/safety_supervisor_node.cpp	/^SafetySupervisor::srvReloadParams(std_srvs::Trigger::Request&, std_srvs::Trigger::Response& res)$/;"	f	class:SafetySupervisor
srvResetNavigation	cola2_core/cola2_nav/src/cola2_nav/ekf_base_ros.cpp	/^bool EKFBaseROS::srvResetNavigation(std_srvs::Trigger::Request&, std_srvs::Trigger::Response& res)$/;"	f	class:EKFBaseROS
srvSetDepthSensorOffset	cola2_core/cola2_nav/src/cola2_nav/ekf_base_ros.cpp	/^bool EKFBaseROS::srvSetDepthSensorOffset(std_srvs::Trigger::Request&, std_srvs::Trigger::Response& res)$/;"	f	class:EKFBaseROS
srv_	cola2_core/cola2_safety/include/cola2_safety/safety_rules/manual.h	/^  ros::ServiceServer srv_;$/;"	m	class:SafetyRules::Manual
srv_disable_no_altitude_goes_up_	cola2_core/cola2_safety/src/safe_depth_altitude_node.cpp	/^  ros::ServiceServer srv_enable_no_altitude_goes_up_, srv_disable_no_altitude_goes_up_, srv_reload_params_;$/;"	m	class:SafeDepthAltitude	file:
srv_enable_no_altitude_goes_up_	cola2_core/cola2_safety/src/safe_depth_altitude_node.cpp	/^  ros::ServiceServer srv_enable_no_altitude_goes_up_, srv_disable_no_altitude_goes_up_, srv_reload_params_;$/;"	m	class:SafeDepthAltitude	file:
srv_publish	cola2_core/cola2_log/src/param_logger_node.py	/^    def srv_publish(self, req):$/;"	m	class:ParamLoggerNode
srv_publish_params_	cola2_core/cola2_control/src/captain_node.cpp	/^  ros::ServiceClient srv_publish_params_;$/;"	m	class:Captain	file:
srv_publish_params_	cola2_core/cola2_control/src/pilot_node.cpp	/^  ros::ServiceClient srv_publish_params_;$/;"	m	class:Pilot	file:
srv_publish_params_	cola2_core/cola2_nav/include/cola2_nav/ekf_base_ros.h	/^  ros::ServiceClient srv_publish_params_;           \/\/!< service to tell param_logger that parameters have been updated$/;"	m	class:EKFBaseROS
srv_publish_params_	cola2_core/cola2_sim/src/dynamics_node.cpp	/^  ros::ServiceClient srv_publish_params_;$/;"	m	class:Dynamics	file:
srv_reload_ned_	cola2_core/cola2_nav/include/cola2_nav/ekf_base_ros.h	/^  ros::ServiceServer srv_reload_ned_;               \/\/!< reload ned config and reuse current filter$/;"	m	class:EKFBaseROS
srv_reload_params_	cola2_core/cola2_comms/src/comms_node.cpp	/^  ros::ServiceServer srv_reload_params_;  \/\/!< reload config of this node$/;"	m	class:CommsNode	file:
srv_reload_params_	cola2_core/cola2_control/src/captain_node.cpp	/^  ros::ServiceServer srv_reload_params_;$/;"	m	class:Captain	file:
srv_reload_params_	cola2_core/cola2_control/src/pilot_node.cpp	/^  ros::ServiceServer srv_reload_params_;$/;"	m	class:Pilot	file:
srv_reload_params_	cola2_core/cola2_nav/include/cola2_nav/ekf_base_ros.h	/^  ros::ServiceServer srv_reload_params_;            \/\/!< same as reset navigation$/;"	m	class:EKFBaseROS
srv_reload_params_	cola2_core/cola2_safety/src/safe_depth_altitude_node.cpp	/^  ros::ServiceServer srv_enable_no_altitude_goes_up_, srv_disable_no_altitude_goes_up_, srv_reload_params_;$/;"	m	class:SafeDepthAltitude	file:
srv_reload_params_	cola2_core/cola2_safety/src/safety_supervisor_node.cpp	/^  ros::ServiceServer srv_reload_params_;$/;"	m	class:SafetySupervisor	file:
srv_reload_params_	cola2_core/cola2_safety/src/virtual_cage_node.cpp	/^  ros::ServiceServer srv_reload_params_;$/;"	m	class:VirtualCage	file:
srv_reload_params_	cola2_core/cola2_sim/src/dynamics_node.cpp	/^  ros::ServiceServer srv_reload_params_;$/;"	m	class:Dynamics	file:
srv_reset_navigation_	cola2_core/cola2_nav/include/cola2_nav/ekf_base_ros.h	/^  ros::ServiceServer srv_reset_navigation_;         \/\/!< realoads params and sets the filter to initial state$/;"	m	class:EKFBaseROS
srv_reset_timeout_	cola2_core/cola2_comms/src/comms_node.cpp	/^  ros::ServiceClient srv_reset_timeout_;  \/\/!< service to reset vehicle timeout$/;"	m	class:CommsNode	file:
srv_reset_timeout_	cola2_core/cola2_safety/src/watchdog_timer_node.cpp	/^  ros::ServiceServer srv_reset_timeout_;$/;"	m	class:WatchdogTimer	file:
srv_set_depth_sensor_offset_	cola2_core/cola2_nav/include/cola2_nav/ekf_base_ros.h	/^  ros::ServiceServer srv_set_depth_sensor_offset_;  \/\/!< compute the depth sensor offset$/;"	m	class:EKFBaseROS
srv_start_mission_	cola2_core/cola2_comms/src/comms_node.cpp	/^  ros::ServiceClient srv_start_mission_;  \/\/!< service to call mission start$/;"	m	class:CommsNode	file:
srvs	stonefish_ros/include/stonefish_ros/ROSSimulationManager.h	/^		std::map<std::string, ros::ServiceServer> srvs;$/;"	m	class:sf::ROSSimulationManager
sss	stonefish_ros/include/stonefish_ros/ROSSimulationManager.h	/^		SSS* sss;$/;"	m	class:sf::SSSService
sssCallback	cola2_core/cola2_safety/src/safety_supervisor_checker_node.cpp	/^SafetySupervisorChecker::sssCallback(const cola2_msgs::SafetySupervisorStatus&)$/;"	f	class:SafetySupervisorChecker
stamp_	cola2_core/cola2_control/include/cola2_control/low_level_controllers/request.h	/^  double stamp_;$/;"	m	class:Request
start_time_	cola2_core/cola2_nav/include/cola2_nav/ekf_base_ros.h	/^  double start_time_;      \/\/!< start time of the filter$/;"	m	class:EKFBaseROS
state_	cola2_core/cola2_control/src/captain_node.cpp	/^  CaptainStates state_;$/;"	m	class:Captain	file:
state_	cola2_lib/include/cola2_lib/utils/thread_safe_flag.h	/^  bool state_;$/;"	m	class:cola2::utils::ThreadSafeFlag
status_code_	cola2_core/cola2_comms/src/comms_node.cpp	/^  uint32_t status_code_ = 0;                              \/\/!< status code received$/;"	m	class:CommsNode	file:
step_completed_	cola2_core/cola2_control/src/captain_node.cpp	/^  bool step_completed_;$/;"	m	class:Captain	file:
stop	cola2_lib/include/cola2_lib/utils/thread_pool.h	/^  bool stop;$/;"	m	class:ThreadPool
stopCallback	cola2_core/cola2_control/src/open_loop_node.cpp	/^OpenLoop::stopCallback(const ros::TimerEvent&)$/;"	f	class:OpenLoop
stopHandler	cola2_core/cola2_log/startup_processes/shutdown_logger_startup_process.cpp	/^void stopHandler(int)$/;"	f
stop_all	cola2_core/cola2_log/src/bag_recorder_node.py	/^    def stop_all(self):$/;"	m	class:LogBag
stop_timer_	cola2_core/cola2_control/src/open_loop_node.cpp	/^  ros::Timer stop_timer_;$/;"	m	class:OpenLoop	file:
store	cola2_core/cola2_comms/include/cppystruct/data_view.h	/^constexpr void store(data_view<char>& d, T v)$/;"	f	namespace:pystruct::data
store	cola2_core/cola2_comms/include/cppystruct/data_view.h	/^constexpr void store(data_view<char>& d, bool v)$/;"	f	namespace:pystruct::data::impl
store	cola2_core/cola2_comms/include/cppystruct/data_view.h	/^constexpr void store(data_view<char>& d, int16_t v)$/;"	f	namespace:pystruct::data::impl
store	cola2_core/cola2_comms/include/cppystruct/data_view.h	/^constexpr void store(data_view<char>& d, int32_t v)$/;"	f	namespace:pystruct::data::impl
store	cola2_core/cola2_comms/include/cppystruct/data_view.h	/^constexpr void store(data_view<char>& d, int64_t v)$/;"	f	namespace:pystruct::data::impl
store	cola2_core/cola2_comms/include/cppystruct/data_view.h	/^constexpr void store(data_view<char>& d, int8_t v)$/;"	f	namespace:pystruct::data::impl
store	cola2_core/cola2_comms/include/cppystruct/data_view.h	/^constexpr void store(data_view<char>& d, std::string_view str)$/;"	f	namespace:pystruct::data::impl
store	cola2_core/cola2_comms/include/cppystruct/data_view.h	/^constexpr void store(data_view<char>& d, uint16_t v)$/;"	f	namespace:pystruct::data::impl
store	cola2_core/cola2_comms/include/cppystruct/data_view.h	/^constexpr void store(data_view<char>& d, uint32_t v)$/;"	f	namespace:pystruct::data::impl
store	cola2_core/cola2_comms/include/cppystruct/data_view.h	/^constexpr void store(data_view<char>& d, uint64_t v)$/;"	f	namespace:pystruct::data::impl
store	cola2_core/cola2_comms/include/cppystruct/data_view.h	/^constexpr void store(data_view<char>& d, uint8_t v)$/;"	f	namespace:pystruct::data::impl
store	cola2_core/cola2_comms/include/cppystruct/data_view.h	/^inline void store(data_view<char>& d, double v)$/;"	f	namespace:pystruct::data::impl
store	cola2_core/cola2_comms/include/cppystruct/data_view.h	/^inline void store(data_view<char>& d, float f)$/;"	f	namespace:pystruct::data::impl
stringToBool	cola2_core/cola2_safety/src/cola2_safety/safety_rules/common.cpp	/^SafetyRuleBaseClass::stringToBool(const std::string& data)$/;"	f	class:SafetyRules::SafetyRuleBaseClass
sub_altitude_	cola2_core/cola2_nav/src/navigator_node.cpp	/^  ros::Subscriber sub_altitude_;        \/\/ altitude from seafloor$/;"	m	class:NavigatorNode	file:
sub_altitude_	cola2_core/cola2_nav/src/navigator_surface_node.cpp	/^  ros::Subscriber sub_altitude_;        \/\/ altitude from seafloor$/;"	m	class:NavigatorSurfaceNode	file:
sub_bf_req_	cola2_core/cola2_control/include/cola2_control/ros_controller/auv_ros_controller_base.h	/^  ros::Subscriber sub_bf_req_;$/;"	m	class:IAUVROSController
sub_bv_req_	cola2_core/cola2_control/include/cola2_control/ros_controller/auv_ros_controller_base.h	/^  ros::Subscriber sub_bv_req_;$/;"	m	class:IAUVROSController
sub_captain_	cola2_core/cola2_safety/include/cola2_safety/safety_rules/captain.h	/^  ros::Subscriber sub_captain_;$/;"	m	class:SafetyRules::Captain
sub_captain_	cola2_core/cola2_safety/include/cola2_safety/safety_rules/teleoperation.h	/^  ros::Subscriber sub_captain_;$/;"	m	class:SafetyRules::Teleoperation
sub_captain_	cola2_core/cola2_safety/src/safety_supervisor_node.cpp	/^  ros::Subscriber sub_diag_, sub_captain_;$/;"	m	class:SafetySupervisor	file:
sub_current_	cola2_core/cola2_sim/src/dynamics_node.cpp	/^  ros::Subscriber sub_force_, sub_thrusters_, sub_fins_, sub_current_, sub_pose_overwrite_;$/;"	m	class:Dynamics	file:
sub_custom_input_	cola2_core/cola2_comms/src/comms_node.cpp	/^  ros::Subscriber sub_custom_input_;   \/\/!< binarized user specific input$/;"	m	class:CommsNode	file:
sub_diag_	cola2_core/cola2_safety/src/safety_supervisor_node.cpp	/^  ros::Subscriber sub_diag_, sub_captain_;$/;"	m	class:SafetySupervisor	file:
sub_dvl_	cola2_core/cola2_nav/src/navigator_node.cpp	/^  ros::Subscriber sub_dvl_;             \/\/ [vx vy vz]$/;"	m	class:NavigatorNode	file:
sub_dvl_	cola2_core/cola2_nav/src/navigator_surface_node.cpp	/^  ros::Subscriber sub_dvl_;             \/\/ [vx vy vz]$/;"	m	class:NavigatorSurfaceNode	file:
sub_dvl_fallback_	cola2_core/cola2_nav/src/navigator_node.cpp	/^  ros::Subscriber sub_dvl_fallback_;    \/\/ [vx vy vz]$/;"	m	class:NavigatorNode	file:
sub_elapsed_time_	cola2_core/cola2_comms/src/comms_node.cpp	/^  ros::Subscriber sub_elapsed_time_;   \/\/!< watchdog elapsed time$/;"	m	class:CommsNode	file:
sub_fins_	cola2_core/cola2_sim/src/dynamics_node.cpp	/^  ros::Subscriber sub_force_, sub_thrusters_, sub_fins_, sub_current_, sub_pose_overwrite_;$/;"	m	class:Dynamics	file:
sub_force_	cola2_core/cola2_sim/src/dynamics_node.cpp	/^  ros::Subscriber sub_force_, sub_thrusters_, sub_fins_, sub_current_, sub_pose_overwrite_;$/;"	m	class:Dynamics	file:
sub_from_modem_	cola2_core/cola2_comms/src/comms_node.cpp	/^  ros::Subscriber sub_from_modem_;     \/\/!< data received by the modem$/;"	m	class:CommsNode	file:
sub_gps_	cola2_core/cola2_nav/src/navigator_node.cpp	/^  ros::Subscriber sub_gps_;             \/\/ [x y]$/;"	m	class:NavigatorNode	file:
sub_gps_	cola2_core/cola2_nav/src/navigator_surface_node.cpp	/^  ros::Subscriber sub_gps_;             \/\/ [x y]$/;"	m	class:NavigatorSurfaceNode	file:
sub_imu_	cola2_core/cola2_nav/src/navigator_node.cpp	/^  ros::Subscriber sub_imu_;             \/\/ [roll pitch yaw vroll vpitch vyaw]$/;"	m	class:NavigatorNode	file:
sub_imu_	cola2_core/cola2_nav/src/navigator_surface_node.cpp	/^  ros::Subscriber sub_imu_;             \/\/ [roll pitch yaw vroll vpitch vyaw]$/;"	m	class:NavigatorSurfaceNode	file:
sub_joy_	cola2_core/cola2_control/src/open_loop_node.cpp	/^  ros::Subscriber sub_joy_;$/;"	m	class:OpenLoop	file:
sub_nav_	cola2_core/cola2_control/src/captain_node.cpp	/^  ros::Subscriber sub_nav_;$/;"	m	class:Captain	file:
sub_nav_	cola2_core/cola2_control/src/pilot_node.cpp	/^  ros::Subscriber sub_nav_;$/;"	m	class:Pilot	file:
sub_nav_	cola2_core/cola2_safety/include/cola2_safety/safety_rules/navigator.h	/^  ros::Subscriber sub_nav_, sub_wwr_;$/;"	m	class:SafetyRules::Navigator
sub_nav_	cola2_core/cola2_safety/src/safe_depth_altitude_node.cpp	/^  ros::Subscriber sub_nav_;$/;"	m	class:SafeDepthAltitude	file:
sub_nav_	cola2_core/cola2_safety/src/virtual_cage_node.cpp	/^  ros::Subscriber sub_nav_;$/;"	m	class:VirtualCage	file:
sub_nav_data_	cola2_core/cola2_control/include/cola2_control/ros_controller/auv_ros_controller_base.h	/^  ros::Subscriber sub_nav_data_;$/;"	m	class:IAUVROSController
sub_navigation_	cola2_core/cola2_comms/src/comms_node.cpp	/^  ros::Subscriber sub_navigation_;     \/\/!< vehicle navigation$/;"	m	class:CommsNode	file:
sub_pose_overwrite_	cola2_core/cola2_sim/src/dynamics_node.cpp	/^  ros::Subscriber sub_force_, sub_thrusters_, sub_fins_, sub_current_, sub_pose_overwrite_;$/;"	m	class:Dynamics	file:
sub_pressure_	cola2_core/cola2_nav/src/navigator_node.cpp	/^  ros::Subscriber sub_pressure_;        \/\/ [z]$/;"	m	class:NavigatorNode	file:
sub_safety_status_	cola2_core/cola2_comms/src/comms_node.cpp	/^  ros::Subscriber sub_safety_status_;  \/\/!< current safety status to get status code$/;"	m	class:CommsNode	file:
sub_sound_velocity_	cola2_core/cola2_nav/src/navigator_node.cpp	/^  ros::Subscriber sub_sound_velocity_;  \/\/ sound velocity from SVS$/;"	m	class:NavigatorNode	file:
sub_sound_velocity_	cola2_core/cola2_nav/src/navigator_surface_node.cpp	/^  ros::Subscriber sub_sound_velocity_;  \/\/ sound velocity from SVS$/;"	m	class:NavigatorSurfaceNode	file:
sub_sss_	cola2_core/cola2_safety/src/safety_supervisor_checker_node.cpp	/^  ros::Subscriber sub_sss_;$/;"	m	class:SafetySupervisorChecker	file:
sub_thrusters_	cola2_core/cola2_sim/src/dynamics_node.cpp	/^  ros::Subscriber sub_force_, sub_thrusters_, sub_fins_, sub_current_, sub_pose_overwrite_;$/;"	m	class:Dynamics	file:
sub_usbl_	cola2_core/cola2_nav/src/navigator_node.cpp	/^  ros::Subscriber sub_usbl_;            \/\/ [x y]$/;"	m	class:NavigatorNode	file:
sub_ww_req_	cola2_core/cola2_control/include/cola2_control/ros_controller/auv_ros_controller_base.h	/^  ros::Subscriber sub_ww_req_;$/;"	m	class:IAUVROSController
sub_wwr_	cola2_core/cola2_safety/include/cola2_safety/safety_rules/navigator.h	/^  ros::Subscriber sub_nav_, sub_wwr_;$/;"	m	class:SafetyRules::Navigator
subs	stonefish_ros/include/stonefish_ros/ROSSimulationManager.h	/^		std::map<std::string, ros::Subscriber> subs;$/;"	m	class:sf::ROSSimulationManager
success	cola2_core/cola2_control/include/cola2_control/controllers/types.h	/^  bool success;$/;"	m	class:control::Feedback
surface2depth_sensor_distance_	cola2_core/cola2_nav/include/cola2_nav/ekf_base_ros.h	/^    double surface2depth_sensor_distance_;  \/\/!< distance from depth sensor to water surface$/;"	m	struct:EKFBaseROS::Config
surge_velocity	cola2_core/cola2_control/include/cola2_control/controllers/types.h	/^  double surge_velocity;$/;"	m	class:control::Request
surge_velocity_	cola2_lib/include/cola2_lib/mission/mission_goto.h	/^  double surge_velocity_;     \/\/!< Velocity in surge in m\/s.$/;"	m	class:MissionGoto
surge_velocity_	cola2_lib/include/cola2_lib/mission/mission_park.h	/^  double surge_velocity_;     \/\/!< Velocity in surge in m\/s.$/;"	m	class:MissionPark
surge_velocity_	cola2_lib/include/cola2_lib/mission/mission_section.h	/^  double surge_velocity_;     \/\/!< Velocity in surge in m\/s.$/;"	m	class:MissionSection
t_heave_	cola2_core/cola2_control/include/cola2_control/low_level_controllers/only_thrusters_controller.h	/^  std::shared_ptr<PID> t_heave_;$/;"	m	class:OnlyThrustersController
t_pitch_	cola2_core/cola2_control/include/cola2_control/low_level_controllers/only_thrusters_controller.h	/^  std::shared_ptr<PID> t_pitch_;$/;"	m	class:OnlyThrustersController
t_roll_	cola2_core/cola2_control/include/cola2_control/low_level_controllers/only_thrusters_controller.h	/^  std::shared_ptr<PID> t_roll_;$/;"	m	class:OnlyThrustersController
t_surge_	cola2_core/cola2_control/include/cola2_control/low_level_controllers/only_thrusters_controller.h	/^  std::shared_ptr<PID> t_surge_;$/;"	m	class:OnlyThrustersController
t_sway_	cola2_core/cola2_control/include/cola2_control/low_level_controllers/only_thrusters_controller.h	/^  std::shared_ptr<PID> t_sway_;$/;"	m	class:OnlyThrustersController
t_yaw_	cola2_core/cola2_control/include/cola2_control/low_level_controllers/only_thrusters_controller.h	/^  std::shared_ptr<PID> t_yaw_;$/;"	m	class:OnlyThrustersController
tasks	cola2_lib/include/cola2_lib/utils/thread_pool.h	/^  std::queue<std::function<void()> > tasks;$/;"	m	class:ThreadPool
tcm_inv_	cola2_core/cola2_control/include/cola2_control/low_level_controllers/only_thruster_allocator.h	/^  Eigen::MatrixXd tcm_inv_;$/;"	m	class:OnlyThrusterAllocator
td_	cola2_core/cola2_control/include/cola2_control/low_level_controllers/pid.h	/^  double td_;$/;"	m	class:PID
teleoperation_link_timeout_	cola2_core/cola2_safety/include/cola2_safety/safety_rules/teleoperation.h	/^  double teleoperation_link_timeout_;$/;"	m	class:SafetyRules::Teleoperation
temperature_	cola2_core/cola2_safety/include/cola2_safety/safety_rules/temperature.h	/^  double temperature_, max_temperature_;$/;"	m	class:SafetyRules::Temperature
templates_path	stonefish_ros/docs/conf.py	/^templates_path = ['_templates']$/;"	v
tensor	cola2_core/cola2_sim/src/dynamics_node.cpp	/^    Eigen::Matrix3d tensor;$/;"	m	struct:Dynamics::Config	file:
test	cola2_core/cola2_control/test/test_thrusters.py	/^    def test(self, req):$/;"	m	class:TestThrusters
test	cola2_lib/python/cola2/utils/angles.py	/^def test():$/;"	f
test	cola2_lib/python/cola2/utils/ned.py	/^def test():$/;"	f
test	cola2_lib/python/cola2/utils/saturate.py	/^def test():$/;"	f
test_load_xml	cola2_lib/python/cola2/mission/mission_types.py	/^def test_load_xml():$/;"	f
test_load_xml	cola2_lib/python/cola2/mission/mission_types_v1.py	/^def test_load_xml():$/;"	f
test_write_xml	cola2_lib/python/cola2/mission/mission_types.py	/^def test_write_xml():$/;"	f
test_write_xml	cola2_lib/python/cola2/mission/mission_types_v1.py	/^def test_write_xml():$/;"	f
texinfo_documents	stonefish_ros/docs/conf.py	/^texinfo_documents = [$/;"	v
tfTransformToEigen	cola2_lib_ros/src/cola2_lib_ros/transform_handler.cpp	/^Eigen::Isometry3d cola2::ros::TransformHandler::tfTransformToEigen(const geometry_msgs::TransformStamped& trans) const$/;"	f	class:cola2::ros::TransformHandler
tf_broadcast_	cola2_core/cola2_nav/include/cola2_nav/ekf_base_ros.h	/^  tf::TransformBroadcaster tf_broadcast_;    \/\/!< to publish world->vehicle$/;"	m	class:EKFBaseROS
tf_broadcaster_	cola2_core/cola2_sim/src/dynamics_node.cpp	/^  tf2_ros::TransformBroadcaster tf_broadcaster_;$/;"	m	class:Dynamics	file:
tf_buffer_	cola2_lib_ros/include/cola2_lib_ros/transform_handler.h	/^  tf2_ros::Buffer tf_buffer_;               \/\/!< transform buffer.$/;"	m	class:cola2::ros::TransformHandler
tf_handler_	cola2_core/cola2_nav/include/cola2_nav/ekf_base_ros.h	/^  cola2::ros::TransformHandler tf_handler_;  \/\/!< provide tfs$/;"	m	class:EKFBaseROS
tf_listener_	cola2_lib_ros/include/cola2_lib_ros/transform_handler.h	/^  tf2_ros::TransformListener tf_listener_;  \/\/!< transform listener.$/;"	m	class:cola2::ros::TransformHandler
thread_ptr_	cola2_lib/include/cola2_lib/io/udp_socket.h	/^  boost::shared_ptr<boost::thread> thread_ptr_;  \/\/!< Thread for the Server::run method.$/;"	m	class:cola2::io::udp_socket::Server
thrusterSetpoints	stonefish_ros/include/stonefish_ros/ROSSimulationManager.h	/^		std::vector<Scalar> thrusterSetpoints;$/;"	m	struct:sf::ROSRobot
thruster_allocator_	cola2_core/cola2_control/include/cola2_control/low_level_controllers/only_thrusters_controller.h	/^  OnlyThrusterAllocator thruster_allocator_;$/;"	m	class:OnlyThrustersController
thruster_allocator_ptr_	cola2_core/cola2_control/src/open_loop_node.cpp	/^  std::shared_ptr<ThrusterAllocatorWrapper> thruster_allocator_ptr_;$/;"	m	class:OpenLoop	file:
thruster_setpoints_	cola2_core/cola2_control/include/cola2_control/low_level_controllers/auv_controller_base.h	/^  Eigen::VectorXd thruster_setpoints_;$/;"	m	class:IAUVController
thrustersCallback	cola2_core/cola2_sim/src/dynamics_node.cpp	/^void Dynamics::thrustersCallback(const cola2_msgs::Setpoints& msg)$/;"	f	class:Dynamics
thrusters_diag_	cola2_core/cola2_sim/src/dynamics_node.cpp	/^  cola2::ros::DiagnosticHelper thrusters_diag_;$/;"	m	class:Dynamics	file:
thrusters_limiter	cola2_core/cola2_sim/src/dynamics_node.cpp	/^    std::vector<double> thrusters_limiter;$/;"	m	struct:Dynamics::Config	file:
thrusters_matrix	cola2_core/cola2_sim/src/dynamics_node.cpp	/^    Eigen::MatrixXd thrusters_matrix;$/;"	m	struct:Dynamics::Config	file:
thrusters_max_force_negative	cola2_core/cola2_sim/src/dynamics_node.cpp	/^    std::vector<double> thrusters_max_force_positive, thrusters_max_force_negative;$/;"	m	struct:Dynamics::Config	file:
thrusters_max_force_positive	cola2_core/cola2_sim/src/dynamics_node.cpp	/^    std::vector<double> thrusters_max_force_positive, thrusters_max_force_negative;$/;"	m	struct:Dynamics::Config	file:
thrusters_max_step	cola2_core/cola2_sim/src/dynamics_node.cpp	/^    double thrusters_max_step;$/;"	m	struct:Dynamics::Config	file:
thrusters_num	cola2_core/cola2_sim/src/dynamics_node.cpp	/^    std::size_t thrusters_num;$/;"	m	struct:Dynamics::Config	file:
thrusters_poly_negative	cola2_core/cola2_sim/src/dynamics_node.cpp	/^    std::vector<Poly> thrusters_poly_positive, thrusters_poly_negative;$/;"	m	struct:Dynamics::Config	file:
thrusters_poly_positive	cola2_core/cola2_sim/src/dynamics_node.cpp	/^    std::vector<Poly> thrusters_poly_positive, thrusters_poly_negative;$/;"	m	struct:Dynamics::Config	file:
thrusters_symmetric	cola2_core/cola2_sim/src/dynamics_node.cpp	/^    bool thrusters_symmetric;$/;"	m	struct:Dynamics::Config	file:
thrusters_tau	cola2_core/cola2_sim/src/dynamics_node.cpp	/^    double thrusters_tau;$/;"	m	struct:Dynamics::Config	file:
ti_	cola2_core/cola2_control/include/cola2_control/low_level_controllers/pid.h	/^  double ti_;$/;"	m	class:PID
time	cola2_core/cola2_nav/include/cola2_nav/ekf_base_ros.h	/^    double time;$/;"	m	struct:EKFBaseROS::StampedPosition
time_	cola2_lib/include/cola2_lib/mission/mission_park.h	/^  double time_;               \/\/!< Park duration in seconds.$/;"	m	class:MissionPark
time_old_	cola2_core/cola2_control/include/cola2_control/low_level_controllers/pid.h	/^  double time_old_;$/;"	m	class:PID
timedBlockingWaitFor	cola2_lib/src/cola2_lib/utils/thread_safe_flag.cpp	/^void ThreadSafeFlag::timedBlockingWaitFor(const bool desired_state, const double timeout_sec)$/;"	f	class:cola2::utils::ThreadSafeFlag
timedReadHandler	cola2_lib/src/cola2_lib/io/serial_port.cpp	/^void SerialPort::timedReadHandler(boost::optional<boost::system::error_code>* a, const boost::system::error_code& b)$/;"	f	class:cola2::io::SerialPort
timedReadHandler	cola2_lib/src/cola2_lib/io/tcp_socket.cpp	/^void TcpSocket::timedReadHandler(boost::optional<boost::system::error_code>* a, const boost::system::error_code& b)$/;"	f	class:cola2::io::TcpSocket
timeout	cola2_core/cola2_control/include/cola2_control/controllers/types.h	/^  double timeout;$/;"	m	class:control::Request
timeout_	cola2_core/cola2_safety/include/cola2_safety/safety_rules/watchdog_timer.h	/^  double elapsed_time_, timeout_;$/;"	m	class:SafetyRules::WatchdogTimer
timerCallback	cola2_core/cola2_control/src/cola2_control/ros_controller/auv_ros_controller.cpp	/^void IAUVROSController::timerCallback(const ros::TimerEvent& event)$/;"	f	class:IAUVROSController
timer_	cola2_core/cola2_comms/src/comms_node.cpp	/^  ros::Timer timer_;  \/\/!< timer to send messages to modem$/;"	m	class:CommsNode	file:
timer_	cola2_core/cola2_control/include/cola2_control/ros_controller/auv_ros_controller_base.h	/^  ros::Timer timer_;$/;"	m	class:IAUVROSController
timer_	cola2_core/cola2_nav/include/cola2_nav/ekf_base_ros.h	/^  ros::Timer timer_;       \/\/!< loop to keep checking diagnostics$/;"	m	class:EKFBaseROS
timer_check_actuators_	cola2_core/cola2_sim/src/dynamics_node.cpp	/^  ros::Timer timer_check_actuators_;$/;"	m	class:Dynamics	file:
timer_pub_bat_	cola2_core/cola2_sim/src/sim_internal_sensors_node.cpp	/^  ros::Timer timer_pub_pc_, timer_pub_bat_, timer_pub_bat_s_;$/;"	m	class:SimInternalSensors	file:
timer_pub_bat_s_	cola2_core/cola2_sim/src/sim_internal_sensors_node.cpp	/^  ros::Timer timer_pub_pc_, timer_pub_bat_, timer_pub_bat_s_;$/;"	m	class:SimInternalSensors	file:
timer_pub_pc_	cola2_core/cola2_sim/src/sim_internal_sensors_node.cpp	/^  ros::Timer timer_pub_pc_, timer_pub_bat_, timer_pub_bat_s_;$/;"	m	class:SimInternalSensors	file:
toHex	cola2_lib/python/cola2/io/nmea_parser.py	/^    def toHex(self, num, lenght):$/;"	m	class:NMEAParser
toHex	cola2_lib/src/cola2_lib/io/nmea_parser.cpp	/^std::string NMEAParser::toHex(uint64_t num, int len) const$/;"	f	class:NMEAParser
todo_include_todos	cola2_lib/doc/conf.py	/^todo_include_todos = False$/;"	v
todo_include_todos	cola2_lib_ros/doc/conf.py	/^todo_include_todos = False$/;"	v
tolerance_xy	cola2_core/cola2_control/include/cola2_control/controllers/types.h	/^  double tolerance_xy;$/;"	m	class:control::Request
tolerance_xy_	cola2_lib/include/cola2_lib/mission/mission_goto.h	/^  double tolerance_xy_;       \/\/!< Final position tolerance in meters.$/;"	m	class:MissionGoto
tolerance_xy_	cola2_lib/include/cola2_lib/mission/mission_section.h	/^  double tolerance_xy_;       \/\/!< Final position tolerance in meters.$/;"	m	class:MissionSection
tolerance_z	cola2_core/cola2_control/include/cola2_control/controllers/section.h	/^  double tolerance_z;$/;"	m	struct:__anon6
tp_heave_	cola2_core/cola2_control/include/cola2_control/low_level_controllers/only_thrusters_controller.h	/^  std::shared_ptr<Poly> tp_heave_;$/;"	m	class:OnlyThrustersController
tp_pitch_	cola2_core/cola2_control/include/cola2_control/low_level_controllers/only_thrusters_controller.h	/^  std::shared_ptr<Poly> tp_pitch_;$/;"	m	class:OnlyThrustersController
tp_roll_	cola2_core/cola2_control/include/cola2_control/low_level_controllers/only_thrusters_controller.h	/^  std::shared_ptr<Poly> tp_roll_;$/;"	m	class:OnlyThrustersController
tp_surge_	cola2_core/cola2_control/include/cola2_control/low_level_controllers/only_thrusters_controller.h	/^  std::shared_ptr<Poly> tp_surge_;$/;"	m	class:OnlyThrustersController
tp_sway_	cola2_core/cola2_control/include/cola2_control/low_level_controllers/only_thrusters_controller.h	/^  std::shared_ptr<Poly> tp_sway_;$/;"	m	class:OnlyThrustersController
tp_yaw_	cola2_core/cola2_control/include/cola2_control/low_level_controllers/only_thrusters_controller.h	/^  std::shared_ptr<Poly> tp_yaw_;$/;"	m	class:OnlyThrustersController
tr	stonefish_ros/include/stonefish_ros/ROSSimulationManager.h	/^		ManualTrajectory* tr;$/;"	m	class:sf::TrajectoryCallback
transform_from_tf	cola2_core/cola2_sim/src/sim_auv_nav_sensors_node.py	/^def transform_from_tf(xyz, rpy):$/;"	f
transforms	cola2_core/cola2_nav/include/cola2_nav/transformations.h	/^namespace transforms$/;"	n
transforms	cola2_core/cola2_nav/src/cola2_nav/transformations.cpp	/^namespace transforms$/;"	n	file:
transforms_	cola2_lib_ros/include/cola2_lib_ros/transform_handler.h	/^  MapString2Isometry3d transforms_;         \/\/!< transforms from the robot to the sensors.$/;"	m	class:cola2::ros::TransformHandler
twist_controller_	cola2_core/cola2_control/include/cola2_control/low_level_controllers/only_thrusters_controller.h	/^  NDofController twist_controller_;$/;"	m	class:OnlyThrustersController
twist_feedback_	cola2_core/cola2_control/include/cola2_control/low_level_controllers/auv_controller_base.h	/^  std::vector<double> twist_feedback_;$/;"	m	class:IAUVController
twist_merge_	cola2_core/cola2_control/include/cola2_control/low_level_controllers/auv_controller_base.h	/^  Merge twist_merge_;$/;"	m	class:IAUVController
twist_poly_controller_	cola2_core/cola2_control/include/cola2_control/low_level_controllers/only_thrusters_controller.h	/^  NDofController twist_poly_controller_;$/;"	m	class:OnlyThrustersController
type_	cola2_core/cola2_control/include/cola2_control/low_level_controllers/merge.h	/^  std::string type_;$/;"	m	class:Merge
u_	cola2_core/cola2_sim/src/dynamics_node.cpp	/^  Eigen::VectorXd u_, old_u_;$/;"	m	class:Dynamics	file:
udp_socket	cola2_lib/include/cola2_lib/io/udp_socket.h	/^namespace udp_socket$/;"	n	namespace:cola2::io
udp_socket	cola2_lib/src/cola2_lib/io/udp_socket.cpp	/^namespace udp_socket$/;"	n	namespace:cola2::io	file:
unpack	cola2_core/cola2_comms/include/cppystruct/unpack.h	/^constexpr auto internal::unpack(std::index_sequence<Items...>, Input&& packedInput)$/;"	f	class:pystruct::internal
unpack	cola2_core/cola2_comms/include/cppystruct/unpack.h	/^constexpr auto unpack(Fmt, Input&& packedInput)$/;"	f	namespace:pystruct
unpackElement	cola2_core/cola2_comms/include/cppystruct/unpack.h	/^constexpr auto unpackElement(const char* begin, size_t size, bool bigEndian)$/;"	f	namespace:pystruct
unsinged_integer	cola2_core/cola2_comms/include/cppystruct/data_view.h	/^struct unsinged_integer<1>$/;"	s	namespace:pystruct::data::impl
unsinged_integer	cola2_core/cola2_comms/include/cppystruct/data_view.h	/^struct unsinged_integer<2>$/;"	s	namespace:pystruct::data::impl
unsinged_integer	cola2_core/cola2_comms/include/cppystruct/data_view.h	/^struct unsinged_integer<4>$/;"	s	namespace:pystruct::data::impl
unsinged_integer	cola2_core/cola2_comms/include/cppystruct/data_view.h	/^struct unsinged_integer<8>$/;"	s	namespace:pystruct::data::impl
update	cola2_lib/src/cola2_lib/io/udp_socket.cpp	/^Server& Server::update(const std::string& newmessage)$/;"	f	class:cola2::io::udp_socket::Server
updateAltitudeMsg	cola2_core/cola2_nav/src/cola2_nav/ekf_base_ros.cpp	/^void EKFBaseROS::updateAltitudeMsg(const sensor_msgs::Range& msg)$/;"	f	class:EKFBaseROS
updateBFR	cola2_core/cola2_control/src/cola2_control/ros_controller/auv_ros_controller.cpp	/^void IAUVROSController::updateBFR(const ros::MessageEvent<cola2_msgs::BodyForceReq const>& msg)$/;"	f	class:IAUVROSController
updateBVR	cola2_core/cola2_control/src/cola2_control/ros_controller/auv_ros_controller.cpp	/^void IAUVROSController::updateBVR(const ros::MessageEvent<cola2_msgs::BodyVelocityReq const>& msg)$/;"	f	class:IAUVROSController
updateIMUMsg	cola2_core/cola2_nav/src/cola2_nav/ekf_base_ros.cpp	/^void EKFBaseROS::updateIMUMsg(const sensor_msgs::Imu& msg)$/;"	f	class:EKFBaseROS
updateNav	cola2_core/cola2_control/src/captain_node.cpp	/^void Captain::updateNav(const cola2_msgs::NavSts& nav_msg)$/;"	f	class:Captain
updateNav	cola2_core/cola2_control/src/cola2_control/ros_controller/auv_ros_controller.cpp	/^void IAUVROSController::updateNav(const ros::MessageEvent<cola2_msgs::NavSts const>& msg)$/;"	f	class:IAUVROSController
updateNoAltitudeGoesUp	cola2_core/cola2_control/src/captain_node.cpp	/^Captain::updateNoAltitudeGoesUp(const bool no_altitude_goes_up, const double wait_time)$/;"	f	class:Captain
updateNoAltitudeGoesUpIdle	cola2_core/cola2_control/src/captain_node.cpp	/^Captain::updateNoAltitudeGoesUpIdle(const double wait_time)$/;"	f	class:Captain
updateOrientation	cola2_core/cola2_nav/src/cola2_nav/ekf_position_velocity.cpp	/^bool EKFPositionVelocity::updateOrientation(const double t, const Eigen::Vector3d& rpy, const Eigen::Matrix3d& cov)$/;"	f	class:EKFPositionVelocity
updateOrientation	cola2_core/cola2_nav/src/cola2_nav/ekf_surface_2d.cpp	/^bool EKFSurface2D::updateOrientation(const double t, const Eigen::Vector3d& rpy, const Eigen::Matrix3d& cov)$/;"	f	class:EKFSurface2D
updateOrientationRate	cola2_core/cola2_nav/src/cola2_nav/ekf_position_velocity.cpp	/^bool EKFPositionVelocity::updateOrientationRate(const double, const Eigen::Vector3d& rate, const Eigen::Matrix3d& cov)$/;"	f	class:EKFPositionVelocity
updateOrientationRate	cola2_core/cola2_nav/src/cola2_nav/ekf_surface_2d.cpp	/^bool EKFSurface2D::updateOrientationRate(const double t, const Eigen::Vector3d& rate, const Eigen::Matrix3d& cov)$/;"	f	class:EKFSurface2D
updateParseList	cola2_core/cola2_safety/src/cola2_safety/safety_rules/check_enabled.cpp	/^CheckEnabled::updateParseList()$/;"	f	class:SafetyRules::CheckEnabled
updateParseList	cola2_core/cola2_safety/src/cola2_safety/safety_rules/combined_water_inside.cpp	/^CombinedWaterInside::updateParseList()$/;"	f	class:SafetyRules::CombinedWaterInside
updateParseList	cola2_core/cola2_safety/src/cola2_safety/safety_rules/temperature.cpp	/^Temperature::updateParseList()$/;"	f	class:SafetyRules::Temperature
updatePoseFeedback	cola2_core/cola2_control/src/cola2_control/low_level_controllers/auv_controller_base.cpp	/^void IAUVController::updatePoseFeedback(std::vector<double> feedback)$/;"	f	class:IAUVController
updatePoseRequest	cola2_core/cola2_control/src/cola2_control/low_level_controllers/auv_controller_base.cpp	/^void IAUVController::updatePoseRequest(Request req)$/;"	f	class:IAUVController
updatePositionDepthMsg	cola2_core/cola2_nav/src/cola2_nav/ekf_base_ros.cpp	/^void EKFBaseROS::updatePositionDepthMsg(const sensor_msgs::FluidPressure& msg)$/;"	f	class:EKFBaseROS
updatePositionGPSMsg	cola2_core/cola2_nav/src/cola2_nav/ekf_base_ros.cpp	/^void EKFBaseROS::updatePositionGPSMsg(const sensor_msgs::NavSatFix& msg)$/;"	f	class:EKFBaseROS
updatePositionGPSMsgImpl	cola2_core/cola2_nav/src/cola2_nav/ekf_base_ros.cpp	/^bool EKFBaseROS::updatePositionGPSMsgImpl(const sensor_msgs::NavSatFix& msg)$/;"	f	class:EKFBaseROS
updatePositionUSBLMsg	cola2_core/cola2_nav/src/cola2_nav/ekf_base_ros.cpp	/^void EKFBaseROS::updatePositionUSBLMsg(const geometry_msgs::PoseWithCovarianceStamped& msg)$/;"	f	class:EKFBaseROS
updatePositionUSBLMsgImpl	cola2_core/cola2_nav/src/cola2_nav/ekf_base_ros.cpp	/^bool EKFBaseROS::updatePositionUSBLMsgImpl(const geometry_msgs::PoseWithCovarianceStamped& msg)$/;"	f	class:EKFBaseROS
updatePositionXY	cola2_core/cola2_nav/src/cola2_nav/ekf_position_velocity.cpp	/^bool EKFPositionVelocity::updatePositionXY(const double, const Eigen::Vector2d& pose_xy, const Eigen::Matrix2d& cov)$/;"	f	class:EKFPositionVelocity
updatePositionXY	cola2_core/cola2_nav/src/cola2_nav/ekf_surface_2d.cpp	/^bool EKFSurface2D::updatePositionXY(const double t, const Eigen::Vector2d& pose_xy, const Eigen::Matrix2d& cov)$/;"	f	class:EKFSurface2D
updatePositionZ	cola2_core/cola2_nav/src/cola2_nav/ekf_position_velocity.cpp	/^bool EKFPositionVelocity::updatePositionZ(const double, const Eigen::Vector1d& pose_z, const Eigen::Matrix1d& cov)$/;"	f	class:EKFPositionVelocity
updatePositionZ	cola2_core/cola2_nav/src/cola2_nav/ekf_surface_2d.cpp	/^bool EKFSurface2D::updatePositionZ(const double, const Eigen::Vector1d&, const Eigen::Matrix1d&)$/;"	f	class:EKFSurface2D
updateSoundVelocityMsg	cola2_core/cola2_nav/src/cola2_nav/ekf_base_ros.cpp	/^void EKFBaseROS::updateSoundVelocityMsg(const cola2_msgs::Float32Stamped& msg)$/;"	f	class:EKFBaseROS
updateTwistFeedback	cola2_core/cola2_control/src/cola2_control/low_level_controllers/auv_controller_base.cpp	/^void IAUVController::updateTwistFeedback(std::vector<double> feedback)$/;"	f	class:IAUVController
updateTwistRequest	cola2_core/cola2_control/src/cola2_control/low_level_controllers/auv_controller_base.cpp	/^void IAUVController::updateTwistRequest(Request req)$/;"	f	class:IAUVController
updateVelocity	cola2_core/cola2_nav/src/cola2_nav/ekf_position_velocity.cpp	/^bool EKFPositionVelocity::updateVelocity(const double, const Eigen::Vector3d& vel, const Eigen::Matrix3d& cov,$/;"	f	class:EKFPositionVelocity
updateVelocity	cola2_core/cola2_nav/src/cola2_nav/ekf_surface_2d.cpp	/^bool EKFSurface2D::updateVelocity(const double t, const Eigen::Vector3d& vel, const Eigen::Matrix3d& cov,$/;"	f	class:EKFSurface2D
updateVelocityDVLFallbackMsg	cola2_core/cola2_nav/src/cola2_nav/ekf_base_ros.cpp	/^void EKFBaseROS::updateVelocityDVLFallbackMsg(const cola2_msgs::DVL& msg)$/;"	f	class:EKFBaseROS
updateVelocityDVLMsg	cola2_core/cola2_nav/src/cola2_nav/ekf_base_ros.cpp	/^void EKFBaseROS::updateVelocityDVLMsg(const cola2_msgs::DVL& msg)$/;"	f	class:EKFBaseROS
updateVelocityDVLMsgImpl	cola2_core/cola2_nav/src/cola2_nav/ekf_base_ros.cpp	/^void EKFBaseROS::updateVelocityDVLMsgImpl(const cola2_msgs::DVL& msg, const bool from_dvl)$/;"	f	class:EKFBaseROS
updateWWR	cola2_core/cola2_control/src/cola2_control/ros_controller/auv_ros_controller.cpp	/^void IAUVROSController::updateWWR(const ros::MessageEvent<cola2_msgs::WorldWaypointReq const>& msg)$/;"	f	class:IAUVROSController
updateWrenchRequest	cola2_core/cola2_control/src/cola2_control/low_level_controllers/auv_controller_base.cpp	/^void IAUVController::updateWrenchRequest(Request req)$/;"	f	class:IAUVController
update_ack	cola2_core/cola2_control/src/cola2_control/joystickbase.py	/^    def update_ack(self, ack):$/;"	m	class:JoystickBase
update_altitude	cola2_core/cola2_sim/src/sim_auv_nav_sensors_node.py	/^    def update_altitude(self, msg):$/;"	m	class:SimAUVNavSensors
update_battery_time_	cola2_core/cola2_sim/src/sim_internal_sensors_node.cpp	/^  const double update_battery_time_;$/;"	m	class:SimInternalSensors	file:
update_joy	cola2_core/cola2_control/src/cola2_control/joystickbase.py	/^    def update_joy(self, joy):$/;"	m	class:JoystickBase
update_joy	cola2_core/cola2_control/src/keyboard_to_teleoperation_node.py	/^    def update_joy(self, joy):$/;"	m	class:KeyboardToTeleoperation
update_joy	cola2_core/cola2_control/src/logitech_fx10_to_teleoperation_node.py	/^    def update_joy(self, joy):$/;"	m	class:LogitechFX10
update_odometry	cola2_core/cola2_sim/src/sim_auv_nav_sensors_node.py	/^    def update_odometry(self, msg):$/;"	m	class:SimAUVNavSensors
update_param_in_yaml	cola2_core/cola2_log/src/default_param_handler_node.py	/^    def update_param_in_yaml(self, req):$/;"	m	class:DefaultParamHandler
update_params_in_yamls	cola2_core/cola2_log/src/default_param_handler_node.py	/^    def update_params_in_yamls(self, req):$/;"	m	class:DefaultParamHandler
update_step	cola2_lib/python/cola2/mission/mission_types.py	/^    def update_step(self, step_id, step):$/;"	m	class:Mission
update_step	cola2_lib/python/cola2/mission/mission_types_v1.py	/^    def update_step(self, step_id, step):$/;"	m	class:Mission
usbl_safe_always_on	cola2_core/cola2_comms/src/comms_node.cpp	/^    bool usbl_safe_always_on;     \/\/!< check that vehicle continuously receives modem messages$/;"	m	struct:CommsNode::Config	file:
use_depth_data_	cola2_core/cola2_nav/include/cola2_nav/ekf_base_ros.h	/^    bool use_depth_data_;              \/\/!< use depth measurements in the filter$/;"	m	struct:EKFBaseROS::Config
use_dvl_data_	cola2_core/cola2_nav/include/cola2_nav/ekf_base_ros.h	/^    bool use_dvl_data_;                \/\/!< use DVL measurements in the filter$/;"	m	struct:EKFBaseROS::Config
use_force_topic	cola2_core/cola2_sim/src/dynamics_node.cpp	/^    bool use_force_topic;$/;"	m	struct:Dynamics::Config	file:
use_gps_data_	cola2_core/cola2_nav/include/cola2_nav/ekf_base_ros.h	/^    bool use_gps_data_;                \/\/!< use GPS mesurements in the filter$/;"	m	struct:EKFBaseROS::Config
use_usbl_data_	cola2_core/cola2_nav/include/cola2_nav/ekf_base_ros.h	/^    bool use_usbl_data_;               \/\/!< use USBL measurements in the filter$/;"	m	struct:EKFBaseROS::Config
use_yaw_	cola2_lib/include/cola2_lib/mission/mission_park.h	/^  bool use_yaw_;              \/\/!< Use yaw during park.$/;"	m	class:MissionPark
utils	cola2_lib/include/cola2_lib/utils/angles.h	/^namespace utils$/;"	n	namespace:cola2
utils	cola2_lib/include/cola2_lib/utils/filesystem.h	/^namespace utils$/;"	n	namespace:cola2
utils	cola2_lib/include/cola2_lib/utils/ned.h	/^namespace utils$/;"	n	namespace:cola2
utils	cola2_lib/include/cola2_lib/utils/pressure.h	/^namespace utils$/;"	n	namespace:cola2
utils	cola2_lib/include/cola2_lib/utils/saturate.h	/^namespace utils$/;"	n	namespace:cola2
utils	cola2_lib/include/cola2_lib/utils/thread_safe_flag.h	/^namespace utils$/;"	n	namespace:cola2
utils	cola2_lib/src/cola2_lib/utils/angles.cpp	/^namespace utils$/;"	n	namespace:cola2	file:
utils	cola2_lib/src/cola2_lib/utils/ned.cpp	/^namespace utils$/;"	n	namespace:cola2	file:
utils	cola2_lib/src/cola2_lib/utils/thread_safe_flag.cpp	/^namespace utils$/;"	n	namespace:cola2	file:
v0	cola2_core/cola2_sim/src/dynamics_node.cpp	/^    Eigen::Vector6d v0;$/;"	m	struct:Dynamics::Config	file:
v_	cola2_core/cola2_sim/src/dynamics_node.cpp	/^  Eigen::Vector6d v_, v_dot_;$/;"	m	class:Dynamics	file:
v_dot_	cola2_core/cola2_sim/src/dynamics_node.cpp	/^  Eigen::Vector6d v_, v_dot_;$/;"	m	class:Dynamics	file:
valid_	cola2_lib/include/cola2_lib/io/nmea_parser.h	/^  bool valid_;                       \/\/!< Flag to mark if parsed stream is valid according to its checksum field$/;"	m	class:NMEAParser
values_	cola2_core/cola2_control/include/cola2_control/low_level_controllers/request.h	/^  std::vector<double> values_;$/;"	m	class:Request
vehicle_config_launch_mission_package	cola2_core/cola2_control/src/captain_node.cpp	/^    std::string vehicle_config_launch_mission_package;$/;"	m	struct:Captain::__anon3	file:
velocity	cola2_core/cola2_control/include/cola2_control/controllers/types.h	/^  control::Velocity velocity;$/;"	m	struct:control::State
version	cola2_lib/doc/conf.py	/^version = f'{now.year:04d}{now.month:02d}'$/;"	v
version	cola2_lib_ros/doc/conf.py	/^version = '{:04d}{:02d}'.format(now.year, now.month)$/;"	v
version	stonefish_ros/docs/conf.py	/^version = u'1.3'$/;"	v
vf	stonefish_ros/include/stonefish_ros/ROSSimulationManager.h	/^		Jet* vf;$/;"	m	class:sf::JetVFCallback
vf	stonefish_ros/include/stonefish_ros/ROSSimulationManager.h	/^		Uniform* vf;$/;"	m	class:sf::UniformVFCallback
voltage_	cola2_core/cola2_safety/include/cola2_safety/safety_rules/battery_level.h	/^  double charge_, voltage_, min_charge_, min_voltage_;$/;"	m	class:SafetyRules::BatteryLevel
waitActionlib	cola2_core/cola2_control/src/captain_node.cpp	/^void Captain::waitActionlib(actionlib::SimpleActionClient<T>& actionlib, const std::string& name)$/;"	f	class:Captain
waitForIdle	cola2_lib_ros/python/cola2_ros/captain_helper.py	/^def waitForIdle():$/;"	f
waitForIdle	cola2_lib_ros/src/cola2_lib_ros/captain_helper.cpp	/^bool waitForIdle(ros::NodeHandle& nh)$/;"	f	namespace:cola2::rosutils
waitForIdleHelper	cola2_lib_ros/src/cola2_lib_ros/captain_helper.cpp	/^void waitForIdleHelper(bool* is_idle, bool* is_safety, std::mutex* mtx, bool* first_call,$/;"	f	namespace:cola2::rosutils
water_battery_external_	cola2_core/cola2_safety/include/cola2_safety/safety_rules/combined_water_inside.h	/^  bool water_battery_external_;$/;"	m	class:SafetyRules::CombinedWaterInside
water_battery_internal_	cola2_core/cola2_safety/include/cola2_safety/safety_rules/combined_water_inside.h	/^  bool water_battery_internal_;$/;"	m	class:SafetyRules::CombinedWaterInside
water_density	cola2_core/cola2_sim/src/dynamics_node.cpp	/^    double water_density;$/;"	m	struct:Dynamics::Config	file:
water_density_	cola2_core/cola2_nav/include/cola2_nav/ekf_base_ros.h	/^    double water_density_;  \/\/!< density of the water (used in pressure sensor computations)$/;"	m	struct:EKFBaseROS::Config
water_extra_	cola2_core/cola2_safety/include/cola2_safety/safety_rules/combined_water_inside.h	/^  bool water_extra_;$/;"	m	class:SafetyRules::CombinedWaterInside
water_inside_	cola2_core/cola2_safety/include/cola2_safety/safety_rules/water_inside.h	/^  bool water_inside_;$/;"	m	class:SafetyRules::WaterInside
water_main_external_	cola2_core/cola2_safety/include/cola2_safety/safety_rules/combined_water_inside.h	/^  bool water_main_external_;$/;"	m	class:SafetyRules::CombinedWaterInside
water_main_internal_	cola2_core/cola2_safety/include/cola2_safety/safety_rules/combined_water_inside.h	/^  bool water_main_internal_;$/;"	m	class:SafetyRules::CombinedWaterInside
workers	cola2_lib/include/cola2_lib/utils/thread_pool.h	/^  std::vector<std::thread> workers;$/;"	m	class:ThreadPool
world_frame_id	cola2_core/cola2_sim/src/dynamics_node.cpp	/^    std::string world_frame_id;$/;"	m	struct:Dynamics::Config	file:
wrapAngle	cola2_lib/src/cola2_lib/utils/angles.cpp	/^double wrapAngle(const double angle)$/;"	f	namespace:cola2::utils
wrapAngleDegrees	cola2_lib/src/cola2_lib/utils/angles.cpp	/^double wrapAngleDegrees(const double angle_deg)$/;"	f	namespace:cola2::utils
wrapAnglePositive	cola2_lib/src/cola2_lib/utils/angles.cpp	/^double wrapAnglePositive(const double angle)$/;"	f	namespace:cola2::utils
wrapAnglePositiveDegrees	cola2_lib/src/cola2_lib/utils/angles.cpp	/^double wrapAnglePositiveDegrees(const double angle_deg)$/;"	f	namespace:cola2::utils
wrap_angle	cola2_lib/python/cola2/utils/angles.py	/^def wrap_angle(angle):$/;"	f
wrenchToThrusterForces	cola2_core/cola2_control/src/cola2_control/low_level_controllers/only_thruster_allocator.cpp	/^Eigen::VectorXd OnlyThrusterAllocator::wrenchToThrusterForces(const Eigen::VectorXd& wrench)$/;"	f	class:OnlyThrusterAllocator
wrench_merge_	cola2_core/cola2_control/include/cola2_control/low_level_controllers/auv_controller_base.h	/^  Merge wrench_merge_;$/;"	m	class:IAUVController
write	cola2_core/cola2_log/startup_processes/shutdown_logger_startup_process.cpp	/^  void write(const std::string& event) const$/;"	f	class:ShutdownLogger	file:
write	cola2_lib/src/cola2_lib/io/serial_port.cpp	/^void SerialPort::write(const DataBuffer& dataBuffer)$/;"	f	class:cola2::io::SerialPort
write	cola2_lib/src/cola2_lib/io/serial_port.cpp	/^void SerialPort::write(const std::string& dataString)$/;"	f	class:cola2::io::SerialPort
write	cola2_lib/src/cola2_lib/io/tcp_socket.cpp	/^void TcpSocket::write(const DataBuffer& dataBuffer)$/;"	f	class:cola2::io::TcpSocket
write	cola2_lib/src/cola2_lib/io/tcp_socket.cpp	/^void TcpSocket::write(const std::string& dataString)$/;"	f	class:cola2::io::TcpSocket
writeAction	cola2_lib/src/cola2_lib/mission/mission.cpp	/^void Mission::writeAction(TiXmlElement* mission, const MissionAction& action)$/;"	f	class:Mission
writeByte	cola2_lib/src/cola2_lib/io/serial_port.cpp	/^void SerialPort::writeByte(const unsigned char dataByte)$/;"	f	class:cola2::io::SerialPort
writeByte	cola2_lib/src/cola2_lib/io/tcp_socket.cpp	/^void TcpSocket::writeByte(const unsigned char dataByte)$/;"	f	class:cola2::io::TcpSocket
writeManeuverGoto	cola2_lib/src/cola2_lib/mission/mission.cpp	/^void Mission::writeManeuverGoto(TiXmlElement* mission, const MissionGoto& g)$/;"	f	class:Mission
writeManeuverPark	cola2_lib/src/cola2_lib/mission/mission.cpp	/^void Mission::writeManeuverPark(TiXmlElement* mission, const MissionPark& park)$/;"	f	class:Mission
writeManeuverSection	cola2_lib/src/cola2_lib/mission/mission.cpp	/^void Mission::writeManeuverSection(TiXmlElement* mission, const MissionSection& sec)$/;"	f	class:Mission
writeMission	cola2_lib/src/cola2_lib/mission/mission.cpp	/^void Mission::writeMission(const std::string& mission_file_name)$/;"	f	class:Mission
writeMissionStep	cola2_lib/src/cola2_lib/mission/mission.cpp	/^void Mission::writeMissionStep(TiXmlElement* mission, const MissionStep& step)$/;"	f	class:Mission
write_action	cola2_lib/python/cola2/mission/mission_types.py	/^    def write_action(self, root, step):$/;"	m	class:Mission
write_action	cola2_lib/python/cola2/mission/mission_types_v1.py	/^    def write_action(self, root, step):$/;"	m	class:Mission
write_configuration	cola2_lib/python/cola2/mission/mission_types_v1.py	/^    def write_configuration(self, root, step):$/;"	m	class:Mission
write_goto_maneuver	cola2_lib/python/cola2/mission/mission_types.py	/^    def write_goto_maneuver(self, root, step):$/;"	m	class:Mission
write_mission	cola2_lib/python/cola2/mission/mission_types.py	/^    def write_mission(self, mission_file_name):$/;"	m	class:Mission
write_mission	cola2_lib/python/cola2/mission/mission_types_v1.py	/^    def write_mission(self, mission_file_name):$/;"	m	class:Mission
write_park_maneuver	cola2_lib/python/cola2/mission/mission_types.py	/^    def write_park_maneuver(self, root, step):$/;"	m	class:Mission
write_park_maneuver	cola2_lib/python/cola2/mission/mission_types_v1.py	/^    def write_park_maneuver(self, root, step):$/;"	m	class:Mission
write_path_	cola2_core/cola2_log/startup_processes/shutdown_logger_startup_process.cpp	/^  const std::string write_path_;$/;"	m	class:ShutdownLogger	file:
write_position	cola2_lib/python/cola2/mission/mission_types_v1.py	/^    def write_position(self, root, position, tag):$/;"	m	class:Mission
write_section_maneuver	cola2_lib/python/cola2/mission/mission_types.py	/^    def write_section_maneuver(self, root, step):$/;"	m	class:Mission
write_section_maneuver	cola2_lib/python/cola2/mission/mission_types_v1.py	/^    def write_section_maneuver(self, root, step):$/;"	m	class:Mission
write_tolerance	cola2_lib/python/cola2/mission/mission_types_v1.py	/^    def write_tolerance(self, root, tolerance):$/;"	m	class:Mission
write_waypoint_maneuver	cola2_lib/python/cola2/mission/mission_types_v1.py	/^    def write_waypoint_maneuver(self, root, step):$/;"	m	class:Mission
wwrCallback	cola2_core/cola2_safety/src/cola2_safety/safety_rules/navigator.cpp	/^Navigator::wwrCallback(const cola2_msgs::WorldWaypointReq& wwr)$/;"	f	class:SafetyRules::Navigator
x	cola2_core/cola2_control/include/cola2_control/controllers/types.h	/^  double x;$/;"	m	class:control::Point
x	cola2_core/cola2_control/include/cola2_control/controllers/types.h	/^  double x;$/;"	m	class:control::Vector6d
x	cola2_lib/src/cola2_lib/mission/mission_goto.cpp	/^double MissionGoto::x()$/;"	f	class:MissionGoto
x	cola2_lib/src/cola2_lib/mission/mission_park.cpp	/^double MissionPark::x()$/;"	f	class:MissionPark
x	cola2_lib/src/cola2_lib/mission/mission_section.cpp	/^double MissionSection::x()$/;"	f	class:MissionSection
x_	cola2_core/cola2_nav/include/cola2_nav/ekf_base.h	/^  Eigen::VectorXd x_;                             \/\/!< state vector$/;"	m	class:EKFBase
y	cola2_core/cola2_control/include/cola2_control/controllers/types.h	/^  double y;$/;"	m	class:control::Point
y	cola2_core/cola2_control/include/cola2_control/controllers/types.h	/^  double y;$/;"	m	class:control::Vector6d
y	cola2_lib/src/cola2_lib/mission/mission_goto.cpp	/^double MissionGoto::y()$/;"	f	class:MissionGoto
y	cola2_lib/src/cola2_lib/mission/mission_park.cpp	/^double MissionPark::y()$/;"	f	class:MissionPark
y	cola2_lib/src/cola2_lib/mission/mission_section.cpp	/^double MissionSection::y()$/;"	f	class:MissionSection
yaw	cola2_core/cola2_control/include/cola2_control/controllers/types.h	/^  double yaw;$/;"	m	class:control::Nav
yaw	cola2_core/cola2_control/include/cola2_control/controllers/types.h	/^  double yaw;$/;"	m	class:control::RPY
yaw	cola2_core/cola2_control/include/cola2_control/controllers/types.h	/^  double yaw;$/;"	m	class:control::Vector6d
z	cola2_core/cola2_control/include/cola2_control/controllers/types.h	/^  double z;$/;"	m	class:control::Point
z	cola2_core/cola2_control/include/cola2_control/controllers/types.h	/^  double z;$/;"	m	class:control::Vector6d
z	cola2_lib/src/cola2_lib/mission/mission_goto.cpp	/^double MissionGoto::z()$/;"	f	class:MissionGoto
z	cola2_lib/src/cola2_lib/mission/mission_park.cpp	/^double MissionPark::z()$/;"	f	class:MissionPark
z	cola2_lib/src/cola2_lib/mission/mission_section.cpp	/^double MissionSection::z()$/;"	f	class:MissionSection
~Captain	cola2_core/cola2_control/src/captain_node.cpp	/^Captain::~Captain()$/;"	f	class:Captain
~CommsNode	cola2_core/cola2_comms/src/comms_node.cpp	/^CommsNode::~CommsNode()$/;"	f	class:CommsNode
~IOBase	cola2_lib/src/cola2_lib/io/io_base.cpp	/^IOBase::~IOBase()$/;"	f	class:cola2::io::IOBase
~Mission	cola2_lib/src/cola2_lib/mission/mission.cpp	/^Mission::~Mission()$/;"	f	class:Mission
~MissionAction	cola2_lib/src/cola2_lib/mission/mission_action.cpp	/^MissionAction::~MissionAction()$/;"	f	class:MissionAction
~MissionGoto	cola2_lib/src/cola2_lib/mission/mission_goto.cpp	/^MissionGoto::~MissionGoto()$/;"	f	class:MissionGoto
~MissionManeuver	cola2_lib/src/cola2_lib/mission/mission_maneuver.cpp	/^MissionManeuver::~MissionManeuver()$/;"	f	class:MissionManeuver
~MissionPark	cola2_lib/src/cola2_lib/mission/mission_park.cpp	/^MissionPark::~MissionPark()$/;"	f	class:MissionPark
~MissionSection	cola2_lib/src/cola2_lib/mission/mission_section.cpp	/^MissionSection::~MissionSection()$/;"	f	class:MissionSection
~MissionStep	cola2_lib/src/cola2_lib/mission/mission_step.cpp	/^MissionStep::~MissionStep()$/;"	f	class:MissionStep
~NavigatorNode	cola2_core/cola2_nav/src/navigator_node.cpp	/^NavigatorNode::~NavigatorNode()$/;"	f	class:NavigatorNode
~NavigatorSurfaceNode	cola2_core/cola2_nav/src/navigator_surface_node.cpp	/^NavigatorSurfaceNode::~NavigatorSurfaceNode()$/;"	f	class:NavigatorSurfaceNode
~OnlyThrusterAllocator	cola2_core/cola2_control/src/cola2_control/low_level_controllers/only_thruster_allocator.cpp	/^OnlyThrusterAllocator::~OnlyThrusterAllocator()$/;"	f	class:OnlyThrusterAllocator
~ROSSimulationManager	stonefish_ros/src/ROSSimulationManager.cpp	/^ROSSimulationManager::~ROSSimulationManager()$/;"	f	class:sf::ROSSimulationManager
~SafetyRuleBaseClass	cola2_core/cola2_safety/src/cola2_safety/safety_rules/common.cpp	/^SafetyRuleBaseClass::~SafetyRuleBaseClass()$/;"	f	class:SafetyRules::SafetyRuleBaseClass
~SafetySupervisor	cola2_core/cola2_safety/src/safety_supervisor_node.cpp	/^SafetySupervisor::~SafetySupervisor()$/;"	f	class:SafetySupervisor
~ShutdownLogger	cola2_core/cola2_log/startup_processes/shutdown_logger_startup_process.cpp	/^  ~ShutdownLogger()$/;"	f	class:ShutdownLogger
~TcpSocket	cola2_lib/src/cola2_lib/io/tcp_socket.cpp	/^TcpSocket::~TcpSocket()$/;"	f	class:cola2::io::TcpSocket
~ThreadPool	cola2_lib/include/cola2_lib/utils/thread_pool.h	/^inline ThreadPool::~ThreadPool()$/;"	f	class:ThreadPool
