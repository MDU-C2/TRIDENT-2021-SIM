!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ActuatorOriginCallback	ROSSimulationManager.cpp	/^ActuatorOriginCallback::ActuatorOriginCallback(Actuator* act) : act(act)$/;"	f	class:sf::ActuatorOriginCallback
AddROSRobot	ROSSimulationManager.cpp	/^void ROSSimulationManager::AddROSRobot(ROSRobot* robot)$/;"	f	class:sf::ROSSimulationManager
BuildScenario	ROSSimulationManager.cpp	/^void ROSSimulationManager::BuildScenario()$/;"	f	class:sf::ROSSimulationManager
ColorCameraImageReady	ROSSimulationManager.cpp	/^void ROSSimulationManager::ColorCameraImageReady(ColorCamera* cam)$/;"	f	class:sf::ROSSimulationManager
DepthCameraImageReady	ROSSimulationManager.cpp	/^void ROSSimulationManager::DepthCameraImageReady(DepthCamera* cam)$/;"	f	class:sf::ROSSimulationManager
DisableCurrents	ROSSimulationManager.cpp	/^bool ROSSimulationManager::DisableCurrents(std_srvs::Trigger::Request &req, std_srvs::Trigger::Response &res)$/;"	f	class:sf::ROSSimulationManager
EnableCurrents	ROSSimulationManager.cpp	/^bool ROSSimulationManager::EnableCurrents(std_srvs::Trigger::Request &req, std_srvs::Trigger::Response &res)$/;"	f	class:sf::ROSSimulationManager
FLSScanReady	ROSSimulationManager.cpp	/^void ROSSimulationManager::FLSScanReady(FLS* fls)$/;"	f	class:sf::ROSSimulationManager
FLSService	ROSSimulationManager.cpp	/^FLSService::FLSService(FLS* fls) : fls(fls)$/;"	f	class:sf::FLSService
GenerateCameraMsgPrototypes	ROSInterface.cpp	/^std::pair<sensor_msgs::ImagePtr, sensor_msgs::CameraInfoPtr> ROSInterface::GenerateCameraMsgPrototypes(Camera* cam, bool depth)$/;"	f	class:sf::ROSInterface
GenerateFLSMsgPrototypes	ROSInterface.cpp	/^std::pair<sensor_msgs::ImagePtr, sensor_msgs::ImagePtr> ROSInterface::GenerateFLSMsgPrototypes(FLS* fls)$/;"	f	class:sf::ROSInterface
GenerateMSISMsgPrototypes	ROSInterface.cpp	/^std::pair<sensor_msgs::ImagePtr, sensor_msgs::ImagePtr> ROSInterface::GenerateMSISMsgPrototypes(MSIS* msis)$/;"	f	class:sf::ROSInterface
GenerateSSSMsgPrototypes	ROSInterface.cpp	/^std::pair<sensor_msgs::ImagePtr, sensor_msgs::ImagePtr> ROSInterface::GenerateSSSMsgPrototypes(SSS* sss)$/;"	f	class:sf::ROSInterface
JetVFCallback	ROSSimulationManager.cpp	/^JetVFCallback::JetVFCallback(Jet* vf) : vf(vf)$/;"	f	class:sf::JetVFCallback
MSISScanReady	ROSSimulationManager.cpp	/^void ROSSimulationManager::MSISScanReady(MSIS* msis)$/;"	f	class:sf::ROSSimulationManager
MSISService	ROSSimulationManager.cpp	/^MSISService::MSISService(MSIS* msis) : msis(msis)$/;"	f	class:sf::MSISService
Multibeam2ScanReady	ROSSimulationManager.cpp	/^void ROSSimulationManager::Multibeam2ScanReady(Multibeam2* mb)$/;"	f	class:sf::ROSSimulationManager
ParseActuator	ROSScenarioParser.cpp	/^Actuator* ROSScenarioParser::ParseActuator(XMLElement* element, const std::string& namePrefix)$/;"	f	class:sf::ROSScenarioParser
ParseAnimated	ROSScenarioParser.cpp	/^bool ROSScenarioParser::ParseAnimated(XMLElement* element)$/;"	f	class:sf::ROSScenarioParser
ParseComm	ROSScenarioParser.cpp	/^Comm* ROSScenarioParser::ParseComm(XMLElement* element, const std::string& namePrefix)$/;"	f	class:sf::ROSScenarioParser
ParseContact	ROSScenarioParser.cpp	/^bool ROSScenarioParser::ParseContact(XMLElement* element)$/;"	f	class:sf::ROSScenarioParser
ParseLight	ROSScenarioParser.cpp	/^Light* ROSScenarioParser::ParseLight(XMLElement* element, const std::string& namePrefix)$/;"	f	class:sf::ROSScenarioParser
ParseRobot	ROSScenarioParser.cpp	/^bool ROSScenarioParser::ParseRobot(XMLElement* element)$/;"	f	class:sf::ROSScenarioParser
ParseSensor	ROSScenarioParser.cpp	/^Sensor* ROSScenarioParser::ParseSensor(XMLElement* element, const std::string& namePrefix)$/;"	f	class:sf::ROSScenarioParser
ParseVelocityField	ROSScenarioParser.cpp	/^VelocityField* ROSScenarioParser::ParseVelocityField(XMLElement* element)$/;"	f	class:sf::ROSScenarioParser
PreProcess	ROSScenarioParser.cpp	/^bool ROSScenarioParser::PreProcess(XMLNode* root, const std::map<std::string, std::string>& args)$/;"	f	class:sf::ROSScenarioParser
PropellersCallback	ROSSimulationManager.cpp	/^PropellersCallback::PropellersCallback(ROSSimulationManager* sm, ROSRobot* robot) : sm(sm), robot(robot)$/;"	f	class:sf::PropellersCallback
PublishAccelerometer	ROSInterface.cpp	/^void ROSInterface::PublishAccelerometer(ros::Publisher& pub, Accelerometer* acc)$/;"	f	class:sf::ROSInterface
PublishContact	ROSInterface.cpp	/^void ROSInterface::PublishContact(ros::Publisher& contactPub, Contact* cnt)$/;"	f	class:sf::ROSInterface
PublishDVL	ROSInterface.cpp	/^void ROSInterface::PublishDVL(ros::Publisher& pub, ros::Publisher& altPub, DVL* dvl)$/;"	f	class:sf::ROSInterface
PublishEncoder	ROSInterface.cpp	/^void ROSInterface::PublishEncoder(ros::Publisher& pub, RotaryEncoder* enc)$/;"	f	class:sf::ROSInterface
PublishForceTorque	ROSInterface.cpp	/^void ROSInterface::PublishForceTorque(ros::Publisher& pub, ForceTorque* ft)$/;"	f	class:sf::ROSInterface
PublishGPS	ROSInterface.cpp	/^void ROSInterface::PublishGPS(ros::Publisher& pub, GPS* gps)$/;"	f	class:sf::ROSInterface
PublishGyroscope	ROSInterface.cpp	/^void ROSInterface::PublishGyroscope(ros::Publisher& pub, Gyroscope* gyro)$/;"	f	class:sf::ROSInterface
PublishIMU	ROSInterface.cpp	/^void ROSInterface::PublishIMU(ros::Publisher& pub, IMU* imu)$/;"	f	class:sf::ROSInterface
PublishLaserScan	ROSInterface.cpp	/^void ROSInterface::PublishLaserScan(ros::Publisher& laserScanPub, Multibeam* mbes)$/;"	f	class:sf::ROSInterface
PublishOdometry	ROSInterface.cpp	/^void ROSInterface::PublishOdometry(ros::Publisher& pub, Odometry* odom)$/;"	f	class:sf::ROSInterface
PublishPointCloud	ROSInterface.cpp	/^void ROSInterface::PublishPointCloud(ros::Publisher& pointCloudPub, Multibeam2* mb)$/;"	f	class:sf::ROSInterface
PublishPressure	ROSInterface.cpp	/^void ROSInterface::PublishPressure(ros::Publisher& pub, Pressure* press)$/;"	f	class:sf::ROSInterface
PublishTF	ROSInterface.cpp	/^void ROSInterface::PublishTF(tf::TransformBroadcaster& broadcaster, const Transform& T, const ros::Time& t, const std::string &frame_id, const std::string &child_frame_id)$/;"	f	class:sf::ROSInterface
PublishTrajectoryState	ROSInterface.cpp	/^void ROSInterface::PublishTrajectoryState(ros::Publisher& odom, ros::Publisher& iter, AnimatedEntity* anim)$/;"	f	class:sf::ROSInterface
PublishUSBL	ROSInterface.cpp	/^void ROSInterface::PublishUSBL(ros::Publisher& usblPub, USBL* usbl)$/;"	f	class:sf::ROSInterface
ROSScenarioParser	ROSScenarioParser.cpp	/^ROSScenarioParser::ROSScenarioParser(ROSSimulationManager* sm) : ScenarioParser(sm)$/;"	f	class:sf::ROSScenarioParser
ROSSimulationManager	ROSSimulationManager.cpp	/^ROSSimulationManager::ROSSimulationManager(Scalar stepsPerSecond, std::string scenarioFilePath) $/;"	f	class:sf::ROSSimulationManager
ReplaceROSVars	ROSScenarioParser.cpp	/^bool ROSScenarioParser::ReplaceROSVars(XMLNode* node)$/;"	f	class:sf::ROSScenarioParser
RuddersCallback	ROSSimulationManager.cpp	/^RuddersCallback::RuddersCallback(ROSSimulationManager* sm, ROSRobot* robot) : sm(sm), robot(robot)$/;"	f	class:sf::RuddersCallback
SSSScanReady	ROSSimulationManager.cpp	/^void ROSSimulationManager::SSSScanReady(SSS* sss)$/;"	f	class:sf::ROSSimulationManager
SSSService	ROSSimulationManager.cpp	/^SSSService::SSSService(SSS* sss) : sss(sss)$/;"	f	class:sf::SSSService
SensorOriginCallback	ROSSimulationManager.cpp	/^SensorOriginCallback::SensorOriginCallback(Sensor* sens) : sens(sens)$/;"	f	class:sf::SensorOriginCallback
ServosCallback	ROSSimulationManager.cpp	/^ServosCallback::ServosCallback(ROSSimulationManager* sm, ROSRobot* robot) : sm(sm), robot(robot)$/;"	f	class:sf::ServosCallback
SimulationClockSleep	ROSSimulationManager.cpp	/^void ROSSimulationManager::SimulationClockSleep(uint64_t us)$/;"	f	class:sf::ROSSimulationManager
SimulationStepCompleted	ROSSimulationManager.cpp	/^void ROSSimulationManager::SimulationStepCompleted(Scalar timeStep)$/;"	f	class:sf::ROSSimulationManager
SubstituteROSVars	ROSScenarioParser.cpp	/^std::string ROSScenarioParser::SubstituteROSVars(const std::string& value)$/;"	f	class:sf::ROSScenarioParser
ThrustersCallback	ROSSimulationManager.cpp	/^ThrustersCallback::ThrustersCallback(ROSSimulationManager* sm, ROSRobot* robot) : sm(sm), robot(robot)$/;"	f	class:sf::ThrustersCallback
TrajectoryCallback	ROSSimulationManager.cpp	/^TrajectoryCallback::TrajectoryCallback(ManualTrajectory* tr) : tr(tr)$/;"	f	class:sf::TrajectoryCallback
UniformVFCallback	ROSSimulationManager.cpp	/^UniformVFCallback::UniformVFCallback(Uniform* vf) : vf(vf)$/;"	f	class:sf::UniformVFCallback
VBSCallback	ROSSimulationManager.cpp	/^VBSCallback::VBSCallback(VariableBuoyancy* act) : act(act)$/;"	f	class:sf::VBSCallback
getCameraMsgPrototypes	ROSSimulationManager.cpp	/^std::map<std::string, std::pair<sensor_msgs::ImagePtr, sensor_msgs::CameraInfoPtr>>& ROSSimulationManager::getCameraMsgPrototypes()$/;"	f	class:sf::ROSSimulationManager
getNodeHandle	ROSSimulationManager.cpp	/^ros::NodeHandle& ROSSimulationManager::getNodeHandle()$/;"	f	class:sf::ROSSimulationManager
getPublishers	ROSSimulationManager.cpp	/^std::map<std::string, ros::Publisher>& ROSSimulationManager::getPublishers()$/;"	f	class:sf::ROSSimulationManager
getServiceServers	ROSSimulationManager.cpp	/^std::map<std::string, ros::ServiceServer>& ROSSimulationManager::getServiceServers()$/;"	f	class:sf::ROSSimulationManager
getSimulationClock	ROSSimulationManager.cpp	/^uint64_t ROSSimulationManager::getSimulationClock()$/;"	f	class:sf::ROSSimulationManager
getSonarMsgPrototypes	ROSSimulationManager.cpp	/^std::map<std::string, std::pair<sensor_msgs::ImagePtr, sensor_msgs::ImagePtr>>& ROSSimulationManager::getSonarMsgPrototypes()$/;"	f	class:sf::ROSSimulationManager
getSubscribers	ROSSimulationManager.cpp	/^std::map<std::string, ros::Subscriber>& ROSSimulationManager::getSubscribers()$/;"	f	class:sf::ROSSimulationManager
main	parsed_simulator.cpp	/^int main(int argc, char **argv)$/;"	f
main	parsed_simulator_nogpu.cpp	/^int main(int argc, char **argv)$/;"	f
operator ()	ROSSimulationManager.cpp	/^bool FLSService::operator()(stonefish_ros::SonarSettings::Request& req, stonefish_ros::SonarSettings::Response& res)$/;"	f	class:sf::FLSService
operator ()	ROSSimulationManager.cpp	/^bool MSISService::operator()(stonefish_ros::SonarSettings2::Request& req, stonefish_ros::SonarSettings2::Response& res)$/;"	f	class:sf::MSISService
operator ()	ROSSimulationManager.cpp	/^bool SSSService::operator()(stonefish_ros::SonarSettings::Request& req, stonefish_ros::SonarSettings::Response& res)$/;"	f	class:sf::SSSService
operator ()	ROSSimulationManager.cpp	/^void ActuatorOriginCallback::operator()(const geometry_msgs::TransformConstPtr& msg)$/;"	f	class:sf::ActuatorOriginCallback
operator ()	ROSSimulationManager.cpp	/^void JetVFCallback::operator()(const std_msgs::Float64ConstPtr& msg)$/;"	f	class:sf::JetVFCallback
operator ()	ROSSimulationManager.cpp	/^void PropellersCallback::operator()(const cola2_msgs::SetpointsConstPtr& msg)$/;"	f	class:sf::PropellersCallback
operator ()	ROSSimulationManager.cpp	/^void RuddersCallback::operator()(const cola2_msgs::SetpointsConstPtr& msg)$/;"	f	class:sf::RuddersCallback
operator ()	ROSSimulationManager.cpp	/^void SensorOriginCallback::operator()(const geometry_msgs::TransformConstPtr& msg)$/;"	f	class:sf::SensorOriginCallback
operator ()	ROSSimulationManager.cpp	/^void ServosCallback::operator()(const sensor_msgs::JointStateConstPtr& msg)$/;"	f	class:sf::ServosCallback
operator ()	ROSSimulationManager.cpp	/^void ThrustersCallback::operator()(const cola2_msgs::SetpointsConstPtr& msg)$/;"	f	class:sf::ThrustersCallback
operator ()	ROSSimulationManager.cpp	/^void TrajectoryCallback::operator()(const nav_msgs::OdometryConstPtr& msg)$/;"	f	class:sf::TrajectoryCallback
operator ()	ROSSimulationManager.cpp	/^void UniformVFCallback::operator()(const geometry_msgs::Vector3ConstPtr& msg)$/;"	f	class:sf::UniformVFCallback
operator ()	ROSSimulationManager.cpp	/^void VBSCallback::operator()(const std_msgs::Float64ConstPtr& msg)$/;"	f	class:sf::VBSCallback
sf	ROSInterface.cpp	/^namespace sf$/;"	n	file:
sf	ROSScenarioParser.cpp	/^namespace sf$/;"	n	file:
sf	ROSSimulationManager.cpp	/^namespace sf$/;"	n	file:
~ROSSimulationManager	ROSSimulationManager.cpp	/^ROSSimulationManager::~ROSSimulationManager()$/;"	f	class:sf::ROSSimulationManager
