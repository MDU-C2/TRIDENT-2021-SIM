#!/usr/bin/env python
# -*- coding: utf-8 -*-
# Copyright (c) 2020 Iqua Robotics SL - All Rights Reserved
#
# This file is subject to the terms and conditions defined in file
# 'LICENSE.txt', which is part of this source code package.

"""
Python wrapper to C++ encode/decode elapsed_time values to uint8.
"""

import ctypes as ct


def encode(elapsed_time):
    """
    Encode elapsed time data as uint8.

    :param elapsed_time: Elapsed time value.
    :type elapsed_time: int

    :return: Elapsed time encoded as uint8.
    :rtype: int
    """
    libcomms = ct.cdll.LoadLibrary("@INSTALL_LIB_DIR@/libcola2_comms.so")
    libcomms.elapsedTimeEncode.restype = ct.c_uint8
    return libcomms.elapsedTimeEncode(ct.c_int32(elapsed_time))


def is_maximum(encoded):
    """
    Check if encoded value is maximum elapsed time defined.

    :param encoded: Encoded elapsed time.
    :type encoded: int

    :return: Encoded value is maximum.
    :rtype: bool
    """
    libcomms = ct.cdll.LoadLibrary("@INSTALL_LIB_DIR@/libcola2_comms.so")
    libcomms.elapsedTimeIsMaximum.restype = ct.c_bool
    return libcomms.elapsedTimeIsMaximum(ct.c_uint8(encoded))


def is_invalid(encoded):
    """
    Check if encoded value is invalid.

    :param encoded: Encoded elapsed time.
    :type encoded: int

    :return: Encoded value is invalid.
    :rtype: bool
    """
    libcomms = ct.cdll.LoadLibrary("@INSTALL_LIB_DIR@/libcola2_comms.so")
    libcomms.elapsedTimeIsInvalid.restype = ct.c_bool
    return libcomms.elapsedTimeIsInvalid(ct.c_uint8(encoded))


def is_encoding_error(encoded):
    """
    Check if encoded value is an encoding error.

    :param encoded: Encoded elapsed time.
    :type encoded: int

    :return: Encoded value is an encoding error.
    :rtype: bool
    """
    libcomms = ct.cdll.LoadLibrary("@INSTALL_LIB_DIR@/libcola2_comms.so")
    libcomms.elapsedTimeIsEncodingError.restype = ct.c_bool
    return libcomms.elapsedTimeIsEncodingError(ct.c_uint8(encoded))


def decode(encoded):
    """
    Decode elapsed time value from uint8.

    :param encoded: Encoded elapsed time value.
    :type encoded: int
    :return: Elapsed time value.
    :rtype: int
    """
    libcomms = ct.cdll.LoadLibrary("@INSTALL_LIB_DIR@/libcola2_comms.so")
    libcomms.elapsedTimeDecode.restype = ct.c_int32
    return libcomms.elapsedTimeDecode(ct.c_uint8(encoded))
